tkmedit received a substantial rewrite at some point, but also retains
some of its roots, and its organization is not the best. The main
file, tkmedit.c, contains the data loading and operation, and the
global variables that own the data. The tkmMeditWindow and
tkmDisplayArea deal specifically with windowing, display, and UI
stuff. The tkmFunctionalVolume manages the functional overlay and time
course volumes. tkmedit also makes use of some helper code in utils/
with the prefixes mri (followed by a camel-case name), such as
mriTransform.

You'll see different stages of this rewrite in the way that variables
and functions are named as well as with the use of debugging
macros. Yes, tkmedit uses goto function. No, it doesn't use it in a
bad way. The goto functions implement a kind of dirty throw/catch
mechanism. Later this was replaced with the Debug* macros (see
utils/xDebug.c for info).

The first part of tkmedit.c is divided into function declarations and
variables. They are grouped by data type or functional category. Most
of the functios are documented or simple enough to not need
documentation. All data operations are done in tkmedit.c (externally,
via the interface functions in tkmedit.h; the function names are
prefixed with tkm_ and generally just call functions in tkmedit.c).

The function that parses command line arguments is
ParseCmdLineArgs. It's pretty standard and easy to modify.

The mriTransform code, referenced by mriTransformRef pointers and
functions that start with Trns_, is a little nuanced, and deserves
some explanation. It was orignally designed to implement the concept
of multiple coordinate spaces being handled in a single transform
object. In tkmedit you are often transforming from one volume's native
space to that volume's registered RAS space, to another volume's
registered RAS space, to that volume's native index space. Therefore
the transform has four spaces: A, ARAS, BRAS, and B, with functions to
convert coordinates between them and MATRIX objects that can be set to
transform between them (A->ARAS, B->BRAS, and ARAS->BRAS). This is, in
fact, how it is used to register functional volumes to anatomical
volumes, and the concept fits pretty well.

However, it was used incorrectly in some places, and not
changed. Thankfully, it's somewhat documented. You'll see some
diagrams that look like this:

  // gMRIIdxToAnaIdxTransform keeps track of
  //        src ---> RAS
  //  non-   |        |
  //  triv   |        |identity
  //         V        V
  //    conformed --> RAS
  //      256^3

They try to diagram the spaces and describe the transforms that go
between them. In this case, A is src, B is conformed. This is a common
misuse of the concept in which you have a non-comformed volume's
transform to conformed space. This is what the global
gMRIIdxToAnaIdxTransform volume does.

Why do volumes need to be conformed in tkmedit? The original code
assumed that all volumes were conformed, and made all its graphics
assumptions based on a range of 0-255 in all three axes. Nowadays,
volumes aren't always conformed, so there needed to be a way to bridge
that gap. "MRIIdx" refers to the native index space of a volume ("src"
above), and "AnaIdx" refers to this conformed 256^3 space that we use
for graphical coordinates in tkmedit. So, all volumes (and surfaces)
will be converted to AnaIdx space before going to the screen, while
most data operations are actually done in MRIIdx space.

There's also the "TkRegRAS" and "Surface" space, but that's beyond the
scope of this document, as they say.

There are Tcl bindings for selected functions. These functions all
have a Tcl prefix, such as TclTranslateOverlayRegistration, and often
just parse arguments and call the similarly named C functions, such as
TranslateOverlayRegistration. Commands are sent from C to Tcl with the
tkm_SendTclCommand function, which takes an enumeration value
corresponding to the Tcl function name, and a string argument to
append to the Tcl function name. In this way all outgoing Tcl commands
are routed through one function.

The tkmMeditWindow code manages a xGLutWindow (see
utils/xGLutWindow.c) and the multiple display panes that actually
display data, the tkmDisplayAreas. The Window basically routes a lot
of messages and UI events to the 'current' display area.

The tkmDisplayArea code is the heart of the graphical and UI
interaction code. The DspA_Handle* functions respond to keys and mouse
events, and perform the tools code. This is often the entry point to
making changes to how a tool works. Because this code is rather flat,
there are a lot of switch statements and code branches. The
DspA_HandleMouseMoved_ function is probably the worst, but also does
the most stuff.

The main drawing code starts at Dspa_HandleDraw_. This function calls
a bunch of subfunctions to draw various data types to the frame
buffer. The anatomical volume is drawn in the DspA_BuildCurrentFrame_
function, which draws the 'background' on which the other layers are
drawn. tkmedit does a good job at compositing colors onto the buffer
so everything is fairly compatible.

Generally, when a piece of data is loaded in the by the user,
tkmedit.c does the actual loading, then calls a MWin_Set* function on
the main window to set that piece of data in the window. The Window
then goes through its tkmDisplayAreas and calls the corresponding
DspA_Set* function there. The Areas then keep pointers to that data so
it can draw it later.

Tool interaction goes the other way, starting from the Area, possible
polling the data for values, but ultimately calling a tkm_* function
in tkmedit.c to do the actual editing.

tkmFunctionalVolume is just an interface for handling the functional
volume overlay and timecourse plotting. It keeps track of state such
as the current time point and condition, and actually generates the
Tcl commands to draw the graph. The Tcl commands reside in the
tkm_functional.tcl (separate from tkmedit.tcl). tkmFunctionalVolume
uses mriFunctionalDataAccess to load and represent an actual volume.

Note that tkmMeditWindow and tkmFunctionalVolume declare their own Tcl
bound functions, so if you're looking for Tcl functions check there
too. Tcl functions that have to do with graphics state (such as cursor
placement, settings, etc) and tool settings go through tkmMeditWindow
to tkmDisplayAreas.

The interface code is mostly in tkmedit.tcl and is fairly well
organized. There are a lot of functions and a lot of dialog boxes but
it's fairly consistent. The functional charting stuff is in
tkm_functional.tcl. tkmedit.tcl explicitly sends values to the C code
with Set* functions that are defined in tkmedit.c or other C code. It
gets values from the C code when the C code calls Update* functions
that reside in the Tcl code. Some values are sent in groups with Send*
commands on the Tcl side, such as options in a dialog box with an
Apply button.
