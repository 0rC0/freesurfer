tksurfer is a very old program with a lot of stuff bolted on. Unlike
tkmedit, which received a rewrite in the early 2000s, tksurfer has a
lot of its original code. Most of the code I've written on top of it
is enclosed in /* begin/end rkt */ comments. I'll attempt to document
some of the basic gotchas in the code and where to find certain
things, and there's a lot of detail in the inline comments of my code
as well.

tksurfer still has some #defines that deal with code having to do with
Tcl and OpenGL code. I can only assume that at one point, the code
didn't use Tcl and OpenGL and was maintained for multiple targets. But
the values TCL and OPENGL are permanently defined as 1 now.

There is a lot of code that may seem indecipherable or pointless. I
tried to leave that alone since a lot of old scripts and usage habits
depend on it.

There are a lot of global variables in tksurfer, and some are quite
important. There are a lot of filenames that tksurfer automatically
generates based on the subject name and other environment
variables. These are generally called something like *name such as
ifname and ofname. Many older data loading functions first set one of
these global variables and then calls a function that loads data based
on the values of these variables (instead of passing in a file name).

Several drawing settings are also global, such as fslope and
cmid. However, many of the drawing functions also create local
versions of these, so always double check to see which you are
using. Many of these are also named *flag such as suclflag and
overlayflag.

tksurfer has an interesting way of selecting vertices. The user clicks
with the left mouse button to select a vertex (drawn in blue), and
upon clicking on another one, the previously selected vertex remains
marked (drawn in white). In this way the user builds up a list of
marked (white) vertices until he right clicks to clear them. The
selected vertex is in the "selected" variable, and there is an array
called "marked" that holds the marked vertices, with "nmarked" holding
the count. Alot of loops go through "marked" from 0 to "nmarked" to
work on marked vertices.

There is a "new main" which is the actual main() function for the
program. It does some weird stuff, including looking for and sourcing
the tksurfer.tcl interface function, running the Tcl library *_Init
functions, and creating the Tcl commands and linked variables. It also
calls Surfer(), which is the old main function. This function does all
the command line parsing and data loading.

The main event loop is in the poorly named do_one_gl_event()
function. There are two parts to this, and one is #ifdef'd out; the
first part, with case names like ButtonPress and XK_Up, is the one
that's actually used.

The MRIS structre has a lot of different coordinate positions in the
VERTEX structure with names like x, origx, cx, etc, each with several
different meanings in different contexts. In tksurfer I tried to
simplify this by keeping alternate coordinate values in separate
storage, not in the surface. This code is accessed by the vset_*
(vertex set) functions.

Similarly, there are lots of scalar value fields in the VERTEX
structure with names like val, imag_val, val2, val2bak, etc. This is
dealt with in tksurfer with the sclv_* (scalar value) code. The sclv_*
code also serves double duty to handle functional volume overlays, for
which scalar values are calculated by looking up a location in a
volume. The SCLV_FIELD_INFO struct is a bit crowded because of this,
but the interface should be pretty clean. It currently handles:

 - old style dot-w files, which contain one value per vertex.

 - new style "volume encoded scalar files", which, despite a confusing
   name, is just a .mgh or .mgz file with width * height * depth equal
   to the number of vertices in the surface. It can also have multiple
   frames.

 - functional overlay volumes, which are actually mriFunctionalDataRef
   structs that tksurfer does coordiate lookups in based on a vertex's
   location.

The function sclv_read_from_dotw() is used to read the first type, and
the function sclv_read_from_volume() is used for the second and third
types. The tksurfer.tcl interface code looks at the file suffix of a
file to be loaded to determine which function should be called.

Note that overlay functional volumes is different from the functional
volume support code, or func_*. This code is for loading timecourses
and plotting them in a graph.

The drawing code is unfortunately complex. At some point I implemented
a 'simpledrawingmode' flag that basically took over the flow of the
drawing code, but it still needs to use a lot of coloring functions
that use arguments in ways I never really figured out.

But, to familiarize yourself with this code, start at
draw_surface(). This function calls fill_vertex_arrays(), which just
makes an array ("vertices" and "normals") of vertex data, and
fill_color_array(), which is the main source of confusion. Most of the
drawing complexity in tksurfer is coloring the vertices, as there are
lots of "layers" for coloring: curvature, scalar values, labels,
functional, paths, and even stuff like fieldsign that I don't really
know anything about. The old code had just a few functions that would
do unspeakable and undocumented things. I tried to clean things up a
bit by making *_apply_color* functions that work in an additive way,
but I still had to use the older functions to maintain consistency. So
anyway, starting at fill_color_array() at the if(simpledrawmodeflag)
statement is a good strating point.

tksurfer binds Tcl command names to C functions and Tcl variables to C
variables. Let's walk through an example of this with the
sclv_read_from_dotw C function. First notice that there is a function
named W_sclv_read_from_dotw defined as such:

int W_sclv_read_from_dotw  PARM;

The PARM macro is an old (not my fault) macro for defining the
arguments for a Tcl callback function. So this is just a Tcl callback
function with a similar name to the corresponding C function. Later,
the function is defined like this:

int W_sclv_read_from_dotw  WBEGIN
  ERR(2,"Wrong # args: sclv_read_from_dotw field")
  sclv_read_from_dotw(vfname,atoi(argv[1]));
WEND

Why it was necessary to use macros is beyond me, but this basically
just defines the function, does some checking to make sure it's
getting the right number of arguments, and then calls
sclv_read_from_dotw with the arguments it got in argv (and one of the
ubiquitous global file names).

If your function needs to do something more complicated, you can avoid
the macros and write your own function. For an example of this, see
W_func_load_timecourse. W_sclv_get_normalized_color_for_value actually
returns a value to Tcl land, and W_get_marked_vnos returns a list of
numbers.

The variables are simpler. The Tcl_LinkVar function does links a
string name in Tcl land to the address of a variable in C land. Some
names, like redrawlockflag, are the same in both spaces, but I've
attempted to remove the four letter prefixes to variables in Tcl land
and giving them names that are more consistent with the historical
variable names in tksurfer.tcl, such as linking "drawlabelflag" in Tcl
to "labl_draw_flag" in C. Note that you must provide the proper data
type as the last argument to Tcl_LinkVar.

The interface file, tksurfer.tcl, has to deal with some older
paradigms, but for the most part is pretty much rewritten. The one
thing that is kind of hacky is how it deal with the linked
variables. Because it's not always good to let the Tcl land modify
variables directly in the C code, I put a layer in between the
updates. The gaLinkedVars array has an element named after every
linked variable in the C code. The Tcl code references those arguments
via that array, e.g. to get the functional threshold, it access
gaLinkedVars(fthresh). This does not actually change the value in C
land, though, because the gaLinkedVars is purely local to Tcl land. To
actually push the change to C land, tksurfer.tcl uses the
SendLinkedVarGroup. Those named variables are grouped by category;
e.g., the overlay group contains fthresh, fmid, fslope, and so on. To
push the value of fthresh, you would first set gaLinkedVars(fthresh)
and then call "SendLinkedVarGroup overlay". Similarly, to get a value
from C land, use UpdateLinkedVarGroup.

The support code in tkm_wrappers.tcl is used extensively in
tkmedit.tcl to create widgets. All functions that have a tkm_ prefix
are defined in tkm_wrappers.tcl.
