
    NAME         

          mris_calc      

    SYNOPSIS        

          mris_calc [OPTIONS] <file1> <ACTION> [<file2> | <floatNumber>] 

    DESCRIPTION        

	'mris_calc' is a simple calculator that operates on FreeSurfer 
	curvatures and volumes.

	In most cases, the calculator functions with three arguments:
        two inputs and an <ACTION> linking them. Some actions, however,
        operate with only one input <file1>.

        In all cases, the first input <file1> is the name of a FreeSurfer 
        curvature overlay (e.g. rh.curv) or volume file (e.g. orig.mgz).

        For two inputs, the calculator first assumes that the second input
        is a file. If, however, this second input file doesn't exist, the
        calculator assumes it refers to a float number, which is then
        processed according to <ACTION>.

    OPTIONS         

    	--output <outputCurvFile>
   	 -o <outputCurvFile>

    	By default, 'mris_calc' will save the output of the calculation to a 
    	file in the current working directory with filestem 'out'. The file
    	extension is automatically set to the appropriate filetype based on
    	the input. For any volume type, the output defaults to '.mgz' and for
    	curvature inputs, the output defaults to '.crv'.

    	--version
    	-v

	Print out version number.     

    	--verbosity <value>

	Set the verbosity of the program. Any positive value will trigger
	verbose output, displaying intermediate results. The <value> can be
	set arbitrarily. Useful mostly for debugging.

    ACTION

	The action to be perfomed on the two input files. This is a 
	text string that defines the mathematical operation to execute. For 
	two inputs, this action is applied in an indexed element-by-element
	fashion, i.e. 
	
			<file3>[n] = <file1>[n] <ACTION> <file2>[n] 

	where 'n' is an index counter into the data space.

	ACTION  INPUTS OUTPUTS	                EFFECT
	  mul	   2      1     <outputFile> = <file1> * <file2>
	  div	   2	  1     <outputFile> = <file1> / <file2>
	  add      2	  1	<outputFile> = <file1> + <file2>
	  sub	   2	  1     <outputFile> = <file1> - <file2>
	  set	   2	  1     <file1>	     = <file2> | <floatNum>

          ascii    1      1     <outputFile> = ascii <file1>
	  abs	   1      1     <outputFile> = abs(<file1>)

          size     1      0     print the size (number of elements) of <file1>
          min      1      0     print the min value (and index) of <file1>
          max      1      0     print the max value (and index) of <file1>
          mean     1      0     print the mean value of <file1>
          std      1      0     print the standard deviation of <file1>
          stats    1      0     process 'size', 'min', 'max', 'mean', 'std'

    NOTES ON ACTIONS

	The 'set' command overwrites its input data. It still requires a valid
	<file1> -- since in most instances the 'set' command is used to set
	input data values to a single float constant, i.e. 

		$>mris_calc rh.area set 0.005

	will set all values of rh.area to 0.005. It might be more meaningful
	to first make a copy of the input file, and set this

		$>cp rh.area rh-0.005
		$>mris_calc rh-0.005 set 0.005

	Similarly for volumes

		$>cp orig.mgz black.mgz
		$>mris_calc black.mgz set 0

	will result in the 'black.mgz' volume having all its intensity values
	set to 0.

        The 'ascii' command converts <file1> to a text format file, 
        suitable for reading into MatLAB, for example. Note that for volumes
	data values are written out as a 1D linear array with looping order
	(slice, height, width).

        Note also that the standard deviation can suffer from float rounding
        errors and is only accurate to 4 digits of precision.

    ARBITRARY FLOATS AS SECOND INPUT ARGUMENT

	If a second input argument is specified, 'mris_calc' will attempt to
        open the argument following <ACTION> as if it were a curvature file. 
        Should this file not exist, 'mris_calc' will attempt to parse the 
        argument as if it were a float value.

	In such a case, 'mris_calc' will create a dummy internal
	array structure and set all its elements to this float value.

    NOTES         

	<file1> and <file2> should typically be generated on the
	same subject.

    EXAMPLES        

    	$>mris_calc rh.area mul rh.thickness    

	Multiply each value in <rh.area> with the corresponding value
	in <rh.thickness>, creating a new file called 'out.crv' that
	contains the result.

    	$>mris_calc --output rh.weightedCortex rh.area mul rh.thickness    

	Same as above, but give the ouput file the more meaningful name
	of 'rh.weightedCortex'.

        $>mris_calc rh.area max
       
        Determine the maximum value in 'rh.area' and print to stdout. In
        addition to the max value, the index offset in 'rh.area' containing
        this value is also printed.

        $>mris_calc rh.area stats

        Determine the size, min, max, mean, and std of 'rh.area'.

	$>mris_calc orig.mgz sub brainmask.mgz

	Subtract the brainmask.mgz volume from the orig.mgz volume. Result is
	saved by default to out.mgz.

    ADVANCED EXAMPLES

	Consider the case when calculating the right hemisphere pseudo volume
	formed by the FreeSurfer generated white matter 'rh.area' curvature 
	file, and the cortical thickness, 'rh.thickness'. Imagine this is to 
	be expressed as a percentage of intercranial volume.

	First, calculate the volume and store in a curvature format:

		$>mris_calc -o rh.cortexVol rh.area mul rh.thickness

	Now, find the intercranial volume (ICV) in the corresponding output 
	file generated by FreeSurfer for this subject. Assume ICV = 100000.

		$>mris_calc -o rh.cortexVolICV rh.cortexVol div 100000
	
	Here the second <ACTION> argument is a number and not a curvature file.

	We could have achieved the same effect by first creating an
	intermediate curvature file, 'rh.ICV' with each element set to 
	the ICV, and then divided by this curvature:
	
		$>cp rh.area rh.ICV
		$>mris_calc rh.ICV set 100000
		$>mris_calc -o rh.cortexVolICV rh.cortexVol div rh.ICV



