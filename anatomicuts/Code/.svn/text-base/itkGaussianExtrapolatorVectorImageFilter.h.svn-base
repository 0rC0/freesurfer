#ifndef _itk_GaussianExtrapolatorVectorImageFilter_h_
#define _itk_GaussianExtrapolatorVectorImageFilter_h_

#include <itkImageToImageFilter.h>
#include <itkGaussianSpatialFunction.h>
#include <vnl/vnl_vector.h>
#include <vnl/vnl_matrix.h>
#include <vnl/vnl_sparse_matrix.h>
#include <typeinfo>
#include "itkVectorValue.h"
#include "itkKdTree.h"
#include "itkKdTreeGenerator.h"
#include "itkListSample.h"
//#include "vtkSmartPointer.h"

namespace itk
{
    /*
template<class S, unsigned int  D> 
class SmartVector : public Vector<S,D>
{
    public: 
        typedef SmartVector Self;
        typedef Vector<S,D>  Superclass;
        typedef SmartPointer<Self>  Pointer;

        typedef SmartPointer<const Self>                     ConstPointer;

        itkNewMacro(Self);
        itkTypeMacro(SmartVector,Vector);
};
*/
  template<class TInputImage, class TOutputImage>
    class ITK_EXPORT GaussianExtrapolatorVectorImageFilter :
  public ImageToImageFilter<TInputImage, TOutputImage>
  {
    
  public:
    
    typedef GaussianExtrapolatorVectorImageFilter            Self;
    typedef ImageToImageFilter<TInputImage,TOutputImage> Superclass;
    typedef SmartPointer<Self>                           Pointer;
    typedef SmartPointer<const Self>                     ConstPointer;

    itkNewMacro(Self);
    itkTypeMacro(GaussianExtrapolatorVectorImageFilter,
		 ImageToImageFilter);
    itkStaticConstMacro(ImageDimension, unsigned int,
			TOutputImage::ImageDimension);

    /** Image typedefs */
    typedef TInputImage                          InputImageType;
    typedef TOutputImage                         OutputImageType;
//    typedef typename InputImageType::PixelType   InputPixelType;
    typedef typename OutputImageType::PixelType  OutputPixelType;
    typedef typename OutputPixelType::ValueType  ScalarType;
//    typedef SmartPointer<OutputPixelType>    OutputPixelPointerType;
//    typedef SmartVector<ScalarType,ImageDimension> OutputPixelPointerType;
//    itkNewMacro(OutputPixelType);
    typedef typename OutputImageType::RegionType OutputImageRegionType;
    typedef typename OutputImageType::PointType  PointType;
    typedef typename OutputImageType::IndexType  IndexType;
    

    typedef GaussianSpatialFunction<double, TOutputImage::ImageDimension> FunctionType; 
    
    /** Specific typedefs */
    typedef std::vector<OutputPixelType>         VectorOfPixelType;
    typedef std::vector<PointType>               VectorOfPointsType;
    typedef vnl_vector<double>                   GeneralVectorType;
    typedef vnl_matrix<double>                   GeneralMatrixType;
    typedef vnl_sparse_matrix<double>            SparseMatrixType;

    typedef VectorWeighted<  int, float, 3 >                             MeasurementVectorType;
    typedef Statistics::ListSample< MeasurementVectorType > SampleType;
    typedef SampleType::Pointer                             SamplePointer;
    typedef Statistics::KdTreeGenerator< SampleType >       TreeGeneratorType;
    typedef typename TreeGeneratorType::KdTreeType          TreeType;
    typedef typename TreeType::NearestNeighbors             NeighborsType;
    typedef typename TreeType::KdTreeNodeType               NodeType;
    typedef typename TreeType::Pointer                      TreeTypePointer;


    /** Set/Get the vector of tensors */
    void SetVectors( const VectorOfPixelType vec )
    { 
      m_Vectors = vec;
    }
    VectorOfPixelType GetVectors(void) const
    {return m_Vectors;}
    
    /** Set/Get the vector of positions */
    void SetPoints(const VectorOfPointsType vec)
    { m_Points=vec; }
    VectorOfPointsType GetPoints(void) const 
    { return m_Points; }
    
    /** Set/Get the parameter sigma */
    itkSetMacro(Sigma,double);
    itkGetMacro(Sigma,double);
    /** Set/Get the parameter gamma */
    itkSetMacro(Gamma,double);
    itkGetMacro(Gamma,double);
    
	itkGetMacro(L,GeneralMatrixType);
    /** Directly give the interpolated value given a list of positions */
    void InterpolateAtPointThreaded(const PointType &pt, int threadId, OutputPixelType& px);
    void InterpolateAtIndexThreaded(const IndexType &index, int threadId, OutputPixelType& px);
    void InterpolateAtPoint(const PointType &pt, OutputPixelType& px){
        
        InterpolateAtPointThreaded(pt,0,px);
    
    }
    void InterpolateAt(const IndexType &index, OutputPixelType& px){InterpolateAtIndexThreaded(index,0,px);}



    /** Directly give the interpolated value given a list of positions */
    static VectorOfPixelType InterpolateValuesAt(const VectorOfPixelType&,
                                                 const VectorOfPointsType&,
                                                 const VectorOfPointsType&,
                                                 const ScalarType&, const ScalarType&);
    void Initialize();

  protected:
    
    GaussianExtrapolatorVectorImageFilter()
    {
m_function = FunctionType::New(); // one must be created for each thread
      m_Sigma = 1.0;
      m_Gamma = 1.0;
    }
    ~GaussianExtrapolatorVectorImageFilter(){};
    
    /** Threaded implementation */
    void BeforeThreadedGenerateData(void);
    void AfterThreadedGenerateData(void){};
    void ThreadedGenerateData(const OutputImageRegionType &,int);
    void PrintSelf(std::ostream& os, Indent indent) const
    {
      Superclass::PrintSelf(os,indent);
    }

    /** Internal methods */
    ScalarType h(const PointType&, const PointType&, const ScalarType& sigma, const ScalarType& gamma);
    

  private:
    
    VectorOfPixelType  m_Vectors;
    VectorOfPointsType m_Points;
    typename  FunctionType::Pointer m_function    ;
    GeneralMatrixType m_L;

    double m_Sigma; // sigma used for interpolation
    double m_Gamma;
 
    std::map<double, GeneralMatrixType> mapPointDistances;
    std::vector<GeneralMatrixType> distancesForPoints;
    std::vector<PointType>  pointsForDistances;    
    OutputPixelType m_MaxValue;
 
    SamplePointer m_Sample;
    std::vector<TreeTypePointer> m_Trees;
  
 
 };


} // end of namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkGaussianExtrapolatorVectorImageFilter.txx"
#endif

#endif
