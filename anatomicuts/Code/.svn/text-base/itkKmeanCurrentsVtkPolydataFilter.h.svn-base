#ifndef _itk_KmeanCurrentsVtkPolydataFilter_h
#define _itk_KmeanCurrentsVtkPolydataFilter_h
#include "itkKdTree.h"
#include "itkKdTreeGenerator.h"
#include "itkKdTreeBasedKmeansEstimator.h"
#include "itkListSample.h"
#include "itkArray.h"
#include "itkVector.h"
#include "itkImageKmeansModelEstimator.h"
#include "itkImageRegionIteratorWithIndex.h"
#include "itkImageToListSampleAdaptor.h"
#include "itkKMeansClassifierFilter.h"
#include "itkVariableLengthVectorCurrents.h"
#include "itkVariableLengthVector.h"

#include "itkMeshToMeshFilter.h"

namespace itk
{
  
  template <class TMesh>
    class KmeanCurrentsVtkPolydataFilter :
public ProcessObject
//  public MeshToMeshFilter<TInputMesh, TOutputMesh>
  {
    public: 
    typedef KmeanCurrentsVtkPolydataFilter       Self;
//    typedef MeshToMeshFilter<TInputMesh, TOutputMesh>       Superclass;
    typedef SmartPointer<Self>                              Pointer;
    typedef SmartPointer<const Self>                        ConstPointer;
    
    itkNewMacro  (Self);
    itkTypeMacro (KmeanCurrentsVtkPolydataFilter,ProcessObject);
 
/*       typedef TOutputMesh                         OutputMeshType;
    typedef typename OutputMeshType::MeshTraits OutputMeshTraits;
    typedef typename OutputMeshType::PointType  OutputPointType;
    typedef typename OutputMeshType::PixelType  OutputPixelType;
*/
    
    typedef TMesh                         MeshType;
    typedef typename MeshType::MeshTraits MeshTraits;
    typedef typename MeshType::PointType  PointType;
    typedef typename MeshType::PixelType  PixelType;
    typedef typename MeshType::CellType   CellType;
    typedef typename MeshType::Pointer   MeshPointerType;
    
    typedef typename std::vector<MeshPointerType>  ListOfOutputMeshTypePointer;     
    /** Some convenient typedefs. */
/*    typedef typename OutputMeshType::Pointer         OutputMeshPointer;
    typedef typename std::vector<OutputMeshPointer>  ListOfOutputMeshTypePointer;     
    typedef typename OutputMeshType::CellTraits      OutputCellTraits;
    typedef typename OutputMeshType::CellIdentifier  OutputCellIdentifier;
    typedef typename OutputMeshType::CellType        OutputCellType;
    typedef typename OutputMeshType::CellAutoPointer OutputCellAutoPointer;
    typedef typename OutputMeshType::PointIdentifier OutputPointIdentifier;
    typedef typename OutputCellTraits::PointIdIterator     OutputPointIdIterator;
    
    typedef typename OutputMeshType::PointsContainerPointer
      OutputPointsContainerPointer;
    
    typedef typename OutputMeshType::PointsContainer
      OutputPointsContainer;

    typedef typename OutputMeshType::CellsContainer
      OutputCellsContainer;

    typedef typename OutputMeshType::CellsContainerPointer
      OutputCellsContainerPointer;


    typedef PolylineCell<OutputCellType>                      PolylineCellType;
  */  
    typedef typename MeshType::CellTraits      MeshCellTraits;
    typedef typename MeshType::CellIdentifier  MeshCellIdentifier;
    typedef typename MeshType::CellType        MeshCellType;
    typedef typename MeshType::CellAutoPointer MeshCellAutoPointer;
    typedef typename MeshType::PointIdentifier MeshPointIdentifier;
    typedef typename MeshCellTraits::PointIdIterator   MeshPointIdIterator;
    
    typedef typename MeshType::PointsContainerPointer       PointsContainerPointer;
    
    typedef typename MeshType::PointsContainer       PointsContainer;

    typedef typename MeshType::CellsContainer      CellsContainer;

    typedef typename MeshType::CellsContainerPointer      CellsContainerPointer;

 
    ListOfOutputMeshTypePointer GetOutput()
    {
      return this->m_Output;
    }
   
    void SetNumberOfClusters(int n)
    { this->numberOfClusters = n;}

   int GetNumberOfClusters()
    {
      return this->numberOfClusters;
    }
    std::vector<int> GetLabels()
    { return this->labels;}
    void SetLabels(std::vector<int> labels)
    { this->labels = labels; }

	MeshPointerType GetInput()
	{ return this->input; }
	void SetInput(MeshPointerType input)
{	this->input = input ; }
//void Update();
	virtual void Update(void);    
  
  itkGetMacro( SigmaCurrents, int );
//  itkSetMacro( SigmaCurrents, int );
	void SetSigmaCurrents(int s){	this->m_SigmaCurrents =s; }

itkSetMacro( NumberOfIterations, unsigned int );
  itkGetMacro( NumberOfIterations, unsigned int );


  protected:
  MeshPointerType input;
  std::vector<int> labels;
    ListOfOutputMeshTypePointer m_Output;
    int numberOfClusters;
    KmeanCurrentsVtkPolydataFilter() {}
    ~KmeanCurrentsVtkPolydataFilter() {}

//    virtual void GenerateData (void);
  private:
  unsigned int 		 		m_NumberOfIterations; 
    KmeanCurrentsVtkPolydataFilter (const Self&);
    void operator=(const Self&);    
    int m_SigmaCurrents;
 };  
}

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkKmeanCurrentsVtkPolydataFilter.txx"
#endif

#endif

