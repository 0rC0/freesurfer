#ifndef _itk_MeshCorrespondencesCalculatorBase_h
#define _itk_MeshCorrespondencesCalculatorBase_h

#include "itkObject.h"

#include <vector>

namespace itk
{
  
  /**
     \class MeshCorrespondencesCalculatorBase

     Base class for mesh correspondence calculator classes.
  */  
  template < class TFixedMesh, class TMovingMesh >
    class MeshCorrespondencesCalculatorBase : public Object
  {
  public:
    
    typedef MeshCorrespondencesCalculatorBase Self;
    typedef Object                            Superclass;
    typedef SmartPointer <Self>               Pointer;
    typedef SmartPointer <const Self>         ConstPointer;
    
    
    itkTypeMacro (MeshCorrespondencesCalculatorBase, Object);
    

    typedef TFixedMesh                           FixedMeshType;
    typedef typename FixedMeshType::MeshTraits   FixedMeshTraits;
    typedef typename FixedMeshType::PointType    FixedPointType;
    typedef typename FixedMeshType::PixelType    FixedPixelType;
    typedef typename FixedPointType::VectorType  FixedVectorType;


    typedef TMovingMesh                           MovingMeshType;
    typedef typename MovingMeshType::MeshTraits   MovingMeshTraits;
    typedef typename MovingMeshType::PointType    MovingPointType;
    typedef typename MovingMeshType::PixelType    MovingPixelType;
    typedef typename MovingPointType::VectorType  MovingVectorType;


    /** Some convenient typedefs. */
    typedef typename FixedMeshType::Pointer            FixedMeshPointer;
    typedef typename FixedMeshType::CellTraits         FixedCellTraits;
    typedef typename FixedMeshType::CellIdentifier     FixedCellIdentifier;
    typedef typename FixedMeshType::CellType           FixedCellType;
    typedef typename FixedMeshType::CellAutoPointer    FixedCellAutoPointer;
    typedef typename FixedMeshType::PointIdentifier    FixedPointIdentifier;
    typedef typename FixedCellTraits::PointIdIterator  FixedPointIdIterator;


    typedef typename MovingMeshType::Pointer           MovingMeshPointer;
    typedef typename MovingMeshType::CellTraits        MovingCellTraits;
    typedef typename MovingMeshType::CellIdentifier    MovingCellIdentifier;
    typedef typename MovingMeshType::CellType          MovingCellType;
    typedef typename MovingMeshType::CellAutoPointer   MovingCellAutoPointer;
    typedef typename MovingMeshType::PointIdentifier   MovingPointIdentifier;
    typedef typename FixedCellTraits::PointIdIterator  MovingPointIdIterator;

    
    /** Specific typedefs */
    typedef std::vector<double>            MetricListType;
    typedef std::vector<MovingVectorType>  VectorListType;
    typedef std::vector<MovingPointType>   PointListType;


    itkSetObjectMacro (MovingMesh, MovingMeshType);
    itkGetObjectMacro (MovingMesh, MovingMeshType);

    itkSetObjectMacro (FixedMesh, FixedMeshType);
    itkGetObjectMacro (FixedMesh, FixedMeshType);

    
    virtual void Evaluate (void) = 0;
    virtual void EvaluateNewton (void) {throw "Newton method Not implemented";};
    virtual void EvaluateTimes (int times, float epsilon){throw "Evaluate times not implemented";};
 

    VectorListType GetOutputVectors()
    { return m_vecV; }

    PointListType GetOutputPositions()
    { return m_vecP; }

    MetricListType GetOutputMetricValues()
    { return m_metric; }
   
    void SetSpacing(double s ){this->spacing = s;}
    double GetSpacing(){return this->spacing;}
   
    double GetSigma( ){return this->sigma; }
    void SetSigma(double s ){ this->sigma =  s ; }
//    virtual void RecalculateSigma()=0; 
    virtual double Distance(){return 0;} 
    void SetUpsamplingPointsNumber(unsigned int n){this->upsamplingPointsNumber= n;}
    unsigned int GetUpsamplingPointsNumber(){return this->upsamplingPointsNumber;}
 protected:
    MeshCorrespondencesCalculatorBase() {
      this->spacing = 1;}
    ~MeshCorrespondencesCalculatorBase() {}

    VectorListType m_vecV;
    PointListType  m_vecP;
    MetricListType m_metric;

    typename MovingMeshType::Pointer m_MovingMesh;
    typename FixedMeshType::Pointer  m_FixedMesh;

    
  private:    
    double sigma;
    MeshCorrespondencesCalculatorBase(const Self&);
    void operator=(const Self&);
    double spacing;
    unsigned int upsamplingPointsNumber;
}; 

} // end of namespace
 
#endif //__CorrespondenceMethod_h
