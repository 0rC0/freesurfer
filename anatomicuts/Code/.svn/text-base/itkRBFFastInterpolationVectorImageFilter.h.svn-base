#ifndef _itk_RBFFastInterpolationVectorImageFilter_h_
#define _itk_RBFFastInterpolationVectorImageFilter_h_

#include <itkImageToImageFilter.h>
//#include <itkGaussianSpatialFunction.h>
#include <vnl/vnl_vector.h>
#include <vnl/vnl_matrix.h>
#include <vnl/vnl_sparse_matrix.h>
#include <typeinfo>

namespace itk
{
  
  template<class TInputImage, class TOutputImage>
    class ITK_EXPORT RBFFastInterpolationVectorImageFilter :
  public ImageToImageFilter<TInputImage, TOutputImage>
  {
    
  public:
    
    typedef RBFFastInterpolationVectorImageFilter            Self;
    typedef ImageToImageFilter<TInputImage,TOutputImage> Superclass;
    typedef SmartPointer<Self>                           Pointer;
    typedef SmartPointer<const Self>                     ConstPointer;

    itkNewMacro(Self);
    itkTypeMacro(RBFFastInterpolationVectorImageFilter,
		 ImageToImageFilter);
    itkStaticConstMacro(ImageDimension, unsigned int,
			TOutputImage::ImageDimension);

    /** Image typedefs */
    typedef TInputImage                          InputImageType;
    typedef TOutputImage                         OutputImageType;
//    typedef typename InputImageType::PixelType   InputPixelType;
    typedef typename OutputImageType::PixelType  OutputPixelType;
    typedef typename OutputPixelType::ValueType  ScalarType;
    typedef typename OutputImageType::RegionType OutputImageRegionType;
    typedef typename OutputImageType::PointType  PointType;
    typedef typename OutputImageType::IndexType  IndexType;
    

    /** Specific typedefs */
    typedef std::vector<OutputPixelType>         VectorOfPixelType;
    typedef std::vector<PointType>               VectorOfPointsType;
    typedef vnl_vector<double>                   GeneralVectorType;
    typedef vnl_matrix<double>                   GeneralMatrixType;
    typedef vnl_sparse_matrix<double>            SparseMatrixType;

    /** Set/Get the vector of tensors */
    void SetVectors( const VectorOfPixelType vec )
    { 
      m_Vectors = vec;
    }
    VectorOfPixelType GetVectors(void) const
    {return m_Vectors;}
    
    /** Set/Get the vector of positions */
    void SetPoints(const VectorOfPointsType vec)
    { m_Points=vec; }
    VectorOfPointsType GetPoints(void) const 
    { return m_Points; }
    
    /** Set/Get the parameter sigma */
    itkSetMacro(Sigma,double);
    itkGetMacro(Sigma,double);
    /** Set/Get the parameter gamma */
    itkSetMacro(Gamma,double);
    itkGetMacro(Gamma,double);
	itkGetMacro(L,GeneralMatrixType);
    /** Directly give the interpolated value given a list of positions */
    OutputPixelType InterpolateAt(const IndexType &index);



    /** Directly give the interpolated value given a list of positions */
    static VectorOfPixelType InterpolateValuesAt(const VectorOfPixelType&,
                                                 const VectorOfPointsType&,
                                                 const VectorOfPointsType&,
                                                 const ScalarType&, const ScalarType&);

  protected:
    
    RBFFastInterpolationVectorImageFilter()
    {
      m_Sigma = 1.0;
      m_Gamma = 1.0;
    }
    ~RBFFastInterpolationVectorImageFilter(){};
    
    /** Threaded implementation */
    void BeforeThreadedGenerateData(void);
    void AfterThreadedGenerateData(void);
    void ThreadedGenerateData(const OutputImageRegionType &,int);
    void PrintSelf(std::ostream& os, Indent indent) const
    {
      Superclass::PrintSelf(os,indent);
    }

    /** Internal methods */
    static OutputPixelType ComputeMeanOfVectors(const VectorOfPixelType&);
    static inline ScalarType h(const PointType&, const PointType&, const ScalarType& sigma, const ScalarType& gamma);
    

  private:
    
    VectorOfPixelType  m_Vectors;
    VectorOfPointsType m_Points;
    
    GeneralMatrixType m_L;

    double m_Sigma; // sigma used for interpolation
    double m_Gamma;
	std::map<double, GeneralMatrixType> mapPointDistances;
    std::vector<GeneralMatrixType> distancesForPoints;
    std::vector<PointType>  pointsForDistances;    
    OutputPixelType m_MaxValue;
  };


} // end of namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkRBFFastInterpolationVectorImageFilter.txx"
#endif

#endif
