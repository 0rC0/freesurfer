#ifndef _itk_MultiImageDemonsRegistrationFunction_h_
#define _itk_MultiImageDemonsRegistrationFunction_h_

#include "itkPDEDeformableRegistrationFunction.h"
#include "itkMeshDemonsRegistrationFunction.h"
#include "itkGaussianMapImageSource.h"
#include "itkMaximumImageFilter.h"
#include "itkESMDemonsRegistrationFunction.h"

namespace itk
{
struct GlobalDataStruct
    {
    double          m_SumOfSquaredDifference;
    unsigned long   m_NumberOfPixelsProcessed;
    double          m_SumOfSquaredChange;
};

    template < class TFixedImage, class TMovingImage,
             class TDeformationField >
    class MultiImageDemonsRegistrationFunction :
    public ESMDemonsRegistrationFunction< TFixedImage,
//         public PDEDeformableRegistrationFunction< TFixedImage,
                                            TMovingImage, TDeformationField>
  {
  public:
    typedef MultiImageDemonsRegistrationFunction     Self;
 //   typedef PDEDeformableRegistrationFunction
    typedef ESMDemonsRegistrationFunction  
    < TFixedImage, TMovingImage, TDeformationField > Superclass;
    typedef SmartPointer<Self>                         Pointer;
    typedef SmartPointer<const Self>                   ConstPointer;

    itkNewMacro  (Self);
    itkTypeMacro (MultiImageDemonsRegistrationsFunction, PDEDeformableRegistrationFunction);

    /** MovingImage image type. */
    typedef typename Superclass::MovingImageType      MovingImageType;
    typedef typename Superclass::MovingImagePointer   MovingImagePointer;
    typedef typename MovingImageType::PixelType       MovingPixelType;

    typedef typename Superclass::NeighborhoodType     NeighborhoodType;
    typedef typename Superclass::FloatOffsetType      FloatOffsetType;
    typedef typename Superclass::PixelType            PixelType;
    typedef typename Superclass::TimeStepType         TimeStepType;
    
    /** FixedImage image type. */
    typedef typename Superclass::FixedImageType       FixedImageType;
    typedef typename Superclass::FixedImagePointer    FixedImagePointer;
    typedef typename FixedImageType::IndexType        IndexType;
    typedef typename FixedImageType::SizeType         SizeType;
    typedef typename FixedImageType::SpacingType      SpacingType;
    typedef typename FixedImageType::DirectionType    DirectionType;


    typedef TDeformationField DeformationField;
    typedef typename DeformationField::Pointer DeformationFieldPointer;
    //typedef typename Superclass::GradientType       GradientType;
/** Image Demons function */
//    typedef PDEDeformableRegistrationFunction
    typedef ESMDemonsRegistrationFunction
      < TFixedImage, TMovingImage, TDeformationField> ImageDemonsFunctionType;

  typedef typename ImageDemonsFunctionType::GradientType        GradientType;

    void AddImageRegistrationFunction (typename ImageDemonsFunctionType::Pointer function, float weight)
    { 
        m_ImageDemonsFunctionList.push_back(function);
        m_ImageDemonsFunctionWeightsList.push_back(weight);
    
    }

    void ClearImageDemonsFunctions()
    {
        m_ImageDemonsFunctionList.clear();
    }
       /** This class uses a constant timestep of 1. */
    virtual TimeStepType ComputeGlobalTimeStep(void * GlobalData) const
    { 
        double step = 0;
        for(int i=0; i< globalDatas.size();i++)
        {
            step += Superclass::ComputeGlobalTimeStep(globalDatas[i])/globalDatas.size();
        }

        return step; 
    
    }


    float GetMetric();

    virtual void InitializeIteration();
    
    virtual PixelType  ComputeUpdate(const NeighborhoodType &neighborhood,
				     void *globalData,
				     const FloatOffsetType &offset = FloatOffsetType(0.0));
    void SetMovingImage(MovingImagePointer image, unsigned int index)
    {
        m_ImageDemonsFunctionList[index]->SetMovingImage(image);
    }
    void SetFixedImage(FixedImagePointer image, unsigned int index)
    {
        m_ImageDemonsFunctionList[index]->SetFixedImage(image);
    }
    void SetDeformationField(DeformationFieldPointer f)
    {
        Superclass::SetDeformationField(f);    
       // std::cout << " initial velocity field " << f << std::endl;
        for(int i=0; i<m_ImageDemonsFunctionList.size();i++)
        {
         //   m_ImageDemonsFunctionList[i]->SetInitialVelocityField(f);
            m_ImageDemonsFunctionList[i]->SetDeformationField(f);
        }
    }

   double GetIntensityDifferenceThreshold() ;
    void SetIntensityDifferenceThreshold(double );
  
      double GetMaximumUpdateStepLength();
  void SetMaximumUpdateStepLenght(double);
//double GetIntensityDifferenceThreshold();
const double& GetRMSChange();
void SetUseGradientType(GradientType gtype);

  protected:

    MultiImageDemonsRegistrationFunction ():Superclass()
    {
//      m_ImageDemonsFunction = 0;
  //    m_ImageDemonsFunction2 = 0;
    }
    ~MultiImageDemonsRegistrationFunction() {}

  private:
    MultiImageDemonsRegistrationFunction (const Self&);
    void operator=(const Self&);

    std::vector<typename ImageDemonsFunctionType::Pointer> m_ImageDemonsFunctionList;
    std::vector<float> m_ImageDemonsFunctionWeightsList;
    /*
    typename ImageDemonsFunctionType::Pointer m_ImageDemonsFunction1;
    typename ImageDemonsFunctionType::Pointer m_ImageDemonsFunction2;

    FixedImagePointer m_FixedImage1;    
    FixedImagePointer m_FixedImage2;    
    MovingImagePointer m_MovingImage1;
    MovingImagePointer m_MovingImage2;
*/
    TimeStepType m_TimeStep;

    std::vector<void*> globalDatas;
    int iter;    
  };

} // end of namespace

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkMultiImageDemonsRegistrationFunction.txx"
#endif

#endif
