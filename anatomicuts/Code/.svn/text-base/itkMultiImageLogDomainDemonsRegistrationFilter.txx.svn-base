#ifndef __itkMultiImageLogDomainDemonsRegistrationFilter_txx
#define __itkMultiImageLogDomainDemonsRegistrationFilter_txx

#include "itkMultiImageLogDomainDemonsRegistrationFilter.h"


namespace itk {

// Default constructor
template < class TFixedImage, class TMovingImage, class TField>
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::MultiImageLogDomainDemonsRegistrationFilter():Superclass()
{
    this->SetNumberOfRequiredInputs(0);
/*  this->m_MultiImageRegistrationFunction = ImageDemonsRegistrationFunctionType::New();

  this->SetDifferenceFunction( static_cast<FiniteDifferenceFunctionType *>(
                                 m_MultiImageRegistrationFunction.GetPointer() ) );
*/
  m_Multiplier = MultiplyByConstantType::New();
  m_Multiplier->InPlaceOn();
 
  m_BCHFilter = BCHFilterType::New();
  m_BCHFilter->InPlaceOn();

  // Set number of terms in the BCH approximation to default value
  m_BCHFilter->SetNumberOfApproximationTerms( 2 );
}


// Checks whether the DifferenceFunction is of type DemonsRegistrationFunction.
template < class TFixedImage, class TMovingImage, class TField>
typename MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::ImageDemonsRegistrationFunctionType*
MultiImageLogDomainDemonsRegistrationFilter<TFixedImage,TMovingImage,TField>
::DownCastDifferenceFunctionType()
{
  ImageDemonsRegistrationFunctionType *drfp = 
    dynamic_cast<ImageDemonsRegistrationFunctionType *>(this->GetDifferenceFunction().GetPointer());
 
  if( !drfp )
    {
    itkExceptionMacro( << "Could not cast difference function to SymmetricDemonsRegistrationFunction" );
    }

  return drfp;
}


// Checks whether the DifferenceFunction is of type DemonsRegistrationFunction.
template < class TFixedImage, class TMovingImage, class TField>
const typename MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::ImageDemonsRegistrationFunctionType*
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::DownCastDifferenceFunctionType() const
{
  //const ImageDemonsRegistrationFunctionType *drfp =  dynamic_cast<const ImageDemonsRegistrationFunctionType *>(this->GetDifferenceFunction().GetPointer());
  const ImageDemonsRegistrationFunctionType *drfp =  dynamic_cast<const ImageDemonsRegistrationFunctionType *>(this);
 
  if( !drfp )
    {
    itkExceptionMacro( << "Could not cast difference function to SymmetricDemonsRegistrationFunction" );
    }

  return drfp;
}


// Set the function state values before each iteration
template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::InitializeIteration()
{
  const ImageDemonsRegistrationFunctionType *drfp = 
    dynamic_cast<const ImageDemonsRegistrationFunctionType *>(this->GetDifferenceFunction().GetPointer());
 
 // drfp->SetDeformationField( this->GetDeformationField() );
//  drfp->SetDeformationField( this->GetInitialDeformationField() );
drfp->SetDeformationField(this->GetOutput());
    
    std::cout << " initialize iteration " << drfp << std::endl;
    Superclass::InitializeIteration();
//    m_MultiImageRegistrationFunction->InitializeIteration();
}


// Get the metric value from the difference function
template < class TFixedImage, class TMovingImage, class TField>
double
MultiImageLogDomainDemonsRegistrationFilter<TFixedImage,TMovingImage,TField>
::GetMetric() const
{
  return m_MultiImageRegistrationFunction->GetMetric();
}


// Get Intensity Difference Threshold
template < class TFixedImage, class TMovingImage, class TField>
double
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::GetIntensityDifferenceThreshold() const
{
  return m_MultiImageRegistrationFunction->GetIntensityDifferenceThreshold();
}

// Set Intensity Difference Threshold
template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::SetIntensityDifferenceThreshold(double threshold) 
{
  m_MultiImageRegistrationFunction->SetIntensityDifferenceThreshold(threshold);
}


// Set Maximum Update Step Length
template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::SetMaximumUpdateStepLength(double step)
{

    std::cout << " step " << step << std::endl;
    m_MultiImageRegistrationFunction->SetMaximumUpdateStepLength(step);
}

// Get Maximum Update Step Length
template < class TFixedImage, class TMovingImage, class TField>
double
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::GetMaximumUpdateStepLength() const
{
  return m_MultiImageRegistrationFunction->GetMaximumUpdateStepLength();
}

// Set number of terms used in the BCH approximation
template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::SetNumberOfBCHApproximationTerms(unsigned int numterms)
{
  this->m_BCHFilter->SetNumberOfApproximationTerms(numterms);
}


// Get number of terms used in the BCH approximation
template < class TFixedImage, class TMovingImage, class TField>
unsigned int
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::GetNumberOfBCHApproximationTerms() const
{
  return this->m_BCHFilter->GetNumberOfApproximationTerms();
}


// Get the metric value from the difference function
template < class TFixedImage, class TMovingImage, class TField>
const double &
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::GetRMSChange() const
{
    std::cout <<  "RMS cjamge  " << m_MultiImageRegistrationFunction->GetRMSChange()<<std::endl;
    return m_MultiImageRegistrationFunction->GetRMSChange();
}


// Get gradient type
template < class TFixedImage, class TMovingImage, class TField>
typename MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>::GradientType
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::GetUseGradientType() const
{
  return m_MultiImageRegistrationFunction->GetUseGradientType();
}

// Set gradient type
template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::SetUseGradientType(GradientType gtype) 
{
  m_MultiImageRegistrationFunction->SetUseGradientType(gtype);
}

// Get the metric value from the difference function
template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::ApplyUpdate(TimeStepType dt)
{
  
  // If we smooth the update buffer before applying it, then the are
  // approximating a viscuous problem as opposed to an elastic problem
  if ( this->GetSmoothUpdateField() )
    {
    this->SmoothUpdateField();
    }
  
  // Use time step if necessary. In many cases
  
  // the time step is one so this will be skipped
  dt=2.0;
  std::cout << " timne step " << this->GetMaximumUpdateStepLength()<<" dt: "<< dt << std::endl; 
//  if ( fabs(this->GetMaximumUpdateStepLength() - 1.0)>1.0e-4 )
  if ( fabs(dt - 1.0)>1.0e-4 )
    {

        std::cout << " time step " << dt << std::endl;
        itkDebugMacro( "Using timestep: " << dt );
    m_Multiplier->SetConstant( dt );
    m_Multiplier->SetInput( this->GetUpdateBuffer() );
    m_Multiplier->GraftOutput( this->GetUpdateBuffer() );
    // in place update
    m_Multiplier->Update();
    // graft output back to this->GetUpdateBuffer()
    this->GetUpdateBuffer()->Graft( m_Multiplier->GetOutput() );
    }


  // Apply update by using BCH approximation
  m_BCHFilter->SetInput( 0, this->GetOutput() );
  m_BCHFilter->SetInput( 1, this->GetUpdateBuffer() );
  if ( m_BCHFilter->GetInPlace() )
    {
    m_BCHFilter->GraftOutput( this->GetOutput() );
    }
  else
    {
    // Work-around for http://www.itk.org/Bug/view.php?id=8672
    m_BCHFilter->GraftOutput( DeformationFieldType::New() );
    }
  m_BCHFilter->GetOutput()->SetRequestedRegion( this->GetOutput()->GetRequestedRegion() );

  // Triggers in place update
  m_BCHFilter->Update();
  
  // Region passing stuff
  this->GraftOutput( m_BCHFilter->GetOutput() );


  //Smooth the velocity field
  std::cout << " smooth " << this->GetSmoothVelocityField() << std::endl;
  if( this->GetSmoothVelocityField() )
    {
    this->SmoothVelocityField();
    }

}


template < class TFixedImage, class TMovingImage, class TField>
void
MultiImageLogDomainDemonsRegistrationFilter< TFixedImage,TMovingImage,TField>
::PrintSelf(std::ostream& os, Indent indent) const
{ 
  Superclass::PrintSelf( os, indent );

  os << indent << "Multiplier: " << m_Multiplier << std::endl;
  os << indent << "BCHFilter: " << m_BCHFilter << std::endl;
}


} // end namespace itk

#endif
