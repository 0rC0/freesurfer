#ifndef __itkKMeansClassifierFilter_h
#define __itkKMeansClassifierFilter_h

#include <vector>

#include "itkMembershipSample.h"
//#include "itkMembershipFunctionBase.h"
#include "itkCurrentsToCentroidMembershipFunction.h"
#include "itkEuclideanToCentroidMembershipFunction.h"
#include "itkDecisionRule.h"
#include "itkProcessObject.h"
#include "itkSimpleDataObjectDecorator.h"

using namespace itk;
using namespace itk::Statistics;

template< class TSample , class TMembershipFunction>
class  KMeansClassifierFilter : 
      public ProcessObject
{
public:
  /** Standard class typedef */
  typedef KMeansClassifierFilter         Self;
  typedef ProcessObject                  Superclass;
  typedef SmartPointer< Self >           Pointer;
  typedef SmartPointer<const Self>       ConstPointer;

  /** Standard macros */
  itkTypeMacro(KMeansClassifierFilter, ProcessObject);
  itkNewMacro(Self);

  /** Type of the input KMeans */
  typedef TSample                        SampleType;
  typedef TMembershipFunction  MembershipFunctionType;

  /** typedefs Output type */
  typedef MembershipSample< SampleType >                     MembershipSampleType;
  typedef typename MembershipSampleType::Pointer             MembershipSampleObjectPointer; 

  /** typedefs from KMeansType object */
  typedef typename SampleType::MeasurementType            MeasurementType;
  typedef typename SampleType::MeasurementVectorType      MeasurementVectorType;


  typedef typename MembershipFunctionType::Pointer   MembershipFunctionPointer;
  typedef std::vector< MembershipFunctionPointer >        MembershipFunctionVectorType;


  typedef unsigned long                               ClassLabelType;
  typedef std::vector< ClassLabelType >               ClassLabelVectorType;


  /** type of the decision rule */
  typedef DecisionRule                                DecisionRuleType;
  typedef DecisionRuleType::ConstPointer              DecisionRulePointer;

  /** Sets the input KMeans that will be classified by this filter. */
  void SetInput(const SampleType * sample);
  const SampleType *  GetInput() const;

  /** Returns the classification result */
  const MembershipSampleType * GetOutput() const;

  /** Number of classes. This must match the number of labels and membership
   * functions provided by the user, otherwise an exception will be thrown at
   */
  itkSetMacro( NumberOfClasses, unsigned int );
  itkGetConstMacro( NumberOfClasses, unsigned int );

  /** Set/Get the decision rule. */
  itkSetConstObjectMacro( DecisionRule, DecisionRuleType );
  itkGetConstObjectMacro( DecisionRule, DecisionRuleType );

  /** Sets input vector of class labels. The length of this vector must match
   * the number of classes, otherwise an exception will be thrown at run time.
   * */
  void SetClassLabels(const ClassLabelVectorType * classLabels );

  /** Sets input vector of membership functions. The length of this vector must match
   * the number of classes, otherwise an exception will be thrown at run time.
   * */
  void SetMembershipFunctions(MembershipFunctionVectorType * membershipFunctions );

  itkSetMacro( NumberOfIterations, unsigned int );
  itkGetMacro( NumberOfIterations, unsigned int );


protected:
  KMeansClassifierFilter();
  virtual ~KMeansClassifierFilter() {}
  void PrintSelf(std::ostream& os, Indent indent) const;

  KMeansClassifierFilter(const Self&); //purposely not implemented
  void operator=(const Self&); //purposely not implemented


  /** Starts the classification process */
  void GenerateData();

  /** Make a DataObject of the correct type to used as the specified
   * output. This method
   * is automatically called when DataObject::DisconnectPipeline() is
   * called.  
   * \sa ProcessObject
   */
  virtual DataObjectPointer MakeOutput(unsigned int idx);
 
private: 
  unsigned int 		 		m_NumberOfIterations; 
  unsigned int                     m_NumberOfClasses;
const	ClassLabelVectorType *m_classLabels;
	MembershipFunctionVectorType *m_membershipFunctions;
  /** Decision Rule */
  DecisionRulePointer              m_DecisionRule;

}; // end of class



#ifndef ITK_MANUAL_INSTANTIATION
#include "itkKMeansClassifierFilter.txx"
#endif

#endif
