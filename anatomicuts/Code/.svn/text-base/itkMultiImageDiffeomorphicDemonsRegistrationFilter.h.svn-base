/*=========================================================================

  Program:   Insight Segmentation & Registration Toolkit
  Module:    $RCSfile: itkDiffeomorphicDemonsRegistrationFilter.h,v $
  Language:  C++
  Date:      $Date: 2010-09-06 19:25:41 +0200 (Mon, 06 Sep 2010) $
  Version:   $Revision: 90 $

  Copyright (c) Insight Software Consortium. All rights reserved.
  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/

#ifndef __itkMultiImageDiffeomorphicDemonsRegistrationFilter_h
#define __itkMultiImageDiffeomorphicDemonsRegistrationFilter_h

#include "itkLogDomainDeformableRegistrationFilter.h"
//#include "itkPDEDeformableRegistrationFilter.h"
#include "itkMultiImageDemonsRegistrationFunction.h"
#include "itkESMDemonsRegistrationFunction.h"

#include "itkMultiplyByConstantImageFilter.h"
#include "itkExponentialDeformationFieldImageFilter2.h"
#include "itkWarpVectorImageFilter.h"
#include "itkVectorLinearInterpolateNearestNeighborExtrapolateImageFunction.h"
#include "itkAddImageFilter.h"

namespace itk {

  template<class TFixedImage, class TMovingImage, class TDeformationField>
    class ITK_EXPORT MultiImageDiffeomorphicDemonsRegistrationFilter : 
 // public PDEDeformableRegistrationFilter<TFixedImage, TMovingImage, TDeformationField>
   public LogDomainDeformableRegistrationFilter<TFixedImage,TMovingImage,TDeformationField>
  {
public:
  /** Standard class typedefs. */
  typedef MultiImageDiffeomorphicDemonsRegistrationFilter       Self;
  typedef LogDomainDeformableRegistrationFilter<TFixedImage,TMovingImage,TDeformationField>   Superclass;
/* typedef PDEDeformableRegistrationFilter<
    TFixedImage, TMovingImage,TDeformationField>      Superclass;
 */
  typedef SmartPointer<Self>                          Pointer;
  typedef SmartPointer<const Self>                    ConstPointer;

  /** Method for creation through the object factory. */
  itkNewMacro(Self);

  /** Run-time type information (and related methods). */
  itkTypeMacro( MultiImageDiffeomorphicDemonsRegistrationFilter, 
                PDEDeformableRegistrationFilter );

  /** FixedImage image type. */
  typedef typename Superclass::FixedImageType           FixedImageType;
  typedef typename Superclass::FixedImagePointer        FixedImagePointer;

  /** MovingImage image type. */
  typedef typename Superclass::MovingImageType          MovingImageType;
  typedef typename Superclass::MovingImagePointer       MovingImagePointer;
  
  /** Deformation field type. */
  typedef typename Superclass::DeformationFieldType     DeformationFieldType;
  typedef typename Superclass::DeformationFieldPointer  DeformationFieldPointer;

  /** FiniteDifferenceFunction type. */
  typedef typename 
    Superclass::FiniteDifferenceFunctionType            FiniteDifferenceFunctionType;

  /** Take timestep type from the FiniteDifferenceFunction. */
  typedef typename 
    FiniteDifferenceFunctionType::TimeStepType          TimeStepType;

  /** Image and mesh DemonsRegistrationFilterFunction type. */
  typedef MultiImageDemonsRegistrationFunction<
    FixedImageType,
    MovingImageType, DeformationFieldType>              DemonsRegistrationFunctionType;

  /** Image DemonsRegistrationFilterFunction type. */
  typedef ESMDemonsRegistrationFunction<
    FixedImageType,
    MovingImageType, DeformationFieldType>              ImageDemonsRegistrationFunctionType;
  typedef typename ImageDemonsRegistrationFunctionType::GradientType        GradientType;


  /** Get the metric value. The metric value is the mean square difference 
   * in intensity between the fixed image and transforming moving image 
   * computed over the the overlapping region between the two images. 
   * This value is calculated for the current iteration */
  virtual double GetMetric() const;
  //virtual const double &GetRMSChange() const;

  virtual void SetUseGradientType( GradientType gtype );
  virtual GradientType GetUseGradientType() const;

  /** Use a first-order approximation of the exponential.
   *  This amounts to using an update rule of the type
   *  s <- s o (Id + u) instead of s <- s o exp(u) */
  itkSetMacro( UseFirstOrderExp, bool );
  itkGetConstMacro( UseFirstOrderExp, bool );
  itkBooleanMacro( UseFirstOrderExp );

  /** Set/Get the threshold below which the absolute difference of
   * intensity yields a match. When the intensities match between a
   * moving and fixed image pixel, the update vector (for that
   * iteration) will be the zero vector. Default is 0.001. */
  virtual void SetIntensityDifferenceThreshold(double);
  virtual double GetIntensityDifferenceThreshold() const;

  /** Set/Get the maximum length in terms of pixels of
   *  the vectors in the update buffer. */
  virtual void SetMaximumUpdateStepLength(double);
  virtual double GetMaximumUpdateStepLength() const;

protected:
  MultiImageDiffeomorphicDemonsRegistrationFilter();
  ~MultiImageDiffeomorphicDemonsRegistrationFilter() {}
  void PrintSelf(std::ostream& os, Indent indent) const;

  /** Initialize the state of filter and equation before each iteration. */
  virtual void InitializeIteration();

  /** This method allocates storage in m_UpdateBuffer.  It is called from
   * FiniteDifferenceFilter::GenerateData(). */
  virtual void AllocateUpdateBuffer();

  /** Apply update. */
  virtual void ApplyUpdate(TimeStepType dt);

private:
  MultiImageDiffeomorphicDemonsRegistrationFilter(const Self&); //purposely not implemented
  void operator=(const Self&); //purposely not implemented

  /** Downcast the DifferenceFunction using a dynamic_cast to ensure that it is of the correct type.
   * this method will throw an exception if the function is not of the expected type. */
  DemonsRegistrationFunctionType *  DownCastDifferenceFunctionType();
  const DemonsRegistrationFunctionType *  DownCastDifferenceFunctionType() const;


  /** Exp and composition typedefs */
  typedef MultiplyByConstantImageFilter<
    DeformationFieldType, 
    TimeStepType, DeformationFieldType >                MultiplyByConstantType;

  typedef ExponentialDeformationFieldImageFilter< 
    DeformationFieldType, DeformationFieldType >        FieldExponentiatorType;

  
  typedef WarpVectorImageFilter<
     DeformationFieldType, 
     DeformationFieldType, DeformationFieldType>        VectorWarperType;

  typedef VectorLinearInterpolateNearestNeighborExtrapolateImageFunction<
     DeformationFieldType, double>                      FieldInterpolatorType;

  typedef AddImageFilter<
     DeformationFieldType, 
     DeformationFieldType, DeformationFieldType>        AdderType;


  typedef typename MultiplyByConstantType::Pointer      MultiplyByConstantPointer;
  typedef typename FieldExponentiatorType::Pointer      FieldExponentiatorPointer;
  typedef typename VectorWarperType::Pointer            VectorWarperPointer; 
  typedef typename FieldInterpolatorType::Pointer       FieldInterpolatorPointer;
  typedef typename FieldInterpolatorType::OutputType    FieldInterpolatorOutputType;
  typedef typename AdderType::Pointer                   AdderPointer;


  MultiplyByConstantPointer m_Multiplier;
  FieldExponentiatorPointer m_Exponentiator;
  VectorWarperPointer       m_Warper;
  AdderPointer              m_Adder;
  bool                      m_UseFirstOrderExp;

  typename ImageDemonsRegistrationFunctionType::Pointer m_ImageDemonsRegistrationFunction1;
  typename ImageDemonsRegistrationFunctionType::Pointer m_ImageDemonsRegistrationFunction2;
  
};


} // end namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkMultiImageDiffeomorphicDemonsRegistrationFilter.txx"
#endif

#endif
