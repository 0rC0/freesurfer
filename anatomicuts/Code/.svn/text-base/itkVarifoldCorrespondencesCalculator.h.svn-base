#ifndef _itk_VarifoldMeshCorrespondencesCalculator_h
#define _itk_VarifoldMeshCorrespondencesCalculator_h
#include "itkKdTree.h"
#include "itkKdTreeGenerator.h"
#include "itkListSample.h"
#include "itkMeshCorrespondencesCalculatorBase.h"
#include "itkAffineTransform.h"
#include <vector>
namespace itk
{
  
  template < class TFixedMesh, class TMovingMesh >
    class VarifoldMeshCorrespondencesCalculator :
  public MeshCorrespondencesCalculatorBase < TFixedMesh, TMovingMesh >
  {
  public:
    typedef VarifoldMeshCorrespondencesCalculator       Self;
    typedef MeshCorrespondencesCalculatorBase
      < TFixedMesh, TMovingMesh >                           Superclass;
    typedef SmartPointer<Self>                              Pointer;
    typedef SmartPointer<const Self>                        ConstPointer;

    itkNewMacro  (Self);
    itkTypeMacro (VarifoldMeshCorrespondencesCalculator, MeshCorrespondencesCalculatorBase);
    

    typedef typename Superclass::FixedMeshType    FixedMeshType;
    typedef typename Superclass::FixedMeshTraits  FixedMeshTraits;
    typedef typename Superclass::FixedPointType   FixedPointType;
    typedef typename Superclass::FixedPixelType   FixedPixelType;
    typedef typename Superclass::FixedVectorType  FixedVectorType;
    typedef typename FixedMeshType::PixelType  ScalarType;


    typedef typename Superclass::MovingMeshType    MovingMeshType;
    typedef typename Superclass::MovingMeshTraits  MovingMeshTraits;
    typedef typename Superclass::MovingPointType   MovingPointType;
    typedef typename Superclass::MovingPixelType   MovingPixelType;
    typedef typename Superclass::MovingVectorType  MovingVectorType;


    /** Some convenient typedefs. */
    typedef typename Superclass::FixedMeshPointer      FixedMeshPointer;
    typedef typename Superclass::FixedCellTraits       FixedCellTraits;
    typedef typename Superclass::FixedCellIdentifier   FixedCellIdentifier;
    typedef typename Superclass::FixedCellType         FixedCellType;
    typedef typename Superclass::FixedCellAutoPointer  FixedCellAutoPointer;
    typedef typename Superclass::FixedPointIdentifier  FixedPointIdentifier;
    typedef typename Superclass::FixedPointIdIterator  FixedPointIdIterator;


    typedef typename Superclass::MovingMeshPointer       MovingMeshPointer;
    typedef typename Superclass::MovingCellTraits        MovingCellTraits;
    typedef typename Superclass::MovingCellIdentifier    MovingCellIdentifier;
    typedef typename Superclass::MovingCellType          MovingCellType;
    typedef typename Superclass::MovingCellAutoPointer   MovingCellAutoPointer;
    typedef typename Superclass::MovingPointIdentifier   MovingPointIdentifier;
    typedef typename Superclass::MovingPointIdIterator   MovingPointIdIterator;

    // K-d tree typedefs
    typedef PointValue< float, itk::Vector<float,3>, 3 >                          MeasurementPointType;
    typedef Statistics::ListSample< MeasurementPointType > SampleType;
    typedef SampleType::Pointer SamplePointer;
    typedef Statistics::KdTreeGenerator< SampleType >       TreeGeneratorType;
    typedef typename TreeGeneratorType::KdTreeType          TreeType;
    typedef typename TreeType::Pointer 			    TreeTypePointer;
    typedef typename TreeType::NearestNeighbors             NeighborsType;
    typedef typename TreeType::KdTreeNodeType               NodeType;
    typedef Statistics::EuclideanDistanceMetric< MeasurementPointType > DistanceMetricType;
    typedef itk::AffineTransform<double,3>                  AffineTransformType;
    typedef typename AffineTransformType::Pointer                    AffineTransformPointerType ;

typedef  itk::Vector<ScalarType> VecType;
typedef std::vector<VecType> ListOfPoints;	
    virtual void Evaluate (void);
    virtual double Distance (void);
    virtual void RecalculateSigma(double);
    
    //This should be set in he sample meassure as the points (cm, mm) 
    //virtual void SetUpsamplingPointsNumber(unsigned int n){this->upsamplingPointsNumber= n;}
    virtual void SetFixedMesh(FixedMeshType* p);
    virtual void SetMovingMesh(MovingMeshType* p);
    virtual double GetSigma(){ return Superclass::GetSigma();}// *this->GetSpacing();}
  protected:
    VarifoldMeshCorrespondencesCalculator();
    ~VarifoldMeshCorrespondencesCalculator() {}
    
  private:
    TreeTypePointer m_FixedTree; 
    TreeTypePointer m_MovingTree;
	SamplePointer m_FixedSample;
	SamplePointer m_MovingSample;

//    ListOfPoints fPoints;
//    ListOfPoints mPoints;	
//    ListOfPoints fVectors; 
//    ListOfPoints mVectors; 
    VarifoldMeshCorrespondencesCalculator (const Self&);
    void operator=(const Self&);   
    double lastMetric;
    //unsigned int upsamplingPointsNumber;
 
  };  
}

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkVarifoldCorrespondencesCalculator.txx"
#endif

#endif

