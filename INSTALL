Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004 Free
Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

These are generic installation instructions WITH SOME ADDITIONS AT THE
BOTTOM. Please see the section at the end of this file for additional
information pertinent to FreeSurfer.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PREFIX'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PREFIX', the package will
use PREFIX as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

'configure' troubleshooting
===========================
To recreate the files that configure uses as input, run the following:

  rm -rf autom4te.cache
  aclocal
  libtoolize --force
  autoreconf --force

This may fix strange platform specific errors that may appear when running
the default configure script.

FreeSurfer Specific Options
===========================

There are a few non-standard options you may need to pass to configure
to let it find where some libraries are installed. Freesurfer builds
against the following set of open-sourced libraries, thus, these must
be installed prior to building:

      VXL
      JPEG
      TIFF
      Tcl (8.4 recommended)
      Tk (8.4 recommended)
      Tix (8.4 recommended)
      BLT (2.4 recommended)
      GLut

Most modern Linux installations probably have most of these libraries
installed already. 

If you have these packages installed in a nonstandard place, you may
need to speicfy the installation location. All these libraries have a
--with-XXX-dir option to specify this. Run ./configure --help to see
this list. Additionally, there is a --with-tixwish option to specify a
non-standard location of the binary tixwish. This has been found to be
necessary on some OS X machines.

Freesurfer also builds against certain packages of the MINC toolkit.

You can also download the latest source release from the MINC
website. As of 10/21/2005, the current release is 1.4 and it works
fine with FreeSurfer.

Alternatively, a special bundle of the source code for the packages
required by Freesurfer has been assembled at MGH and is available from
the download site:

  http://surfer.nmr.mgh.harvard.edu/pub/dist/fs_supportlibs/src

Look for mni.srcbuild.tar.gz, and mni.srcbuild.README.txt describes
the build process.  Also look for tcltktixblt.tar.gz, vxl-1.4.tar.gz
and tiffjpegglut.tar.gz (necessary for the Mac OS).  Each contains a 
build script (VXL requires cmake), handling the idiosyncracies of making 
each library work with Freesurfer.

Normally, the MINC toolkit is installed into /usr/local/mni, although
your site may have a different system of sharing
installations. Regardless, you will probably need to specify where the
installation is with the --with-mni-dir option. This should be the
directory that contains the include, lib, bin, and other
directories. So for the default /usr/local/mni installation, it would
just be:

  --with-mni-dir=/usr/local/mni

A typical configure command, assuming that the necessary 3rd-party
packages have been installed in a directory called /usr/pubsw/packages,
would be:

  ./configure --prefix=/usr/local/freesurfer \
    --with-mni-dir=/usr/pubsw/packages/mni/current \
    --with-vxl-dir=/usr/pubsw/packages/vxl/current \
    --with-tcl-dir=/usr/pubsw/packages/tcltktixblt/current \
    --with-tixwish=/usr/pubsw/packages/tcltktixblt/current/bin/tixwish8.1.8.4 

Please note that currently we have limited support for users trying to
compile their own source code. If you are running into trouble, please
make sure you are familiar with how autoconf installations are
supposed to work in general. Also see the wiki for notes on compiling,
although it is mainly written for in-house developers:

  http://surfer.nmr.mgh.harvard.edu/fswiki/DevelopersGuide

We welcome all helpful contributions to our documentation, so please
feel free to make suggestions.

Good luck!
