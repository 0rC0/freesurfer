-- -*- lua -*-


require "io"
require "os"
require( "tools.freesurfer" )

-- Make access to the FreeSurfer module quicker
local FS = tools.freesurfer

-- List of input MRI data
local inputFiles = { 'uchar-256-256-256.mgz', 'uchar-37-71-137.mgz',
		     'short-256-256-256.mgz', 'short-37-71-137.mgz',
		     'float-256-256-256.mgz', 'float-37-71-137.mgz', }
-- Kernel sizes to use
local kernels = { 4, 15, 22 }
-- Directions, as specified in mri.h
local directions = { x=1, y=0, z=2 }


-- Generate a test name from the filename, kernel size and convolution direction
local function testName( input, size, direction )
   local inputItems = FS.split( input, "-" )

   return inputItems[1].."-"..inputItems[2].."-"..size.."-"..direction
end


-- Generates one test configuration for each input, kernel size and convolution direction
local function testGen( inputs, sizes, directions, tol )
   local testTable = {}

   for i,input in ipairs(inputs) do
      for s,size in ipairs(sizes) do
	 for dirName,dirVal in pairs(directions) do
	    local tName = testName( input, size, dirName )
	    table.insert( testTable, { id=tName, tol=tol, input=input, kernel=size, direction=dirVal } )
	 end
      end
   end

   return testTable
end



-- Table required by tm itself
testdescript = {

   -- Lengthier description of the test
   description = [[
	 A set of tests for the 1D convolutions
   ]],

   -- Keywords (for subtest selection)
   keywords = { "convolution", "basic", "mri" },

   -- Designate the test as active
   active = 0,

   -- The test name
   testName = "1D_Convolution_Test",

   -- The script to run the test case
   runScript = [[
	 export MAINCMDS=" --input=$(projectDir)/inputs/$(input) --kernelSize=$(kernel) --direction=$(direction) --repeats=1"
	 export CPUOUT="$(outputDir)/$(id).cpu.mgz"
	 export GPUOUT="$(outputDir)/$(id).gpu.mgz"

	 echo $MAINCMDS

	 conv1d_test $MAINCMDS \--output=$CPUOUT
	 conv1d_test_cuda $MAINCMDS \--output=$GPUOUT

	 $(projectDir)/tools/mridiff.pl \--results=$(cmdResultFn) \
	                                \--gold=$CPUOUT \
                                        \--test=$GPUOUT \
                                        \--threshold=$(tol)
	 testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],

   -- The list of tests to run
   tests = testGen( inputFiles, kernels, directions, 1e0 )
}