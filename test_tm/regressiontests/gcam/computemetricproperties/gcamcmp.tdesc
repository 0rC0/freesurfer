-- -*- lua -*-

require "io"
require "os"

local function GetFiles( srcDir, pattern )
   local lsPipe = io.popen( "ls "..srcDir )

   local fileList = {}

   local currFile
   for currFile in lsPipe:lines() do
      local trimName
      for trimName in currFile:gmatch( pattern ) do
	 table.insert( fileList, trimName )
      end
   end

   return fileList
end


local inputFiles = GetFiles( os.getenv( "SCRATCHDIR" ), "(gcam%d+).nc" )


-- Generate a table of subtests
local function testGen( inputs )
   local testTable = {}

   for i,input in ipairs(inputs) do
      table.insert( testTable, { id=input, input=input } )
   end

   return testTable
end


-- Table required by tm itself
testdescript = {

   -- Lengthier description of the test
   description = [[
	 Testing of gcamComputeMetricProperties
   ]],

   -- Keywords (for subtest selection)
   keywords = { "gcam", "basic" },

   -- Designate the test as active
   active = 1,

   -- The test name
   testName = "GCAM_CMP_Test",

   -- The script to run the test case
   runScript = [[
	 export INPUT="$(SCRATCHDIR)/$(input)"
	 export CPUOUT="$(outputDir)/$(id).cpu"
	 export GPUOUT="$(outputDir)/$(id).gpu"

	 echo $INPUT

	 gcam_cmp_test \--input=$INPUT \--output=$CPUOUT
	 gcam_cmp_test_cuda \--input=$INPUT \--output=$GPUOUT

	 $(projectDir)/bin/gcamMultiDiff.pl \--results=$(cmdResultFn) \
	                                    \--gold="$CPUOUT.nc" \
                                            \--cmp="$GPUOUT.nc" \
                                            \--config=$(testDir)/cmp.config
	 testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],

   -- The list of tests to run
   tests = testGen( inputFiles )
}
