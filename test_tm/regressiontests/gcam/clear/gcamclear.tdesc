-- -*- lua -*-

local inputFiles = { 'gcam00000', 'gcam00001', 'gcam00004',
		     'gcam00008', 'gcam00011', 'gcam00012' }



-- Generate a table of subtests
local function testGen( inputs )
   local testTable = {}

   for i,input in ipairs(inputs) do
      table.insert( testTable, { id=input, input=input } )
   end

   return testTable
end


-- Table required by tm itself
testdescript = {

   -- Lengthier description of the test
   description = [[
	 Testing of gcamClearGradient and gcamClearMomentum
   ]],

   -- Keywords (for subtest selection)
   keywords = { "gcam" },

   -- Designate the test as active
   active = 1,

   -- The test name
   testName = "GCAM_Clear_Test",

   -- The script to run the test case
   runScript = [[
	 export INPUT="/space/freesurfer/test/gcam_test_data/$(input)"
	 export CPUOUT="$(outputDir)/$(id).cpu"
	 export GPUOUT="$(outputDir)/$(id).gpu"

	 echo $INPUT

	 # -- Have to generate some non-zero inputs in odx etc.
	 gcam_applygradient_test \--input=$INPUT \--output=$(outputDir)/nonzero

	 gcam_clear_test \--input=$(outputDir)/nonzero \--output=$CPUOUT
	 gcam_clear_test_cuda \--input=$(outputDir)/nonzero \--output=$GPUOUT

	 $(projectDir)/bin/gcamMultiDiff.pl \--results=$(cmdResultFn) \
	                                    \--gold="$CPUOUT.nc" \
                                            \--cmp="$GPUOUT.nc" \
                                            \--config=$(testDir)/clear.config
	 testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],

   -- The list of tests to run
   tests = testGen( inputFiles )
}
