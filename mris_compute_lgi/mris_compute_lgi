#! /bin/tcsh -ef

#
# mris_compute_lgi
#
# Computes local measurements of gyrification at points over cortical surface
#
# --help option will show usage
#
# Original Author: Marie Schaer and Nick Schmansky
# CVS Revision Info:
#    $Author: nicks $
#    $Date: 2007/11/15 20:56:49 $
#    $Revision: 1.4 $
#
# Copyright (C) 2007,
# The General Hospital Corporation (Boston, MA).
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#

set VERSION = '$Id: mris_compute_lgi,v 1.4 2007/11/15 20:56:49 nicks Exp $'
set PrintHelp = 0;
set RunIt = 1;
set cmdargs = ($argv);
set tmpdir = tmp-mris_compute_lgi
#set echo=1

if($#argv == 0) then
  # zero args is not allowed
  goto usage_exit;
endif

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

# begin...
#---------

# temporary work files go here...
set cmd=(rm -Rf $tmpdir)
echo "=================\n$cmd\n================="
if ($RunIt) $cmd
set cmd=(mkdir -p $tmpdir)
echo "=================\n$cmd\n================="
if ($RunIt) $cmd


# create a filled-volume from the input surface file...
set cmd=(mris_fill -c -r 1 ${input} ${tmpdir}/${input}.filled.mgz)
echo "=================\n$cmd\n================="
#if ($RunIt) $cmd


# create the outer surface from the filled volume
set MLF = /tmp/mos"_$$_".m
set arg1 = ${tmpdir}/${input}.filled.mgz
set arg2 = 15
set arg3 = ${tmpdir}/${input}-outer
echo "make_outer_surface('${arg1}',${arg2},'${arg3}')" > $MLF
echo "=================\n`cat $MLF`\n================="
#if ($RunIt) cat $MLF | matlab -display iconic -nojvm -nosplash 


# smooth this jaggy, tessellated surface
set cmd=(mris_smooth -nw -n 3 \
    ${tmpdir}/${input}-outer \
    ${tmpdir}/${input}-outer-smoothed)
echo "=================\n$cmd\n================="
#if ($RunIt) $cmd


# create ROI center files
set MLF = /tmp/mrc"_$$_".m
set arg1 = ${input}
set arg2 = ${tmpdir}/${input}-outer-smoothed
set arg3 = ${tmpdir}
echo "find_corresponding_center_FSformat('${arg1}','${arg2}','${arg3}')" \
  > $MLF
echo "=================\n`cat $MLF`\n================="
if ($RunIt) cat $MLF | matlab -display iconic -nojvm -nosplash 


# create ROI path files


# create ROI label files


# finally, compute lGI measurements
set cmd=(compute_lgi)
echo "=================\n$cmd\n================="
if ($RunIt) $cmd


#--------
# end...
#rm -Rf $tmpdir
echo "done."
exit 0



#----------------------------------------------------------#
############--------------##################
parse_args:
set cmdline = ($argv);

while( $#argv != 0 )

  set flag = $argv[1]; shift;

  switch($flag)

    case "--help":
      set PrintHelp = 1;
      goto usage_exit;
      exit 0;
      breaksw

    case "--version":
      echo $VERSION
      exit 0;
      breaksw

    case "-i":
    case "--i":
    case "--input":
      if ( $#argv == 0) goto arg1err;
      set input = $argv[1]; shift;
      #echo ${input}
      breaksw

    case "-o":
    case "--o":
    case "--output":
      if ( $#argv == 0) goto arg1err;
      set output = $argv[1]; shift;
      #echo $output
      breaksw

   case "--debug":
   case "--echo":
      set echo = 1;
      set verbose = 1
      breaksw

    default:
      breaksw

  endsw

end
goto parse_args_return;
############--------------##################



############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################



############--------------##################
check_params:
  if(! $?FREESURFER_HOME ) then
    echo "ERROR: environment variable FREESURFER_HOME not set."
    exit 1;
  endif
  if(! -e $FREESURFER_HOME ) then
    echo "ERROR: FREESURFER_HOME $FREESURFER_HOME does not exist."
    exit 1;
  endif
  if(! $?input) then
    echo "ERROR: missing input filename!  See  mris_compute_lgi --help"
    exit 1;
  endif
  if(! $?output) then
    echo "ERROR: missing output filename!  See  mris_compute_lgi --help"
    exit 1;
  endif
  if(! -e ${input} ) then
    echo "ERROR: input file '${input}' does not exist."
    exit 1;
  endif
goto check_params_return;
############--------------##################



############--------------##################
usage_exit:
  echo ""
  echo "USAGE: mris_compute_lgi --i <input surface> --o <lgi surface data>"
  echo ""
  echo "Required Arguments"
  echo "   --i       : input surface file, typically ?h.pial"
  echo "   --o       : name of output scalar file, typically ?h.lgi_pial"
  echo ""
  echo "Optional Arguments"
  echo "   --sdir <SUBJECTS_DIR to use instead of the one in the env>"
  echo "   --sd      : same as --sdir"
  echo ""
  echo "   --help    : short descriptive help"
  echo "   --version : script version info"
  echo "   --echo    : enable command echo, for debug"
  echo "   --debug   : same as --echo"
  echo ""

  if(! $PrintHelp) exit 1;

  echo Version: $VERSION

  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'

exit 1;


#---- Everything below here is printed out as part of help -----#
BEGINHELP

Computes local measurements of gyrification at thousands of points over the 
entire cortical surface using the method described in:

"A Surface-based Approach to Quantify Local Cortical Gyrification",
Schaer M. et al., IEEE Transactions on Medical Imaging, 2007, TMI-2007-0180

Input is a pial surface mesh, and the output a scalar data file containing
the local gyrification index data at each vertices.

EXAMPLES

Example 1:

  mris_compute_lgi --i lh.pial --o lh.lgi_pial

See also http://surfer.nmr.mgh.harvard.edu/fswiki/LGI
