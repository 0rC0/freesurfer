Simply put, scuba is a big program that does a lot of stuff. I tried
to design it more as a platform that can be extended as cleanly as
possible, but time constraints often made that difficult, so it can be
messy at times.

This document will attempt to give a high-level view of the different
classes and how they fit together. There's a lot of documentation in
the comments of the headers and code. I've recently gone back and
tried to modernize the base classes where possible, so hopefully most
of the fundamental stuff is up to date, but there are few classes
which are just big and messy. Specifically, I tried to make a lot of
the base classes const-correct, which should not only clarify their
intent but hopefully provide some good design-level error
checking. However, not all code has this undergone this attempt.

If I don't mention a class (like Array2, Point2, etc) I consider it
simple and fundamental enough that it should speak for itself. I'll
stick to the more high level stuff. Again, be sure to read the
comments in the code if you get stuck.

You'll see some references to Qt and GLUT support. This is from when
both versions existed; they are no longer supported. scuba uses Togl
for its basic windowing and event handling, which gives us basic
tcl/tk for our GUI. There is no more support for Qt.

scuba.cpp creates a bunch of factories which register Tcl commands. It
also instantiates the ToglManager and makes the window factory. Then
we source the scuba.tcl file, which at some point makes a togl
object. This calls our ToglManager::CreateCallback, which creates a
WindowFrame.

The ToglManager interacts with a WindowFrame is subclassed by
ScubaFrame, which contains Views. The View is subclassed by ScubaView,
which contains Layers. The Layer is subclassed by ScubaLayer2DMRI and
ScubaLayer2DMRIS, which do the actual drawing and UI handling of
volumes and surfaces.

So by creating the togl object we actually create a ScubaFrame, and go
from there. The scuba.tcl file handles the rest of the UI stuff like
menubars, toolbars, the label area, etc.




Layers can draw into a buffer context or a GL context. The buffer is
used by the 2DMRI display to draw volume voxel contents. The GL
context is used by the 2DMRIS display to draw surface intersection
lines. Basically, anything that is a voxel is drawn into the buffer,
and anything that is drawn with OpenGL line-drawing commands is drawn
into the GL context. The GL context also sits 'above' the buffer in
that the buffer is drawn first, and then the GL commands.
