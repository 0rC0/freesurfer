---====--- PLAN

featureset 1

- X/GL window embedded in tcl/tk frame
- multiple volume loading
- window supports multiple viewpane configs
- viewing pane supports 
  - multiple orientations
   - overlays of loaded volumes
   - grayscale or LUT
- output shows values and coordinate systems
- volume editing
- selection
- control points


components:

TCLCommandManager
 - AddListener( RespondToCommandFunc )
 - AddCommand( commandName, arguments.. )
 - SendCommand( commandName, arguments... )
 - keeps list of commands
 - registers single processing function with TCL
 - on called, compare command name with stored list, then lookup listeners to that command and broadcast to them
 - typdef (void)(RespondToCommandFunc)( commandName, arguments... )

DataManager
 - LoadVolume( name );
 - LoadSurface( name );
 - void ReleaseVolume( MRI* );
 - void ReleaseSurface( MRIS* );
 - loads data and keeps track of it
   - if another layer request the data, will just hand them the pointer
   - does reference counting

PreferencesManager
 - UseFile ( fname )
   - look in ./fname, ~/fname etc
 - RegisterPref{Int,Float,String}( keyName, description, defaultValue )
   - if not found, writes entry in prefs file with description in comments and default value
 - {Set,Get}PrefAs{Int,Float,String}( keyName )
   - set or return value from prefs file

DataCollection
 - static DataCollection* GetDataCollection( CollectionID );
 - Unload()
 - holds a central data type and then associated data
 - GetInfoAtRAS( iX,iY,iZ, oasLabels, oasValues )

VolumeDataCollection : DataCollection
 - MRI*
 - selection list
 - transform stuff

SurfaceDataCollection : DataCollection
 - MRIS*
 - selection list
 - scalars

DataCollectionFactory
 - static CollectionID NewDataCollection( iType );

ToglManager
 - all togl stuff
 - passes to a Frame
 - Tcl: Click(iX,iY), MouseMoved(iX,iY)

Frame:
 - 1..n views
 - manages configuration, passing clicks along, key events, to proper view
 - other objects can register for idle events
 - tool modes
 - GetInfoAtWindowLocation( iX,iY, ocPairs, oasLabels, oasValues )

View
 - manages 1..n layers
 - manages clicks, polling data, sending updates to tcl
 - tells layers to draw into proper GL area
 - orientation : 2D: plane, zoom, view center, tp, condition
                 3D: camera location, look, up
 - knows RAS coordinate space , converts window<->RAS
 - GetInfoAtWindowLocation( iX,iY, ocPairs, oasLabels, oasValues )
 - link information: type, which views are linked
 - SetView()
 - SetMarker()
 - SetLayers( iczLayers, iaLayerIDs ) 
 - one view is selected
   - SelectThisView() - calls UnselectThisView() on all other vies
   - UnselectThisView()

Layer
 - static Layer& GetLayer( LayerID );
 - static GetLayerIDList( oczLayers, oaLayerIDs )
 - Layer ( collectionID )
 - GetInfoAtRAS( iX,iY,iZ ocPairs, oasLabels, oasValues )
 - drawing attributes:
   - opactiy
   - drawing level : 0 for base, 1 for overlay, or user-settable
   - modes supported : 2D, 3D, graph, etc,
   - transform : transform for this layer
 - subclasses
   - contruction checks if collection type is appropriate for this layer
   - 2DMRI( VolumeDataCollection )
     - draws slices
     - color scale : gray, color, or LUT
     - LUT file
     - sample type : nearest, trilinear, sinc
   - 2DMRIS( SurfaceDataCollection )
     - does intersections
     - scalar files, color scale for each
     - interpolation type
   - 3DMRIS( SurfaceDataCollection )
     - draws mesh
     - scalar files, color scale for each
   - Graph( VolumeDataCollection )
     - current time point, condition

LayerFactory
 - static LayerID NewLayer( iType );


on redraw:
ToglFrame
  - for each view, view->Draw( this->Mode )
View::Draw( iMode )
  - for each drawing level 0..n
    - for each layer in this level
      - layer->DrawIntoView( this->ViewInfo, this->Mode, this->Orientation )
Layer::DrawIntoView
  - 2DMRI
    - find bounds in volume from view bounds
    - for each voxel
      - get value -> color, apply color scale etc
      - apply with opacity to existing buffer (from ViewInfo)
  - 2DMRIS
    - do intersection to find draw list
    - apply color to vertex etc




volume loading
 - Menu command: Load Volume...
 - Tk dlog box for loading volume
     - Volume FN, optional label
     - checkbox for Automatically Create Layer, with optional transform FN

     collectionID NewVolumeDataCollection <volume_fn> <label>
     if bCreateLayer
       set layerID [New2DMRILayer collectionID]
       if bTransform       
         SetLayerTransform layerID <fnTransform>

- layer info manager
 - use [GetLayerIDList] to get list of layers
 - scrolling list of panels, for each layer
   set type [GetLayerType layerID]
   switch type {
     make widgets for layer info and settings
   }

- view info manager
 - for each view, list of possible layers, can add remove and reorder

- info update
 - tk send mouse location to ToglManager
   - frame->MouseMoved
     - view->MouseMoved
       - view transforms to 3/5D point, calls on layer->MouseMoved
         - polls DataCollection for info
	 - calls update functions via TclCommandManager

- linked cursors
 - tk pass clicks to ToglManager
   - passes to Frame, interprets tool and calls tool function
     - View gets SetView()
       - if View is linked, goes through static list of linked Views and calls SetCursor()


  for static tcl responders: 
    first time layer or view is created, 
      if (bTclFunctionsNotRegistered)
        RegisterTclFunctions()

Layer:
  GetLayerIDList 
    returns a list of layer IDs
  GetLayerType <ID>
    returns a text string {2DMRI,2DMRIS,etc}
  GetLayerOpacity <ID>
    Layer& layer = GetLayer(ID);
    return layer.GetOpacity();
  SetLayerOpacity <ID> <opacity>
    Layer& layer = GetLayer(ID);
    layer.SetOpacity(opacity);

Frame:
  SetFrameViewConfiguration <frameID> <configuration>
  GetViewIDFromFrameRowCol <frameID> <row> <col>   -- returns View::ID
  GetSelectedViewID <frameID>    --- returns View::ID

View:
  SetViewOrientation <ID> <orientation>
  SetViewZoomLevel <ID> <zoomLevel>
  SetViewInPlane <ID> <plane>
  SetViewCenter <ID> <X> <Y> <Z>
  SetViewLinkFlag <ID> <linkFlag>


  NewVolumeDataCollection <filename>
    creates VolumeCollection(filename)
    returns collection ID
  New2DMRILayer <collectionID>
    creates 2DMRILayer(collectionID)
    returns layer ID
  


all classes
Class::ID is auto-incrementing and autosetting
Class() gets next ID, sets, and adds to list
static map<ID,Class*> keeps track of Classes
Class* GetByID( Class::ID ) for external use

  Class::Class() {
    mID = GetNextID();
    mIDMap[mID] = this;
  }
  Class::~Class() {
    mIDMap[mID] = NULL;
  }

  ID mID;
  static ID mNextID;
  static ID GetNextID () { return mNextID++; }
  ID GetID() const  { return mID; }

  static Class& GetClass( ID const iID );
  typedef std::map<Class::ID,Class*> ClassIDMap;
  static ClassIDMap mIDMap;

  Class& 
  Class::GetClass( ID const iID ) {

    Class* obj = mIDMap[iID];
    if( NULL == obj ) {
      DebugOutputStatic( << "GetDataCollection ID=" << iID << " was null" );
      throw domain_error( "ID no longer valid" );
    }
  
    return *obj;
  }

string GetLabel()
void SetLabel(string)

  ID GetID() const { return mID; }
  std::string GetLabel() const { return msLabel; }
  void SetLabel( std::string const isLabel ) { msLabel = isLabel; }



ToglFrame - doesn't automatically set ID because this is set by the togl stuff
FrameView
ViewLayer
