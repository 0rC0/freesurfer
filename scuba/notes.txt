 x]---====--- PLAN

featureset 1

- X/GL window embedded in tcl/tk frame
- multiple volume loading
- window supports multiple viewpane configs
- viewing pane supports 
  - multiple orientations
   - overlays of loaded volumes
   - grayscale or LUT
- output shows values and coordinate systems
- volume editing
- selection
- control points


components:

TCLCommandManager
 - AddListener( RespondToCommandFunc )
 - AddCommand( commandName, arguments.. )
 - SendCommand( commandName, arguments... )
 - keeps list of commands
 - registers single processing function with TCL
 - on called, compare command name with stored list, then lookup listeners to that command and broadcast to them
 - typdef (void)(RespondToCommandFunc)( commandName, arguments... )

DataManager
 - LoadVolume( name );
 - LoadSurface( name );
 - void ReleaseVolume( MRI* );
 - void ReleaseSurface( MRIS* );
 - loads data and keeps track of it
   - if another layer request the data, will just hand them the pointer
   - does reference counting

PreferencesManager
 - UseFile ( fname )
   - look in ./fname, ~/fname etc
 - RegisterPref{Int,Float,String}( keyName, description, defaultValue )
   - if not found, writes entry in prefs file with description in comments and default value
 - {Set,Get}PrefAs{Int,Float,String}( keyName )
   - set or return value from prefs file

DataCollection
 - static DataCollection* GetDataCollection( CollectionID );
 - Unload()
 - holds a central data type and then associated data
 - GetInfoAtRAS( iX,iY,iZ, oasLabels, oasValues )

VolumeDataCollection : DataCollection
 - MRI*
 - selection list
 - transform stuff

SurfaceDataCollection : DataCollection
 - MRIS*
 - selection list
 - scalars

DataCollectionFactory
 - static CollectionID NewDataCollection( iType );

ToglManager
 - all togl stuff
 - passes to a Frame
 - Tcl: Click(iX,iY), MouseMoved(iX,iY)

Frame:
 - 1..n views
 - manages configuration, passing clicks along, key events, to proper view
 - other objects can register for idle events
 - tool modes
 - GetInfoAtWindowLocation( iX,iY, ocPairs, oasLabels, oasValues )
 - one view is selected
   - SelectThisView() - calls UnselectThisView() on all other vies
   - UnselectThisView()

View
 - manages 1..n layers
 - manages clicks, polling data, sending updates to tcl
 - tells layers to draw into proper GL area
 - orientation : 2D: plane, zoom, view center, tp, condition
                 3D: camera location, look, up
 - knows RAS coordinate space , converts window<->RAS
 - GetInfoAtWindowLocation( iX,iY, ocPairs, oasLabels, oasValues )
 - link information: type, which views are linked
 - SetView()
 - SetMarker()
 - SetLayers( iczLayers, iaLayerIDs ) 

Layer
 - static Layer& GetLayer( LayerID );
 - static GetLayerIDList( oczLayers, oaLayerIDs )
 - Layer ( collectionID )
 - GetInfoAtRAS( iX,iY,iZ ocPairs, oasLabels, oasValues )
  - drawing attributes:
   - opactiy
   - drawing level : 0 for base, 1 for overlay, or user-settable
   - modes supported : 2D, 3D, graph, etc,
   - transform : transform for this layer
 - subclasses
   - contruction checks if collection type is appropriate for this layer
   - 2DMRI( VolumeDataCollection )
     - draws slices
     - color scale : gray, color, or LUT
     - LUT file
     - sample type : nearest, trilinear, sinc
   - 2DMRIS( SurfaceDataCollection )
     - does intersections
     - scalar files, color scale for each
     - interpolation type
   - 3DMRIS( SurfaceDataCollection )
     - draws mesh
     - scalar files, color scale for each
   - Graph( VolumeDataCollection )
     - current time point, condition

LayerFactory
 - static LayerID NewLayer( iType );


on redraw:
ToglFrame
  - for each view, view->Draw( this->Mode )
View::Draw( iMode )
  - for each drawing level 0..n
    - for each layer in this level
      - layer->DrawIntoView( this->ViewInfo, this->Mode, this->Orientation )
Layer::DrawIntoView
  - 2DMRI
    - find bounds in volume from view bounds
    - for each voxel
      - get value -> color, apply color scale etc
      - apply with opacity to existing buffer (from ViewInfo)
  - 2DMRIS
    - do intersection to find draw list
    - apply color to vertex etc




volume loading
 - Menu command: Load Volume...
 - Tk dlog box for loading volume
     - Volume FN, optional label
     - checkbox for Automatically Create Layer, with optional transform FN

     collectionID NewVolumeDataCollection <volume_fn> <label>
     if bCreateLayer
       set layerID [New2DMRILayer collectionID]
       if bTransform       
         SetLayerTransform layerID <fnTransform>

- layer info manager
 - use [GetLayerIDList] to get list of layers
 - scrolling list of panels, for each layer
   set type [GetLayerType layerID]
   switch type {
     make widgets for layer info and settings
   }

- view info manager
 - for each view, list of possible layers, can add remove and reorder

- info update
 - tk send mouse location to ToglManager
   - frame->MouseMoved
     - view->MouseMoved
       - view transforms to 3/5D point, calls on layer->MouseMoved
         - polls DataCollection for info
	 - calls update functions via TclCommandManager

- linked cursors
 - tk pass clicks to ToglManager
   - passes to Frame, interprets tool and calls tool function
     - View gets SetView()
       - if View is linked, goes through static list of linked Views and calls SetCursor()


  for static tcl responders: 
    first time layer or view is created, 
      if (bTclFunctionsNotRegistered)
        RegisterTclFunctions()

Layer:
  GetLayerIDList     --- returns a list of layer IDs
  GetLayerType <layerID>     --- returns a text string {2DMRI,2DMRIS,etc}
  GetLayerOpacity <layerID>
  SetLayerOpacity <layerID> <opacity>

ScubaFrame:
  SetFrameViewConfiguration <frameID> <configuration>
  GetViewIDFromFrameRowCol <frameID> <row> <col>   --- returns view ID
  GetSelectedViewID <frameID>    --- returns view ID

ScubaView:
  SetViewZoomLevel <viewID> <zoomLevel>
  SetViewInPlane <viewID> <plane>
  SetViewRASCenter <viewID> <X> <Y> <Z>
  AddLayerToView <viewID> <layerID> <level>
  RemoveLayerFromViewAtLevel <viewID> <level>
  RemoveAllLayersFromView <viewID>

ScubaLayerFactory:
  MakeLayer <layerType>   --- returns layer ID

ScubaLayer2DMRI:
  SetVolumeCollection <layerID> <collectionID>

DataCollection:
  NewVolumeDataCollection <filename>   --- returns collection ID
  



plan :

test_ScubaLayers
x report info at RAS
 x set label properly
 x ScubaView not drawing last character


x main scuba interface window
x fix file selectors
x make load volume dlog nice
x fix crash on load volume without redraw
x error dialogs
x frame->view config
x make label/value display panel
x fix overlay drawing bugs

x b/c, LUT color map support
x opacity

x label/value display panel

x Layer Info interface
x - change b/c or LUT
x - change opactiy

x replace mbClearZero with min/max

x View Props panel
x  - menu of views
x  - draw level slots, each with menu of layers

x ScubaView:
x key down
x  - left right down up in out zoom inplane

x ScubaLayer2DMRIS.cpp
x layer factory stuff
x  - surface color
x  - draw with opacity
x - line drawing
 - line width
 - antialiased line drawing

cursor linking
x - Set2DRASCenter, Set2DZoomLevel
x - each ScubaView has a linked flag, settable in view props panel
x - SetLinkedFlag in ScubaView, adds id to static list
x - when link functions called, goes through linked list and calls the same
x - Copy These Layers to Current Views button in views props, copies layer/level settings to other views, tcl function takes list of view IDs

ScubaToolState
 - registers tcl functions for getting and setting stuff (with id)
 - tool: { navigation, marker, voxel paint, voxel clone, voxel selection, voxel restore, control points }
 - brush : radius, 3d, shape
 - voxel paint : min/max, new value
 - voxel clone : min/max, source

x ScubaFrame gets a ScubaToolState, tcl function for getting tool ID
x scuba.tcl makes gaTool(id,...), gets id from frame=gaFrame(id,toolID)
x View adds ScubaToolState to its mouse/key events, ScubaFrame passes
x View calls Layer::HandleTool ( RAS, ToolState, InputState )


x - should set,get,min/max stuff be in VolumeCollection? Layer is doing a lot of stuff

x display transform interface on view level
x - ScubaTransform class
x   - GetTransformList -- returns list of IDs
x   - Get/SetTransformLabel, Get/SetTransformMatrix
x - transforms panel
x   - list of transforms
  - two matrix displays, one is 'current', one is 'apply'
  - can load from external file or set values automatically in apply transform
  - 'apply' button on apply side multiples new matrix to current
x - view props has a new transform field
x - ScubaView gets new tcl functions:
x   - SetViewTransformID and GetViewTransformID <viewID> <transformID>

x Broadcaster class
x  - Broadcast( string message, void* data )
x  - AddListener( Listener* )
x  - RemoveListener( Listener* )
x Listener class
x  - ListenToMessage( string message, void* data )

x option for left/right flip, i.e. Neurology View, which does a x flip in R and S views
x  - make static for all views??
 - add function for getting initial values of global menu and toolbar vars i.e. gaView(flipLeftRight)

x move some key funcs to tcl
x  - gaView(current,inPlane) - get prefs from file, do key binding in MakeScubaFrame


x ScubaGlobalPrefs object with static getter
x  - on ctor, gets stuff from prefs file
x  - ScubaView gets R/L flip bool from here
 - modify PreferencesManager to have PreferencesUsers class, others mix in, have SavePrerferences() call that clientes use to set prefs before file is saved

x ScubaView needs to use TranslateWindowToRAS when drawing coords on side of window


x ScubaLUT
x  - ScubaLUT with normal GetIDList, etc, wrapper for colortab.c
x  - index<->color functions
x  - change 2DMRILayer to take LUT id instead of filename
x  - button for loading LUT

x LUT panel
x  - settable label
x  - filename
 - text field with their contents

x Collection panel
x  - ID and type
x  - editable label
 - cb for selectable
x  - type specific frame for filenames

x ScubaROI
x  - normal GetROIIdList interface, etc
x  - type: structure or free
x  - int structure
x  - int lutID
x  - int color[3]

x ScubaROIVolume
x  - SetROIBounds( iBounds[3] );
x    - ROI allocates array
x  - Select/Unselect

x DataCollection
x  - int NewROI(), calls DoNewROI, adds to map, returns ID
x  - virtual DoNewROI makes, sets up, returns 
x  - SelectROI(roiID) - checks if ID is in map, selects it
x  - Tcl NewCollectionROI
x  - Tcl SelectCollectionROI
x  - Tcl GetROIIDListForCollection

x VolumeDataCollection
x  - bool IsRASSelected()
x  - Un/SelectRAS functions called by Layer


x Collection panel
x  - ROI pane
x    - list of collection's ROIs - SelectCollectionROI colID roiID
x    - free/structure rb - SetROIType roiID strucutre|free
x    - LUT pdm
x    - structure pdm - SetROIType roiID structure, SetROIStructure roiID strctr
x    - color picker - SetROIType roiID free, SetROIColor roiID red green blue
x    - New button - MakeNewROI colID, select it

x - ScubaLayer2DMRI
x   - VolumeCollection::IsRASSelected needs to check all ROIs, return the color
x     - if multiple selections, blend colors
x   - in DrawIntoBuffer, get color of ROI and do blending
x   - selection opacity 


x line tool
x  - new tool
x  - mouse 1 down to begin, mouse up to end
x    - try rubber band updating
x  - keep list of line objects
x  - draw line with voxel line drawing
x  - function to determine if RAS coordinate is in plane with granularity
  - mouse 2 to select 
    - can hit delete to erase line

x lines
x  - volume collection has edge volume
x  - MarkRASEdge(), UnmarkRASEdge(), IsRASEdge()
x  - move line drawing code to FindPointsOnLine() in Utilities.cpp
x  - ScubaLayer2DMRI calls FindPoitnsOnLine with DrawPixel() to draw its lines
x  - ScubaLayer2DMRI calls FindPoitnsOnLine() to add points to edges
x  - when fill, check that volume for stopping
x  - only stop on _other_ ROIs
 - cancel dlog

x Dlog boxes
x  - C interface
x    - NewDialogBox( title, text, bMeter, button1, button2 )
x    - UpdateDlog( percent )
x    - CheckDlogForButton()
x    - CloseDlog
x  - proc NewDialogBox, UpdateDlog, CheckDlogForButton, CloseDlog

x tool settings panel
x  - radius, shape, 3d
x  - tool specific panels
x    - roi: stop params (roi, lines), fuzziness

x Brush size
x  - VolumeCollection::GetRASPointsInSphere ( center, radius, bx, by, bz )
x  - VolumeCollection::GetRASPointsInCube ( center, radius, bx, by, bz )
x  - ScubaLayer gets list of points and then calls function on each
x    - Start at center, calc bounds using pixel size

Volume Edit
 - interface for setting new color and threshold
 - make button 2 like select code in ScubaLayer2DMRI
 - make an 'restore value' volume that VolumeCollection makes when loading MRI
 - button 3 will 'restore' values

x Undo
x  - UndoManager::BeginAction(isTitle), EndAction(), starts and clears lists of UndoActions
x  - UndoManager::GetTitle() tcl func returns "Nothing to undo" or "Undo|Redo $isSTitle"
x  - UndoManager::AddAction( UndoAction )
x  - UndoAction is subclassable
x    - virtual UndoAction() and virtual RedoAction()
x  - UndoManager::Undo() and Redo(), calls UndoAction() and RedoAction()
x  - Declare UndoSelectAction(bSelect, RAS)

Labels
x - save .label
  - interface
 - export structure labels as segmentations
  - interface
 - load label
  - interface
 - import segmentation
  - interface

number shortcuts for brush size




- volume drawing caching
  - problem is voxel sizes, so what if we resize and align the volume so that each voxel == 1 RAS point, and then create a volume of xyz translations, map<float[3],float[3]>, so the left-side RAS coords can just be rint-ed ... this would work for voxel size < 1, but waht about > 1, maybe just a matter of fixing the bounds



BRUCE'S LIST:::

b/c controled by mouse
in and out slice pg up/down
turning off ras coord display
display cursor
default to voxel size not 1mm.


BUGS:::
- viewflip pref is saved, but ScubaGlobalPrefs isn't doing all it should, need to add other values
- when load /tmp/test-10.mgh, zoom in, doesn't draw until change min to 1
- start up blank, load bert T1, draws black until move min to 1
- fix radius in brush, it's really ugly
- only open up dlog in fill if takes longer than 2 seconds
- increase max distance in fill

FUTURE IDEAS:::

Save Scene
 - save a script file to automatically load in data and set up view state like current one

nav tools draw onscreen sliders for feedback
 - on mouse down with right tool, draw scale bar
 - function to translate v position into modifcation value
 - start at mouse point, use expo scale towards edge for min/max values
