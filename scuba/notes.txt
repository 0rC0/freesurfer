---====--- PLAN

featureset 1

- X/GL window embedded in tcl/tk frame
- multiple volume loading
- window supports multiple viewpane configs
- viewing pane supports 
  - multiple orientations
   - overlays of loaded volumes
   - grayscale or LUT
- output shows values and coordinate systems
- volume editing
- selection
- control points


components:

TCLCommandManager
 - AddListener( RespondToCommandFunc )
 - AddCommand( commandName, arguments.. )
 - SendCommand( commandName, arguments... )
 - keeps list of commands
 - registers single processing function with TCL
 - on called, compare command name with stored list, then lookup listeners to that command and broadcast to them
 - typdef (void)(RespondToCommandFunc)( commandName, arguments... )

DataManager
 - LoadVolume( name );
 - LoadSurface( name );
 - void ReleaseVolume( MRI* );
 - void ReleaseSurface( MRIS* );
 - loads data and keeps track of it
   - if another layer request the data, will just hand them the pointer
   - does reference counting

PreferencesManager
 - UseFile ( fname )
   - look in ./fname, ~/fname etc
 - RegisterPref{Int,Float,String}( keyName, description, defaultValue )
   - if not found, writes entry in prefs file with description in comments and default value
 - {Set,Get}PrefAs{Int,Float,String}( keyName )
   - set or return value from prefs file

DataCollection
 - static DataCollection* GetDataCollection( CollectionID );
 - Unload()
 - holds a central data type and then associated data
 - GetInfoAtRAS( iX,iY,iZ, oasLabels, oasValues )

VolumeDataCollection : DataCollection
 - MRI*
 - selection list
 - transform stuff

SurfaceDataCollection : DataCollection
 - MRIS*
 - selection list
 - scalars

DataCollectionFactory
 - static CollectionID NewDataCollection( iType );

ToglManager
 - all togl stuff
 - passes to a Frame
 - Tcl: Click(iX,iY), MouseMoved(iX,iY)

Frame:
 - 1..n views
 - manages configuration, passing clicks along, key events, to proper view
 - other objects can register for idle events
 - tool modes
 - GetInfoAtWindowLocation( iX,iY, ocPairs, oasLabels, oasValues )
 - one view is selected
   - SelectThisView() - calls UnselectThisView() on all other vies
   - UnselectThisView()

View
 - manages 1..n layers
 - manages clicks, polling data, sending updates to tcl
 - tells layers to draw into proper GL area
 - orientation : 2D: plane, zoom, view center, tp, condition
                 3D: camera location, look, up
 - knows RAS coordinate space , converts window<->RAS
 - GetInfoAtWindowLocation( iX,iY, ocPairs, oasLabels, oasValues )
 - link information: type, which views are linked
 - SetView()
 - SetMarker()
 - SetLayers( iczLayers, iaLayerIDs ) 

Layer
 - static Layer& GetLayer( LayerID );
 - static GetLayerIDList( oczLayers, oaLayerIDs )
 - Layer ( collectionID )
 - GetInfoAtRAS( iX,iY,iZ ocPairs, oasLabels, oasValues )
  - drawing attributes:
   - opactiy
   - drawing level : 0 for base, 1 for overlay, or user-settable
   - modes supported : 2D, 3D, graph, etc,
   - transform : transform for this layer
 - subclasses
   - contruction checks if collection type is appropriate for this layer
   - 2DMRI( VolumeDataCollection )
     - draws slices
     - color scale : gray, color, or LUT
     - LUT file
     - sample type : nearest, trilinear, sinc
   - 2DMRIS( SurfaceDataCollection )
     - does intersections
     - scalar files, color scale for each
     - interpolation type
   - 3DMRIS( SurfaceDataCollection )
     - draws mesh
     - scalar files, color scale for each
   - Graph( VolumeDataCollection )
     - current time point, condition

LayerFactory
 - static LayerID NewLayer( iType );


on redraw:
ToglFrame
  - for each view, view->Draw( this->Mode )
View::Draw( iMode )
  - for each drawing level 0..n
    - for each layer in this level
      - layer->DrawIntoView( this->ViewInfo, this->Mode, this->Orientation )
Layer::DrawIntoView
  - 2DMRI
    - find bounds in volume from view bounds
    - for each voxel
      - get value -> color, apply color scale etc
      - apply with opacity to existing buffer (from ViewInfo)
  - 2DMRIS
    - do intersection to find draw list
    - apply color to vertex etc




volume loading
 - Menu command: Load Volume...
 - Tk dlog box for loading volume
     - Volume FN, optional label
     - checkbox for Automatically Create Layer, with optional transform FN

     collectionID NewVolumeDataCollection <volume_fn> <label>
     if bCreateLayer
       set layerID [New2DMRILayer collectionID]
       if bTransform       
         SetLayerTransform layerID <fnTransform>

- layer info manager
 - use [GetLayerIDList] to get list of layers
 - scrolling list of panels, for each layer
   set type [GetLayerType layerID]
   switch type {
     make widgets for layer info and settings
   }

- view info manager
 - for each view, list of possible layers, can add remove and reorder

- info update
 - tk send mouse location to ToglManager
   - frame->MouseMoved
     - view->MouseMoved
       - view transforms to 3/5D point, calls on layer->MouseMoved
         - polls DataCollection for info
	 - calls update functions via TclCommandManager

- linked cursors
 - tk pass clicks to ToglManager
   - passes to Frame, interprets tool and calls tool function
     - View gets SetView()
       - if View is linked, goes through static list of linked Views and calls SetCursor()


  for static tcl responders: 
    first time layer or view is created, 
      if (bTclFunctionsNotRegistered)
        RegisterTclFunctions()

Layer:
  GetLayerIDList     --- returns a list of layer IDs
  GetLayerType <layerID>     --- returns a text string {2DMRI,2DMRIS,etc}
  GetLayerOpacity <layerID>
  SetLayerOpacity <layerID> <opacity>

ScubaFrame:
  SetFrameViewConfiguration <frameID> <configuration>
  GetViewIDFromFrameRowCol <frameID> <row> <col>   --- returns view ID
  GetSelectedViewID <frameID>    --- returns view ID

ScubaView:
  SetViewZoomLevel <viewID> <zoomLevel>
  SetViewInPlane <viewID> <plane>
  SetViewRASCenter <viewID> <X> <Y> <Z>
  AddLayerToView <viewID> <layerID> <level>
  RemoveLayerFromViewAtLevel <viewID> <level>
  RemoveAllLayersFromView <viewID>

ScubaLayerFactory:
  MakeLayer <layerType>   --- returns layer ID

ScubaLayer2DMRI:
  SetVolumeCollection <layerID> <collectionID>

DataCollection:
  NewVolumeDataCollection <filename>   --- returns collection ID
  



todo:

code:
report info at RAS
b/c, LUT color map
editing
selection
control points
markers

interfaces:
Load Volume
Frame: View Configuration
Volume Info: change color map
       load LUT




plan :

test_ScubaLayers
x report info at RAS
 x set label properly
 x ScubaView not drawing last character


x main scuba interface window
x fix file selectors
x make load volume dlog nice
x fix crash on load volume without redraw
x error dialogs
x frame->view config
x make label/value display panel
x fix overlay drawing bugs
set view state dlog

x b/c, LUT color map support
x opacity

x label/value display panel

x Layer Info interface
x - change b/c or LUT
x - change opactiy

x replace mbClearZero with min/max

x View Props panel
x  - menu of views
x  - draw level slots, each with menu of layers

x ScubaView:
x key down
x  - left right down up in out zoom inplane

x ScubaLayer2DMRIS.cpp
x layer factory stuff
x  - surface color
x  - draw with opacity
 - line drawing
 - line width

cursor linking
x - Set2DRASCenter, Set2DZoomLevel
x - each ScubaView has a linked flag, settable in view props panel
x - SetLinkedFlag in ScubaView, adds id to static list
x - when link functions called, goes through linked list and calls the same
x - Copy These Layers to Current Views button in views props, copies layer/level settings to other views, tcl function takes list of view IDs

ScubaToolState
 - registers tcl functions for getting and setting stuff (with id)
 - tool: { navigation, marker, voxel paint, voxel clone, voxel selection, voxel restore, control points }
 - brush : radius, 3d, shape
 - voxel paint : min/max, new value
 - voxel clone : min/max, source

x ScubaFrame gets a ScubaToolState, tcl function for getting tool ID
x scuba.tcl makes gaTool(id,...), gets id from frame=gaFrame(id,toolID)
x View adds ScubaToolState to its mouse/key events, ScubaFrame passes
x View calls Layer::HandleTool ( RAS, ToolState, InputState )


x - should set,get,min/max stuff be in VolumeCollection? Layer is doing a lot of stuff

display transform interface on view level


consider linking ScubaFrame's selected view to the gaView(current) view in scuba.tcl, link view configuration in scuba.tcl and select view in view props automatically. the 't' view selecting key would need to be reimplemented in scuba.tcl.



Frame

Info pane
 - list of label/value strings in two columns
   - first column for a marker, PDM to select marker
     - max number of markers, default is 1 for cursor
   - second column for mouseover



Control Window


Tools
 global
   ctrl-b1 zoom in
   ctrl-b2 recenter
   ctrl-b3 zoom out
 - Navigation
   b1 pan
   b2 slice
   b3 zoom	
 - Marker
   b2 make marker
   b3 remove marker
 - Voxel Selection
   b2 select,   shift-b2 select fill
   b3 unselect, shift-b3 select unfill
 - Voxel Editing
   b2 paint, shift-b2 paint fill, ctrl-shift-b2 set color
   b3 erase, shift-b3 erase fill, ctrl-shift-b3 set erase color
 - Voxel Restore
   b2 restore,   shift-b2 restore fill
   b3 unrestore, shift-b2 unrestore fill
 - Control Points
   b2 make control point
   b3 remove control point

Data Info Dlog
 - row for each of loaded data
 - viewing options i.e. gray or LUT, opacity

Layer Info Dlog
 - row for each layer
 - set layer name
 - choose data sources
 - choose viewing options i.e. opacity
 - choose editable options

View Info
 - row for each view
 - linked navigation checkbox
 - list of layers names with checkboxes

Frame Info
 - view layout
 - special views like mosaic


BUGS:::

- left right flipped in coronal
- when change in plane with key, no update to tcl
   - should all this stuff be done in tcl because there's no notficiation method from c->tcl?


future ideas:

Save Scene
 - save a script file to automatically load in data and set up view state like current one

tkconn pull out window

nav tools draw onscreen sliders for feedback
 - on mouse down with right tool, draw scale bar
 - function to translate v position into modifcation value
 - start at mouse point, use expo scale towards edge for min/max values

