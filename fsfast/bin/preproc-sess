#! /bin/tcsh -f

#
# preproc-sess - runs preprocessing (mc, spatsmooth, mkbrainmask, inorm)
#
# Original Author: Doug Greve
# CVS Revision Info:
#    $Author: greve $
#    $Date: 2010/04/10 00:13:10 $
#    $Revision: 1.27 $
#
# Copyright (C) 2002-2007,
# The General Hospital Corporation (Boston, MA). 
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#


set VERSION = '$Id: preproc-sess,v 1.27 2010/04/10 00:13:10 greve Exp $';

set inputargs = ($argv);
set DateStr = "`date '+%y%m%d%H%M'`"

set instem   = ();
set mcinstem   = ();
set mcoutstem  = ();
set stcinstem   = ();
set stcoutstem  = ();
set sminstem   = ();
set smoutstem  = ();
set inormstem  = ();
set maskdir    = masks
set maskstem   = brain;
set UseSmoothMask = 0;
set fwhm     = ();
set surffwhm = ();
set SliceOrder = ();
set fsd     = bold;
set mcrun    = ();
set mctargstem = ();
set mctargframe = ();
set MCPerRun = 0;
set RunListFile = ();

set UpdateOnly = 1;
set DoTemplate = 1;
set DoMC     = 1;
set DoSTC    = 0;
set DoMask   = 1;
set DoVolSmooth = 1;
set DoSurfSmooth = 0;
set DoSmooth = 1; # any smoothing
set DoInorm  = 0;
set regfile = register.dat
set ProjFrac = (); # default will be 0.5
set DoProjAvg = 0;

set nskip = 0; # for inorm
set nolog = 0;
set targgrp = ();

set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

set PWD = `getpwdcmd`;
if($status) exit 1;

set SessList = `getsesspath $argv`;
if($status || $#SessList == 0) then
  getsesspath $argv 
  exit 1;
endif

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

##### Create a log file ######
if($nolog) then 
  set LF = /dev/null
else
  set logdir = log;
  mkdir -p $logdir
  if(! -e $logdir) then
    echo "WARNING: could not create $logdir"
    set LF = /dev/null
  else
    set LF = $logdir/preproc-sess.log
    if(-e $LF) mv $LF $LF.old
  endif
endif
echo "--------------------------------------------------------------"
echo "preproc-sess logfile is $LF"
echo "--------------------------------------------------------------"

echo "preproc-sess log file" >> $LF
echo $VERSION | tee -a $LF
echo "$user"  | tee -a $LF
echo "setenv FREESURFER_HOME $FREESURFER_HOME" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
uname -a        | tee -a $LF
pwd             | tee -a $LF
echo $0         | tee -a $LF
echo $inputargs | tee -a $LF
date          | tee -a $LF

echo "instem   $instem " | tee -a $LF
echo "mc   $DoMC     $mcinstem $mcoutstem " | tee -a $LF
echo "stc  $DoSTC    $stcinstem $stcoutstem"  | tee -a $LF
echo "sm   $DoVolSmooth $sminstem $smoutstem "| tee -a $LF
echo "mask $DoMask   $maskstem"| tee -a $LF

set ProjectDir = `pwd`;

set StartTime = `date`;
#------------------------------------------------#
foreach sess ($SessList)
  set sessid     = `basename $sess`;
  set sessparent = `dirname $sess`;

  # Create a log file #
  if(-w .) then
    mkdir -p log
    set LF = $ProjectDir/log/preproc-$sessid-$fsd.log
    rm -f $LF
  else
    set LF = /dev/null
  endif

  echo "preproc-sess" >> $LF
  echo $sessid      >> $LF
  echo $VERSION     >> $LF
  uname -a          >> $LF
  date              >> $LF
  pwd               >> $LF
  echo $inputargs   >> $LF
  echo "ProjectDir $ProjectDir" >> $LF

  if($DoTemplate) then
    set cmd = (mktemplate-sess -s $sessid -d $sessparent -fsd $fsd)
    if($#RunListFile) set cmd = ($cmd -rlf $RunListFile);
    if($nolog)      set cmd = ($cmd -nolog);
    if($UpdateOnly) set cmd = ($cmd -update);
    echo "$sessid Template -----------------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoMask) then
    set cmd = (mkbrainmask-sess -maskstem $maskstem)
    set cmd = ($cmd -fsd $fsd)
    set cmd = ($cmd -s $sessid -d $sessparent)
    if($#RunListFile) set cmd = ($cmd -rlf $RunListFile);
    if($nolog) set cmd = ($cmd -nolog);
    if($UpdateOnly) set cmd = ($cmd -update);
    echo "$sessid Mask ------------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoMC) then
    set cmd = (mc-sess -fstem $mcinstem -fmcstem $mcoutstem)
    set cmd = ($cmd -s $sessid -d $sessparent -fsd $fsd)
    if($#RunListFile) set cmd = ($cmd -rlf $RunListFile);
    if($MCPerRun)   set cmd = ($cmd -perrun)
    if($#rlf != 0)  set cmd = ($cmd -rlf $RunListFile);
    if($nolog)      set cmd = ($cmd -nolog);
    if($UpdateOnly) set cmd = ($cmd -update);
    echo "$sessid MC -----------------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoSTC) then
    set cmd = (stc-sess -i $stcinstem -o $stcoutstem)
    if($#SliceOrder) set cmd = ($cmd -so $SliceOrder)
    set cmd = ($cmd -s $sessid -d $sessparent -fsd $fsd)
    if($#rlf != 0)  set cmd = ($cmd -rlf $RunListFile);
    if($nolog)      set cmd = ($cmd -nolog);
    if($UpdateOnly) set cmd = ($cmd -update);
    echo "$sessid STC -----------------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoVolSmooth) then
    set cmd = (spatialsmooth-sess -i $sminstem -o $smoutstem -fwhm $fwhm)
    set cmd = ($cmd -fsd $fsd -s $sessid -d $sessparent)
    if($#UseSmoothMask)  set cmd = ($cmd -mask);
    if($#rlf != 0)  set cmd = ($cmd -rlf $RunListFile);
    if($nolog)      set cmd = ($cmd -nolog);
    if($UpdateOnly) set cmd = ($cmd -update);
    echo "$sessid Volume Smoothing ---------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoSurfSmooth) then
    set cmd = (surfsmooth-sess -i $sminstem -o $smoutstem -fwhm $fwhm)
    set cmd = ($cmd -fsd $fsd -s $sessid -d $sessparent -reg $regfile)
    if($#ProjFrac)  set cmd = ($cmd -projfrac $ProjFrac)
    if($DoProjAvg)  set cmd = ($cmd -projfrac-avg)
    if($#rlf != 0)  set cmd = ($cmd -rlf $RunListFile);
    if($nolog)      set cmd = ($cmd -nolog);
    if($UpdateOnly) set cmd = ($cmd -update);
    if($MCPerRun)   set cmd = ($cmd -perrun)
    echo "$sessid Surface Smoothing ---------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoInorm) then
    # Should probably remove this
    set cmd = (inorm-sess -funcstem $inormstem )
    set cmd = ($cmd  -fsd $fsd -nskip $nskip)
    set cmd = ($cmd -s $sessid -d $sessparent)
    if($#rlf != 0) set cmd = ($cmd -rlf $RunListFile);
    if($nolog)     set cmd = ($cmd -nolog);
    echo "$sessid Inorm ------------------------" |& tee -a $LF
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

end

echo "----------------------------------------" |& tee -a $LF
echo "Started at $StartTime" |& tee -a $LF
echo "Ended   at `date`"     |& tee -a $LF

echo "preproc-sess done"

exit 0

###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-i":
    case "-in":
      if ( $#argv == 0) goto arg1err;
      set instem = $argv[1]; shift;
      breaksw

    case "-mc-in":
    case "-mcin":
      if ( $#argv == 0) goto arg1err;
      set mcinstem = $argv[1]; shift;
      breaksw

    case "-mc-out":
    case "-mcout":
      if ( $#argv == 0) goto arg1err;
      set mcoutstem = $argv[1]; shift;
      breaksw

    case "-stcin":
      if ( $#argv == 0) goto arg1err;
      set stcinstem = $argv[1]; shift;
      breaksw

    case "-stcout":
      if ( $#argv == 0) goto arg1err;
      set stcoutstem = $argv[1]; shift;
      breaksw

    case "-smin":
      if ( $#argv == 0) goto arg1err;
      set sminstem = $argv[1]; shift;
      breaksw

    case "-smout":
      if ( $#argv == 0) goto arg1err;
      set smoutstem = $argv[1]; shift;
      breaksw

    case "-mask":
      if ( $#argv == 0) goto arg1err;
      set maskstem = $argv[1]; shift;
      breaksw

    case "-maskdir":
      if ( $#argv == 0) goto arg1err;
      set maskdir= $argv[1]; shift;
      breaksw

    case "-vol-fwhm":
    case "-fwhm":
      if ( $#argv == 0) goto arg1err;
      set fwhm = $argv[1]; shift;
      if($fwhm != 0) then
        set DoVolSmooth = 1;
        set DoSurfSmooth = 0;
        set DoSmooth = 1;
      endif
      breaksw

    case "-smooth-mask":
      set UseSmoothMask = 1;
      breaksw

    case "-no-smooth-mask":
      set UseSmoothMask = 0;
      breaksw

    case "-surf-fwhm":
      if ( $#argv == 0) goto arg1err;
      set fwhm = $argv[1]; shift;
      if($fwhm != 0) then
        set DoVolSmooth = 0;
        set DoSurfSmooth = 1;
        set DoSmooth = 1;
      endif
      breaksw

    case "-reg":
      if ( $#argv == 0) goto arg1err;
      set regfile = $argv[1]; shift;
      breaksw

    case "-projfrac":
      if ( $#argv == 0) goto arg1err;
      set ProjFrac = $argv[1]; shift;
      breaksw

    case "-projfrac-avg":
      set DoProjAvg = 1;
      breaksw

    case "-nskip":
      if ( $#argv == 0) goto arg1err;
      set nskip = $argv[1]; shift;
      breaksw

    case "-fsd":
      if ( $#argv == 0) goto arg1err;
      set fsd = $argv[1]; shift;
      breaksw

    case "-runlistfile":
    case "-rlf":
      if ( $#argv == 0) goto arg1err;
      set RunListFile = $argv[1]; shift;
      breaksw

    case "-nomc":
      set DoMC = 0;
      breaksw

    case "-mc-per-run":
    case "-mc-perrun":
    case "-mcperrun":
      set MCPerRun = 1;
      breaksw

    case "-per-run":
    case "-perrun":
      set MCPerRun = 1;
      breaksw

    case "-per-session":
    case "-no-per-run":
    case "-no-perrun":
    case "-persession":
      set MCPerRun = 0;
      breaksw

    case "-no-stc":
    case "-nostc":
      set DoSTC = 0;
      breaksw

    case "-sliceorder":
    case "-so":
      if ( $#argv == 0) goto arg1err;
      set SliceOrder = $argv[1]; shift;
      set DoSTC = 1;
      breaksw

    case "-no-smooth":
    case "-nosmooth":
      set DoVolSmooth = 0;
      set DoSurfSmooth = 0;
      set DoSmooth = 0;
      breaksw

    case "-no-inorm":
    case "-noinorm":
      set DoInorm = 0;
      breaksw

    case "-inorm":
      set DoInorm = 1;
      breaksw

    case "-no-template":
      set DoTemplate = 0;
      breaksw

    case "-no-mask":
    case "-nomask":
      set DoMask = 0;
      breaksw

    case "-update":
      set UpdateOnly = 1;
      breaksw

    case "-force":
    case "-noupdate":
    case "-no-update":
      set UpdateOnly = 0;
      breaksw

    case "-nolog":
      set nolog = 1;
      breaksw

    case "-verbose":
      set verbose = 1;
      breaksw

    case "-echo":
      set echo = 1;
      breaksw

    case "-debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    case "-g":
    case "-s":
    case "-sf":
    case "-d":
    case "-df":
      shift;
      # ignore getsesspath arguments 
      breaksw

    case "-cwd":
      # ignore getsesspath arguments 
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:
  if($#instem == 0) set instem = "f";

  if($DoMC) then
    if($#mcinstem  == 0) set mcinstem  = $instem
    if($#mcoutstem == 0) then
      if($MCPerRun) then
        set mcoutstem = $mcinstem"mcpr"
      else
        set mcoutstem = $mcinstem"mc"
      endif    
    endif    
  else
    set mcoutstem = $instem;
  endif

  if($DoSTC) then
    if($#stcinstem  == 0) set stcinstem  = $mcoutstem
    if($#stcoutstem == 0) set stcoutstem = $stcinstem"stc"
  else
    set stcoutstem = $mcoutstem
  endif

  if($DoSmooth) then
    if($#fwhm == 0) then
      echo "ERROR: must specify FWHM when doing smoothing"
      echo "If not smoothing, use -nosmooth"
      exit 1;
    endif
    if($#sminstem  == 0) set sminstem  = $stcoutstem
    if($#smoutstem == 0) then
      if($DoVolSmooth) set smoutstem = $sminstem"sm"$fwhm
      if($DoSurfSmooth) set smoutstem = $sminstem"sm"$fwhm"s"
    endif
  endif

  if($DoInorm && $#inormstem == 0) then
    if($DoVolSmooth) then
      set inormstem = $smoutstem;
    else if($DoMC) then
      set inormstem = $mcoutstem;
    else
      set inormstem = $mcinstem;
    endif
  endif

  if(! $DoMC && ! $DoSTC  && ! $DoSmooth && ! $DoMask) then
    echo "ERROR: nothing to do"
    exit 1;
  endif

  if($#ProjFrac && $DoProjAvg) then
    echo "ERROR: cannot -projfrac and -projfrac-avg"
    exit 1;
  endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "USAGE: preproc-sess"
  echo ""
  echo "  -i    instem    : stem to use as overal input <f>"
  echo "  -vol-fwhm  fwhm : 3D fwhm (mm) (not with -surf-fwhm)"
  echo "  -surf-fwhm fwhm : 2D fwhm (mm) (not with -vol-fwhm)"
  echo "  -sliceorder so : turn on slice timing correction with the given slice order"
  echo "  -update        : only run a stage if input is newer than output (default)"
  echo "  -force         : force reprocessing of all stages (turns off -update)"
  echo "  -no-update     : same as -force"
  echo "  -smooth-mask   : use mask when volume smoothing"
  echo "  -no-smooth-mask: do not use mask when volume smoothing"
  echo ""
  echo "  -nomc     : don't do motion correction"
  echo "  -nostc    : don't do slice-timing correction"
  echo "  -nosmooth : don't do smoothing"
  echo "  -nomask   : don't make brain mask"
  echo "  -noinorm  : don't do inorm"
  echo "  -noinorm  : don't do inorm"
  echo ""
  echo "  -mcin   mcinstem    : stem to use as input  to MC"
  echo "  -mcout  mcoutstem   : stem to use as output of MC"
  echo "  -stcin  stcinstem   : stem to use as input  to STC "
  echo "  -stcout stcoutstem  : stem to use as output of STC "
  echo "  -smin   sminstem    : stem to use as input  to smoothing "
  echo "  -smout  sminstem    : stem to use as output of smoothing "
  echo "  -mask   maskstem    : <brain>"
  echo ""
  echo "  -inorm        : perform intensity normalization (off by default)"
  echo "  -nskip N      : do not use first N TRs when inorming"
  echo ""
  echo "  -mc-per-run : perform motion correction on all runs separately"
  echo ""
  echo "  -perrun : perform masking and MC on all runs separately"
  echo ""
  echo "  -reg regfile   : registration file for use with -surf-fwhm (register.dat)"
  echo "  -projfrac frac : projection fraction for use with -surf-fwhm (0.5)"
  echo "  -projfrac-avg  : average over ribbon (not with -projfrac)"
  echo ""
  echo "Session Arguments (some combination required)"
  echo "  -sf sessidfile  ..."
  echo "  -df srchdirfile ..."
  echo "  -s  sessid      ..."
  echo "  -d  srchdir     ..."
  echo "  -fsd    fsd <bold>"
  echo "  -rlf    rlf  : run list file (default all runs)"
  echo ""
  echo ""

  if(! $PrintHelp) exit 1;

  echo $VERSION

  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'

exit 1;


#---- Everything below here is printed out as part of help -----#
BEGINHELP

This will run preprocessing steps: motion correction (MC),
slice-timing correction (STC), smoothing, intensity normalization
(INorm), and brain mask creation. By default, it will perform MC,
smoothing, and masking, but not STC or INorm. All stages producde a
new volume that can be used as input to mkanalysis-sess. Note: MC and
INorm require matlab but none of the other stages does.  By default,
motion correction uses the first volume of the first run as the
reference for all runs.

-i instem 

Explicitly specify input stem. Default is f.

-vol-fwhm fwhm

Specify the fwhm for 3D spatial smoothing. There is no default.  The
output will have "smFWHM" appened to it. Eg, for -vol-fwhm 5, then the
output will have "sm5" appened. If you do not want to perform
smoothing, use -nosmooth. See also spatialsmooth-sess. Cannot be run
with -surf-fwhm.

-surf-fwhm fwhm

Specify the fwhm for 2D (surface) spatial smoothing. The raw data are
resampled to the surface, smoothed, and then put back into the volume
(so that they can be analyzed in standard volumetric fashion). Values
not on the surface are not changed.  Surface smoothing can be slow, so
be patient! Requires that registration have been performed
(spmregister-sess or fslregister-sess).  The output will have
"smFWHMs" appened to it. Eg, for -surf-fwhm 5, then the output will
have "sm5s" appened. If you do not want to perform smoothing, use
-nosmooth. See also surfsmooth-sess. Cannot be run with -vol-fwhm.
Any per-run instruction will force surface smoothing to use
"register.dat" in each run directory. The registration file name can
be changed with -reg. By default, samples midway between the white and
pial surfaces (ie, projection fraction of 0.5), but this can be
changed with -projfrac. Or the average over the ribbon can be computed
with -projfrac-avg (but this will be slow).

-sliceorder so

Perform slice-timing correction with the given slice order. Legal
values are siemens, up, down, odd, and even. Siemens slice order is
interleaved starting on the first slice for an odd number of slices or
the second slice for an even number. "up" is 1st, 2nd, 3rd,
etc. "down" is last, next to last, etc. odd is 1st, 3rd, 5th, , etc,
then 2nd, 4th, 6th, etc. "even" is 2nd, 4th, 6th, etc, then 1st, 3rd,
5th, etc.  See also stc-sess.

-force
-noupdate

Force processing of all stages regardless of what has been done
before. This turns off -update

-update

Only perform a stage if the output is newer than the input or if 
the output does not exist. This can be very convient as you
do not have to keep track of what has been done. Just specify
all the sessions and and it will figure out what needs to be 
done. This is the default behavior. See also -force.

-inorm

Not needed anymore. Turn on computing of intensity normalization
factor (creates stem.meanval). This was necssary for the old selxavg.


INPUTS AND OUTPUTS

Unless otherwise specified, the input stem is f, and the input stems
and output stems of the other stages are automatically determined as
follows:

Input  to MC is instem (default is f)
Output of MC is instem"mc"  (ie, the MC input stem with "mc" 
appended to the end). When per-run is used, the MC default 
stem will be instem"mc.pr".

Input  to STC is outstem of MC  
Output of STC is stcinstem"stc" (ie, the STC input stem with "stc" 
appended to the end)

Input  to smoothing is outstem of STC (or MC if no STC)
Output of smoothing is sminstem"smFWHM" (ie, the smoothing 
input stem with "sm" appended to the end and then the specified
FWHM appended to that).

When -mcperrun is used, the target volume is the middle frame.


EXAMPLE 1 
To perform MC, smoothing by fwhm of 5mm, and brain mask, run

  preproc-sess -sf sessidlist -df sessdirlist -vol-fwhm 5

For MC the input will be f and the output will be fmc
For Smoothiing the input will be fmc and the output will be fmcsm5


EXAMPLE 2
To perform MC, STC, smoothing by fwhm of 7.1 mm, and brain mask, run

  preproc-sess -sf sessidlist -df sessdirlist -vol-fwhm 7.1 -stc

For MC  the input will be f and the output will be fmc
For STC the input will be fmc and the output will be fmcstc
For Smoothiing the input will be fmcstc and the output will be fmcstcsm7.1



