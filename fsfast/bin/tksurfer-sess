#! /bin/csh -f

#
# tkmedit-sess
#
# Original Author: Doug Greve
# CVS Revision Info:
#    $Author: greve $
#    $Date: 2010/04/02 23:18:21 $
#    $Revision: 1.10 $
#
# Copyright (C) 2002-2007,
# The General Hospital Corporation (Boston, MA). 
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#


set VERSION = '$Id: tksurfer-sess,v 1.10 2010/04/02 23:18:21 greve Exp $'
set inputargs = ($argv);
set analysis      = ();
set contrastlist   = ();
set mapanalysis   = ();
set map = sig;
set annot = ();
set hemi = ();
set surf = inflated
set ShowHDR = 1;
set PrintHelp = 0;
set fthresh = 2;
set fmax    = 4;
set DoAllContrasts = 0;
set Delink = 0;
set UseVol2Surf = 1;
set ProjFrac = 0.5;
set Interp = nearest
set ToSelf = 0;

set SurfAna = 0;
set UseTalairach = 0;
set subject = ();


if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
  exit 1;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
set SessList = (`getsesspath $argv`);
if($status || $#SessList == 0) then
  echo $SessList
  exit 1;
endif
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

## Parse the analysis
if($#analysis != 0) then
  if(! -e $analysis ) then
    echo "ERROR: $analysis does not exist." |& tee -a $LF
    exit 1;
  endif
  set infofile = $analysis/analysis.info
  set cfg = $analysis/analysis.cfg
  set fsd = `cat $infofile | awk '{if($1 == "fsd") print $2}'`;
  set designtype = `cat $infofile | awk '{if($1 == "designtype") print $2}'`;
  if($#designtype == 0) then
    set designtype = `cat $infofile | awk '{if($1 == "avgtype") print $2}'`;
  endif
  set tmp = `cat $infofile | awk '{if($1 == "surface") print $2" "$3}'`;
  if($#tmp != 0) then
    set SurfAna = 1;
    set subject = $tmp[1];
    set hemi    = $tmp[2]; # may overwrite -hemi
    echo "Surface $subject $hemi"
    set UseVol2Surf = 0;
  endif
  set tmp = `cat $infofile | awk '{if($1 == "UseTalairach") print 1}'`;
  set UseTalairach = $#tmp;
  if($UseTalairach) set subject = fsaverage
  set IsFIR = 1;
  set tmp = `grep -e -gammafit $cfg`;
  if($#tmp) set IsFIR = 0;
  set tmp = `grep -e -spmhrf $cfg`;
  if($#tmp) set IsFIR = 0;
endif
if(! $IsFIR) set ShowHDR = 0;
if($#hemi == 0) then
  echo "ERROR: no hemisphere specified" 
  exit 1;
endif

## Parse the map analysis
if($#mapanalysis != 0) then
  set infofile = $mapanalysis/analysis.info
  set mapfsd = `cat $infofile | awk '{if($1 == "fsd") print $2}'`;
  set tmp = `cat $infofile | awk '{if($1 == "surface") print $2" "$3}'`;
  if($#tmp != 0) then
    set mapsubject = $tmp[1];
    set maphemi    = $tmp[2];
    echo "Map Surface $mapsubject $maphemi"
    if($subject != $mapsubject || $hemi != $maphemi) then
      echo "ERROR: map analysis $mapanalysis uses a different surface."
      exit 1;
    endif      
  endif
  set tmp = `cat $infofile | awk '{if($1 == "UseTalairach") print 1}'`;
  set MapUseTalairach = $#tmp;
  if($UseTalairach != $MapUseTalairach) then
    if($MapUseTalairach) then
      echo "ERROR: map analysis $mapanalysis is talairach-based."
      echo "This does not match the analysis $analysis"
    else
      echo "ERROR: map analysis $mapanalysis is NOT talairach-based."
      echo "This does not match the analysis $analysis"
    endif      
    exit 1;
  endif
endif

echo $VERSION
uname -a      
date          
which tksurfer

# ---------------------------------------------
foreach sess ($SessList)
  echo ""

  set self = `cat $sess/subjectname`;

  set reg = ();
  if($#subject == 0) then
    set reg = $sess/$fsd/register.dat
    if(! -e $reg) then
      echo "ERROR: cannot find $reg"
      exit 1
    endif
    set subject = `head -n 1 $reg`;
    echo "subject is $subject"
    if(! -e $SUBJECTS_DIR/$subject) then
      echo "ERROR: cannot find $SUBJECTS_DIR/$subject"
      exit 1;
    endif
  endif

  set anapath = $sess/$fsd/$analysis
  if(! -e $anapath) then
    echo "ERROR: cannot find $anapath"
    exit 1;
  endif

  if($ShowHDR) then
    set hstem = $anapath/h
    set hpath = `stem2fname $hstem`;
    if($status) then
      echo "$hpath"
      exit 1;
    endif
    set hoffsetstem = $anapath/h-offset
    set hoffsetpath = `stem2fname $hoffsetstem`;
    if($status) then
      echo "$hoffsetpath"
      exit 1;
    endif
  endif

  set mapanapath = $sess/$fsd/$mapanalysis
  set maplist = ()
  echo list $contrastlist
  foreach contrast ($contrastlist)
    set conpath = $mapanapath/$contrast
    if(! -e $conpath) then
      echo "ERROR: cannot find $conpath"
      exit 1;
    endif
    set mapstem = $conpath/$map
    set mappath = `stem2fname $mapstem`;
    if($status) then
      echo "$mappath"
      exit 1;
    endif
    set maplist = ($maplist $mappath)
    echo con/map $contrast $mappath
  end
  echo maplist $maplist
  set mapconcatfile = $sess/$mapfsd/$mapanalysis/tksconcat.nii
  set cmd = (mri_concat $maplist --o $mapconcatfile);
  echo $cmd
  $cmd
  if($status) exit 1;

  set overlayregopt = ()
  set hdrregopt = ()
  if($UseVol2Surf) then
    # Sample volume to the surface
    # Set up vol2surf basic cmd
    set cmd0 = (mri_vol2surf --hemi $hemi --projfrac $ProjFrac \
      --interp $Interp --cortex)
    if(! $UseTalairach) set cmd0 = ($cmd0 --reg $reg)
    if($UseTalairach)   set cmd0 = ($cmd0 --regheader $subject)

    set mov = $mapconcatfile
    set out = $sess/$mapfsd/$mapanalysis/$hemi.tksconcat.mgh
    set cmd = ($cmd0 --mov $mov --o $out)
    echo $cmd
    $cmd
    if($status) exit 1;
    rm -f $mov
    set mapconcatfile = $out

    if($ShowHDR) then
      # HRF
      set mov = $hpath
      set out = $sess/$mapfsd/$mapanalysis/$hemi.h.mgh
      set cmd = ($cmd0 --mov $mov --o $out)
      echo $cmd
      $cmd
      if($status) exit 1;
      set hpath = $out
      # Offset
      set mov = $hoffsetpath
      set out = $sess/$mapfsd/$mapanalysis/$hemi.h-offset.mgh
      set cmd = ($cmd0 --mov $mov --o $out)
      if(! $UseTalairach) set cmd = ($cmd --reg $reg)
      if($UseTalairach) set cmd = ($cmd --regheader $subject)
      echo $cmd
      $cmd
      if($status) exit 1;
      set hoffsetpath = $out
    endif
  else
    if(! $SurfAna) then
      set overlayregopt = (-overlay-reg $reg)
      if($ShowHDR) then
        set hdrregopt = (-timecourse-reg $reg -timecourse-offset-reg-file $reg)
      endif
    endif
  endif

  if($ToSelf && $subject != $self) then
    set cmd0 = (mri_surf2surf --srcsubject $subject \
     --trgsubject $self --hemi $hemi)
    set cmd = ($cmd0 --sval $mapconcatfile --tval $mapconcatfile)
    echo $cmd
    $cmd
    if($status) exit 1;
    if($ShowHDR) then
      set cmd = ($cmd0 --sval $hpath --tval $hpath)
      echo $cmd
      $cmd
      if($status) exit 1;
      set cmd = ($cmd0 --sval $hoffsetpath --tval $hoffsetpath)
      echo $cmd
      $cmd
      if($status) exit 1;
    endif
    set subject = $self
  endif

  set cmd = (tksurfer $subject $hemi $surf)
  set cmd = ($cmd -overlay $mapconcatfile $overlayregopt)
  set cmd = ($cmd -label-outline -colscalebarflag 1)
  if($ShowHDR) then
    set cmd = ($cmd -timecourse $hpath -timecourse-offset $hoffsetpath)
    set cmd = ($cmd $hdrregopt)
  endif
  if($#annot) set cmd = ($cmd -annot $annot)
  set fmid   = `echo "($fmax+$fthresh)/2.0" | bc -l`
  set fslope = `echo "1.0/($fmax-$fthresh)" | bc -l`
  set cmd = ($cmd -fthresh $fthresh -fmid $fmid -fslope $fslope)
  if($Delink) set cmd = ($cmd -delink);

  echo " cd `pwd`"
  echo "setenv SUBJECTS_DIR $SUBJECTS_DIR"
  echo $cmd
  echo ""

  # Print a list of contrasts
  echo "Contrasts"
  @ nth = 0;
  foreach c ($contrastlist)
    echo $nth $c
    @ nth = $nth + 1;
  end
  echo ""
  echo ""

  # Runit
  $cmd

  # delete tmp files
  rm -f $mapconcatfile
  rm -f $sess/$mapfsd/$mapanalysis/$hemi.h.mgh
  rm -f $sess/$mapfsd/$mapanalysis/$hemi.h-offset.mgh

end # Loop over sessions

exit 0;
###--------------------------------------------###

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-hemi":
    case "-h":
      if ( $#argv == 0) goto arg1err;
      set hemi = $argv[1]; shift;
      breaksw

    case "-a":
    case "-analysis":
      if ( $#argv == 0) goto arg1err;
      set analysis = $argv[1]; shift;
      breaksw

    case "-mapanalysis":
    case "-ma":
      if ( $#argv == 0) goto arg1err;
      set mapanalysis = $argv[1]; shift;
      breaksw

    case "-c":
    case "-contrast":
      if ( $#argv == 0) goto arg1err;
      set contrastlist = ($contrastlist $argv[1]); shift;
      breaksw

    case "-call":
      set DoAllContrasts = 1;
      breaksw

    case "-map":
      if($#argv == 0) goto arg1err;
      set map = $argv[1]; shift;
      breaksw

    case "-fthresh":
      if ( $#argv == 0) goto arg1err;
      set fthresh = $argv[1]; shift;
      breaksw

    case "-fmax":
    case "-fsat":
      if ( $#argv == 0) goto arg1err;
      set fmax = $argv[1]; shift;
      breaksw

    case "-aparc":
      set annot = aparc
      breaksw

    case "-annot":
      if($#argv < 1) goto arg1err;
      set annot = $argv[1]; shift
      breaksw

    case "-nohdr":
      set ShowHDR = 0;
      breaksw

    case "-delink":
      set Delink = 1;
      breaksw

    case "-no-vol2surf":
      set UseVol2Surf = 0;
      breaksw

    case "-projfrac":
      if($#argv < 1) goto arg1err;
      set ProjFrac = $argv[1]; shift
      breaksw

    case "-interp":
      if($#argv < 1) goto arg1err;
      set Interp = $argv[1]; shift
      breaksw

    case "-self":
      set ToSelf = 1;
      breaksw

    case "-debug":
      set verbose = 1;
      set echo = 1;
      setenv XDEBUG 1
      breaksw

    case "-g":
    case "-s":
    case "-sf":
    case "-d":
    case "-df":
      shift;
      # ignore getsesspath arguments 
      breaksw

    case "-cwd":
      # ignore getsesspath arguments 
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#analysis == 0) then
    echo "ERROR: no analysis specified" 
    exit 1;
  endif
  if(! -e $analysis) then
    echo "ERROR: analysis $analysis does not exist" 
    exit 1;
  endif
  if($#mapanalysis == 0) set mapanalysis = $analysis
  if(! -e $mapanalysis) then
    echo "ERROR: analysis $mapanalysis does not exist" 
    exit 1;
  endif
  if($DoAllContrasts) then
    set matlist = (`ls $analysis/*.mat`);
    if($status) then
      echo "ERROR: cannot find any contrasts in $analysis"
      exit 1;
    endif
    foreach m ($matlist)
      set c = `basename $m .mat`;
      set contrastlist = ($contrastlist $c);
    end
  endif
  if($#contrastlist == 0) then
    echo "ERROR: no contrast specified" 
    exit 1;
  endif
#  foreach contrast ($contrastlist)
#    set cmat = $mapanalysis/$contrast.mat
#    if(! -e $cmat) then
#      echo "ERROR: cannot find $cmat"
#      exit 1;
#    endif
#  end

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo "tksurfer-sess"
  echo ""
  echo "   -s sessid  : session "
  echo "   -hemi hemi : lh or rh";
  echo "   -analysis  analysisname : name of session-level functional analysis";
  echo "   -contrast  contrastname : contrast name"
  echo "   -call      : do all contrasts"
  echo "   -map       mapname      : <sig>, fsig, minsig, iminsig, t"
  echo "   -mapanalysis analysisname : name of session-level functional analysis";
  echo "   -surf surface : default is inflated"
  echo ""
  echo "   -aparc : show automatic parcellation (must alreay exist)"
  echo "   -fthresh fthresh : threshold for color overlay"
  echo "   -fmax    fmax    : saturation threshold for color overlay"
  echo ""
  echo "   -d  sessdir  ..."
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
  echo "------------------------------------------------------------"

exit 1;
#---- Everything below here is printed out as part of help -----#
BEGINHELP


