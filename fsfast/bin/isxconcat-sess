#!/bin/csh -f
# mask
# cesvar, cespct
# 
set VERSION = '$Id: isxconcat-sess,v 1.3 2006/11/28 21:48:13 greve Exp $'

set inputargs = ($argv);

set outvol = ();
set analysis = ();
set contrast = ();
set mapname = ces
set interp = trilin
set fwhm = ();
set paireddiff = 0;
set ToVol = 0;
set ToSurf = 0;
set Force = 0;

# for volume-based only
set talres = 2;
set DoMorph = 0;

# for surface-based only
set hemi = ();
set projfrac = 0
set subject = fsaverage; 

set tmpdir = ();
set cleanup = 1;
set PrintHelp = 0;

if($#argv == 0)  goto usage_exit;
set n = `echo $argv | grep version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;  
  goto usage_exit;
endif

set SessList = `getsesspath $inputargs`;
if($status || $#SessList == 0) then
  echo "ERROR: finding sessions"
  echo "       $SessList" 
  exit 1;
endif

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

## Get functional subdirectory from the info file ##
set infofile = $analysis/analysis.info
if(! -e $infofile) then
  echo "ERROR: cannot find $infofile" 
  exit 1;
endif
set fsd = `cat $infofile | awk '{if($1 == "fsd") print $2}'`;

##### Create a log file ######
set LF = $outvol.log
if(-e $LF) mv $LF $LF.old
echo $LF

echo "isxconcat-sess log file" >> $LF
echo $VERSION >> $LF
id            >> $LF
pwd           >> $LF
echo $0     >> $LF
echo $inputargs  >> $LF
uname -a      >> $LF
date          >> $LF

set StartTime = `date`;
set maplist = ();
foreach sess ($SessList)
  set sessid = `basename $sess`;
  set sessinfo = $sess/session.info
  if(-e $sessinfo) then
    set IsGroup = `grep GroupAverage $sessinfo | wc -l`;
  else
    set IsGroup = 0;
  endif
  if($IsGroup) then
    echo "ERROR: session `basename $sess` is a group analysis."|& tee -a $LF
    echo "This is not allowed with isxconcat-sess."|& tee -a $LF
    exit 1;
  endif

  set reg = $sess/$fsd/register.dat
  if(! -e $reg) then
    echo "ERROR: cannot find $reg"|& tee -a $LF
    exit 1;
  endif

  set condir = $sess/$fsd/$analysis/$contrast
  if(! -e $condir) then
    echo "ERROR: cannot find $condir"|& tee -a $LF
    exit 1;
  endif

  set mapstem = $condir/$mapname
  set ext = `fast_getext $mapstem`
  if($status) then
    echo "$ext"|& tee -a $LF
    exit 1;
  endif
  set map = $mapstem.$ext

  if($#hemi != 0) then
    set mapout = $tmpdir/$sessid-$analysis-$contrast-$mapname-$hemi.mgh
    set cmd = (mri_vol2surf --mov $map --reg $reg --trgsubject $subject)
    set cmd = ($cmd --hemi $hemi --projfrac 0 --interp $interp --noreshape)
    set cmd = ($cmd --o $mapout)
  else
    set mapout = $tmpdir/$sessid-$analysis-$contrast-$mapname-tal.mgh
    set cmd = (mri_vol2vol --mov $map --reg $reg)
    set cmd = ($cmd --o $mapout --no-save-reg --interp $interp)
    if(! $DoMorph) set cmd = ($cmd --tal --talres $talres)
    if($DoMorph)   set cmd = ($cmd --morph)
  endif
  echo "------------------------------------" |& tee -a $LF
  pwd |& tee -a $LF
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
  set maplist = ($maplist $mapout);

end # Loop over sessions

echo "------------------------------------" |& tee -a $LF
set cmd = (mri_concat $maplist --o $outvol)
if($paireddiff) set cmd = ($cmd --paired-diff)
pwd |& tee -a $LF
echo $cmd |& tee -a $LF
$cmd |& tee -a $LF
if($status) exit 1;

if($cleanup) rm -r $tmpdir

# Smooth
if($#fwhm) then
  if($ToVol) then
    set cmd = (mri_fwhm --i $outvol --o $outvol --fwhm $fwhm --smooth-only)
  endif
  if($ToSurf) then
    set cmd = (mris_fwhm --i $outvol --o $outvol --fwhm $fwhm \
      --subject $subject --hemi $hemi)
  endif
  echo "------------------------------------" |& tee -a $LF
  pwd |& tee -a $LF
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif


echo "" | tee -a $LF
echo "" | tee -a $LF
echo "Started at $StartTime" | tee -a $LF
echo "Ended   at `date`"     | tee -a $LF
echo "isxconcat-sess completed" | tee -a $LF
echo " "
echo " "

exit 0;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-o":
      if($#argv == 0) goto arg1err;
      set outvol = $argv[1]; shift;
      breaksw

    case "-a":
    case "-analysis":
      if ( $#argv == 0) goto arg1err;
      set analysis = $argv[1]; shift;
      breaksw

    case "-c":
    case "-contrast":
      if ( $#argv == 0) goto arg1err;
      set contrast = $argv[1]; shift;
      breaksw

    case "-m":
    case "-map":
      if ( $#argv == 0) goto arg1err;
      set mapname = $argv[1]; shift;
      breaksw

    case "-interp":
      if ( $#argv == 0) goto arg1err;
      set interp = $argv[1]; shift;
      breaksw

    case "-fwhm":
      if ( $#argv == 0) goto arg1err;
      set fwhm = $argv[1]; shift;
      breaksw

    case "-talres":
      if ( $#argv == 0) goto arg1err;
      set talres = $argv[1]; shift;
      set ToVol = 1;
      breaksw

    case "-morph":
      set DoMorph = 1;
      set ToVol = 1;
      breaksw

    case "-hemi":
    case "-h":
      if ( $#argv == 0) goto arg1err;
      set hemi = $argv[1]; shift;
      set ToSurf = 1;
      breaksw

    case "-projfrac":
      if ( $#argv == 0) goto arg1err;
      set projfrac = $argv[1]; shift;
      set ToSurf = 1;
      breaksw

    case "-subject":
      if( $#argv == 0) goto arg1err;
      set subject = $argv[1]; shift;
      set ToSurf = 1;
      breaksw

    case "-tmpdir":
      if ( $#argv == 0) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "-force":
      set Force = 1;
      breaksw

    case "-paired-diff"
      set paireddiff = 1;
      breaksw

    case "-debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    case "-cwd":
      breaksw

    case "-g":
    case "-s":
    case "-sf":
    case "-df":
    case "-d":
      # ignore getsesspath arguments 
      shift;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#analysis == 0) then
    echo "ERROR: no analysis specified"
    exit 1;
  endif

  if(0 & $#contrast == 0) then
    echo "ERROR: no contrast specified"
    exit 1;
  endif

  if($#outvol == 0) then
    echo "ERROR: no output  specified"
    exit 1;
  endif

  if($Force) rm -f $outvol

  if(-e $outvol) then
    echo "ERROR: output $outvol exists, delete or rename or -force"
    exit 1;
  endif

  if($ToSurf == 0 && $ToVol == 0) set ToVol = 1;

  if($ToSurf && $ToVol) then
    echo "ERROR: cannot convert to surface and volume"
    exit 1;
  endif

  if("$interp" != "trilin" && "$interp" != "nearest") then
    echo "ERROR: interp is $interp, must be trilinear or nearest"
    exit 1;
  endif

  if($talres != 1 && $talres != 2) then
    echo "ERROR: talres = $talres, must be 1 or 2"
    exit 1;
  endif

  if($#hemi) then
    if($hemi != lh && $hemi != rh) then
      echo "ERROR: hemi = $hemi, must be rh or lh"
      exit 1;
    endif
  endif

  set outdir = `dirname $outvol`;
  mkdir -p $outdir
  if($status) then
    echo "ERROR: making $outdir";
    exit 1;
  endif

  if($#tmpdir == 0) set tmpdir = $outdir/tmp-isxconcat-sess
  mkdir -p $tmpdir


goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo " "
  echo "USAGE: isxconcat-sess"
  echo ""
  echo "   -a analysisname  : session-level functional analysis name"
  echo "   -c contrast     : contrast (optional)"
  echo "   -m mapname      : stem (def is ces)"
  echo "   -o outvol"
  echo ""
  echo "   -interp method  : trilinear (def) or nearest"
  echo "   -fwhm fwhm      : smooth by fwhm"
  echo "   -paired-diff    : compute 1-2, 3-4, etc"
  echo ""
  echo "  Volume-based options:"
  echo "   -talres res     : 1 or 2 mm"
  echo ""
  echo "  Surface-based options:"
  echo "   -hemi hemisphere : for surface-based analysis (lh or rh)";
  echo "   -projfrac frac   : sample frac into surface"
  echo "   -subject subject : sample to subject's surface (def fsaverage)"
  echo ""
  echo "   -sf sessidfile  ..."
  echo "   -df srchdirfile ..."
  echo "   -s  sessid      ..."
  echo "   -d  srchdir     ..."
  echo ""
  echo "   -help"
  echo "   -debug"
  echo "   -force         : overwrite output (if it exists)"
  echo "   -tmpdir dir    : use this dir for temporary storage (implies -nocleanup)"
  echo "   -nocleanup     : do not delete tmpdir"
  echo "   -version       : print version and exit"
  echo " "

  if(! $PrintHelp ) exit 1;

  echo " "
  echo "$VERSION "
  echo " "

  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

Resamples a group of FS-FAST first-level analyses into a common space,
either volume- or surface-based, and concatenates all the sessions
together into one multi-frame file suitable for use with
mri_glmfit. This script is partially redundant with mris_preproc.

