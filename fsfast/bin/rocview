#!/bin/csh -f
# rocview
#
# $Id: rocview,v 1.4 2003/04/21 01:38:43 greve Exp $

set VERSION = '$Id: rocview,v 1.4 2003/04/21 01:38:43 greve Exp $';
set inputargs = ($argv);

set fprvolid = ();
set tprvolid = ();
set maskvolid = ();
set roi = ();
set frame = ();
set mfile = ();
set monly = 0;
set outfile = ();
set inout = 0;    # tpr inside mask/roi, fpr outside mask/roi
set noview = 0;
set deltap = .001;
set alphamin = 0;
set alphamax = .1;
set plotloglog = 1;
set nmin = 0;
set cutends = 0;
set tailtype = 'unsigned';
set polarity = 0;
set log10p = 1;
set zstat = 0;
set fmtimg = 0;

if($#argv == 0) then
  goto usage_exit;
  exit 1;
endif

set n = `echo $argv | grep version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

set PWD = `getpwdcmd`;
if($status) exit 1;

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

## Set path for matlab file ##
if(! $monly) then
  set MLF = "/tmp/sxa_$$.m"
  set QuitOnError = 1;
else
  set MLF = $mfile;
  set QuitOnError = 0;
endif

if($monly || $noview) then
  set wait = 0;
else
  set wait = 1;
endif

echo matlab file is $MLF 
rm -f $MLF;
echo "% Matlab file for rocview `date`" >> $MLF
echo "% This file may be deleted "     >> $MLF
echo "% $MLF"                          >> $MLF;
echo "global QuitOnError;"             >> $MLF;
echo "QuitOnError = $QuitOnError;"     >> $MLF;

#----------------------------------------#
tee -a > /dev/null $MLF  <<EOF

fprvolid = splitstring('$fprvolid');
tprvolid = '$tprvolid';
maskvolid = splitstring('$maskvolid');
frame = [$frame];
outfile = '$outfile';
inout = $inout;
noview = $noview;
wait = $wait;
deltap   = $deltap;
alphamin = $alphamin;
alphamax = $alphamax;
nmin     = $nmin;
cutends  = $cutends;
plotloglog = $plotloglog;
tailtype = '$tailtype';
polarity = $polarity;
log10p = $log10p;
zstat  = $zstat;
fmtimg = $fmtimg;

if(size(maskvolid,1)==1)
  fprintf('Loading %s\n',maskvolid);
  if(fmtimg) maskvol = fast_ldanalyze(maskvolid);
  else       maskvol = fmri_ldbvolume(maskvolid);
  end

  maskvol = maskvol(:,:,:,1);
  maskvol = maskvol > 0.5;
  if(inout) maskvol = ~maskvol; end
  if(cutends)
    fprintf('Cutting ends\n');
    maskvol(1,:,:) = 0;
    maskvol(size(maskvol,1),:,:) = 0;
  end
  indmask = find(maskvol == 1);
  fprintf('nmask = %d\n',length(indmask));
else
  indmask = [];
end

if(~isempty(fprvolid))
  fprvol = 0;
  for nth = 1:size(fprvolid,1)

    nthfprvolid = deblank(fprvolid(nth,:));
    fprintf('Loading %s\n',nthfprvolid);
    if(fmtimg) nthfprvol = fast_ldanalyze(nthfprvolid);
    else       nthfprvol = fmri_ldbvolume(nthfprvolid);
    end

    if(~isempty(frame)) nthfprvol = nthfprvol(:,:,:,frame+1); end

    sz = size(nthfprvol);
    if(length(sz) == 3) sz = [sz 1]; end
    nthfprvol = reshape(nthfprvol, [prod(sz(1:3)) sz(4)]);
    if(size(maskvolid,1)==1)
      if(~isempty(indmask)) nthfprvol = nthfprvol(indmask); end
    end
    if(size(maskvolid,1) > 1)
      nthmaskvolid = deblank(maskvolid(nth,:));
      if(fmtimg) maskvol = fast_ldanalyze(maskvolid);
      else       maskvol = fmri_ldbvolume(nthmaskvolid);
      end
      if(isempty(maskvol)) return; end
      maskvol = maskvol(:,:,:,1);
      maskvol = maskvol > 0.5;
      if(inout) maskvol = ~maskvol; end
      if(cutends)
        fprintf('Cutting ends\n');
        maskvol(1,:,:) = 0;
        maskvol(size(maskvol,1),:,:) = 0;
      end
      indmask = find(maskvol == 1);
      fprintf('   %d %s   %d\n',nth,nthmaskvolid,length(indmask));
      if(~isempty(indmask)) nthfprvol = nthfprvol(indmask); end
    end
    fprvol = [fprvol; nthfprvol];
  end

  fprintf('nsamples = %d\n',length(fprvol));

  if(polarity == 1)
    ind = find(sign(fprvol) >= 0);
    fprvol = fprvol(ind);
    fprintf('INFO: removing %d negative polarity voxels\n',length(ind));
  end
  if(polarity == -1)
    ind = find(sign(fprvol) <= 0);
    fprvol = fprvol(ind);
    fprintf('INFO: removing %d positive polarity voxels\n',length(ind));
  end

  if(log10p) fprvol = (10.^(-abs(fprvol))); end
  if(zstat)  fprvol = abs(fast_z2p(fprvol)); end

  if(strcmp(tailtype,'signed'))
    fprvol = 2*fprvol;
  end

  [pdf alpha nx fpr ] = ComputePDF(reshape1d(fprvol),alphamin,alphamax,deltap);
  %[fpr alpha] = ComputeFPR(reshape1d(fprvol),deltap);

  if(~isempty(outfile))
    fid = fopen(outfile,'w');
    if(fid == -1)
      fprintf('ERROR: cannot open %s\n',outfile);
      if(QuitOnError) quit; end
      return;
    end
    fprintf(fid,'%10.9f %10.9f  %5d\n', [alpha' fpr' nx']'); 
    fclose(fid);
  end

  if(nmin > 0)
    ind = find(nx >= nmin);
    alpha = alpha(ind);
    fpr   = fpr(ind);
  end
  
  h1 = figure;
  if(plotloglog)
    loglog(alpha,alpha,'g-.',alpha,fpr,'r+-');
  else
    plot(alpha,alpha,'g-.',alpha,fpr,'r+-');
  end
  axis([alphamin alphamax alphamin alphamax]);
  title(fprvolid(1,:))
  if(wait) uiwait(h1); end
  fprintf(0,'\n');
  if(QuitOnError) quit; end

end

if(~isempty(tprvolid))
  fprintf('Loading %s\n',tprvolid);
  tprvol = fmri_ldbvolume(tprvolid);
  tprvol = sign(tprvol).* (10.^(-abs(tprvol)));
  [tpr alpha] = ComputeFPR(reshape1d(tprvol));
end

qoe;

EOF
#----------------------------------------#

if(! $monly ) then
  echo "------------------------------------------" 
  echo "------- matlab output --------------------" 
  cat $MLF | matlab -nosplash
  echo "------------------------------------------" 
  rm $MLF
endif


exit
############--------------##################
############--------------##################

############--------------##################
parse_args:

set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-fpr":
      if ( $#argv == 0) goto arg1err;
      set fprvolid = ($fprvolid $argv[1]); shift;
      breaksw

    case "-tpr":
      if ( $#argv == 0) goto arg1err;
      set tprvolid = $argv[1]; shift;
      breaksw

    case "-frame":
      if ( $#argv == 0) goto arg1err;
      set frame = $argv[1]; shift;
      breaksw

    case "-mask":
      if ( $#argv == 0) goto arg1err;
      set maskvolid = ($maskvolid $argv[1]); shift;
      breaksw

    case "-roi":
      if ( $#argv < 6) then
        echo "ERROR: -roi requires 6 arguments"
        exit 1;
      endif
      set roi = $argv[1-6];
      shift;shift;shift;shift;shift;shift;
      breaksw

    case "-inout":
      set inout = 1;
      breaksw

    case "-cutends":
      set cutends = 1;
      breaksw

    case "-noview":
      set noview = 1;
      breaksw

    case "-img":
      set fmtimg = 1;
      breaksw

    case "-deltap":
      if ( $#argv == 0) goto arg1err;
      set deltap = $argv[1]; shift;
      breaksw

    case "-nmin":
      if ( $#argv == 0) goto arg1err;
      set nmin = $argv[1]; shift;
      breaksw

    case "-min":
      if ( $#argv == 0) goto arg1err;
      set alphamin = $argv[1]; shift;
      breaksw

    case "-max":
      if ( $#argv == 0) goto arg1err;
      set alphamax = $argv[1]; shift;
      breaksw

    case "-o":
      if ( $#argv == 0) goto arg1err;
      set outfile = $argv[1]; shift;
      breaksw

    case "-monly":
      if ( $#argv == 0) goto arg1err;
      set mfile = $argv[1]; shift;
      set monly = 1;
      breaksw

    case "-signed":
      set tailtype = 'signed';
      breaksw

    case "-unsigned":
      set tailtype = 'unsigned';
      breaksw

    case "-polarity":
      if ( $#argv == 0) goto arg1err;
      set polarity = $argv[1]; shift;
      breaksw

    case "-pvals"
      set log10p = 0;
      breaksw

    case "-zstat"
      set log10p = 0;
      set zstat = 1;
      breaksw

    case "-log":
      set plotloglog = 1; 
      breaksw

    case "-nolog":
      set plotloglog = 0; 
      breaksw

    case "-debug":
      set verbose = 1; 
      set echo = 1;
      breaksw

    case "-umask":
      if ( $#argv == 0) goto arg1err;
      umask $1; shift;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized.
      echo $cmdline
      exit 1
      breaksw
  endsw

end
goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#fprvolid == 0 && $#tprvolid == 0) then
    echo "ERROR: must specify an input volume (fpr or tpr or both)";
    exit 1
  endif

  if($inout && $#maskvolid == 0 && $#roi == 0) then
    echo "ERROR: -inout needs a mask or roi"
    exit 1;
  endif

  if($inout && $#fprvolid != 0 && $#tprvolid != 0) then
    echo "ERROR: cannot use -inout with fpr and tpr";
    exit 1
  endif

  if($#maskvolid != 0 && $#maskvolid != 1 && $#maskvolid != $#fprvolid) then
    echo "ERROR: when spec more than one mask, the number must"
    echo "       be the same as the number of fpr vols"
    exit 1;
  endif
goto check_params_return;
############--------------##################


############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

#--------------------------------------------------------------------#
usage_exit:
  echo "USAGE: "
  echo "  rocview"
  echo "   -fpr fprvolid"
  echo "   -tpr tprvolid"
  echo "   -frame frameno (zero-based)"
  echo "   -mask maskvolid"
  echo "   -roi slc1 row1 col1 slc2 row2 col2"
  echo "   -inout"
  echo "   -noview"
  echo "   -nolog"
  echo "   -deltap dp"
  echo "   -nmin n : each bin must have n samples to be displayed"
  echo "   -max alphamax"
  echo "   -o outfile"
  echo "   -cutends"

  echo "   -monly mfile"
  echo "   -umask umask          : set unix file permission mask"
  echo "   -version              : print version and exit"
exit 1;
#--------------------------------------------------------------------#
