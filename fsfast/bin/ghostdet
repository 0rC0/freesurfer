#!/bin/csh -f 

set VERSION = '$Id: ghostdet,v 1.3 2004/05/06 18:33:42 greve Exp $';
set inputargs = ($argv);

set instem   = ();
set maskstem = ();
set outdir   = ();
set outmaskstem = ();
set sigstem  = ();
set betastem = ();
set rvarstem = ();
set sumfile  = ();
set gprfile  = (); # ghost-positive rate 
set maskthresh = 0.1;
set allowoverlap = 0;
set pedim = 2; # coldim, ie, row-to-row
set synth = 0;
set inmgh = 0;
set monly = 0;

set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

##### Create a log file ######
set logdir = $outdir/log;
mkdir -p $logdir
if(! -e $logdir) then
  echo "WARNING: could not create $logdir"
  set LF = /dev/null
else
  set LF = $logdir/ghostdet.log
  if(-e $LF) mv $LF $LF.old
endif
echo "--------------------------------------------------------------"
echo "ghostdet logfile is $LF"
echo "--------------------------------------------------------------"

echo "ghostdet log file" >> $LF
echo $VERSION | tee -a $LF
pwd           | tee -a $LF
echo $0       | tee -a $LF
echo $inputargs | tee -a $LF
uname -a      >> $LF
date          >> $LF

set StartTime = `date`;

if(! $monly) set MLF = $outdir/ghostdet.m
rm -f $MLF
  #---------------------------------------------#
tee -a > /dev/null $MLF  <<EOF
instem   = '$instem';
inmgh    = $inmgh;
maskstem = '$maskstem';
outmaskstem = '$outmaskstem';
sigstem  = '$sigstem';
betastem = '$betastem';
rvarstem = '$rvarstem';
sumfile  = '$sumfile';
gprfile  = '$gprfile';
maskthresh = $maskthresh;
allowoverlap = $allowoverlap;
pedim        = $pedim;
synth        = $synth;

fprintf('Loading %s\n',instem);
if(~inmgh)
  [f mristruct] = fast_ldbslice(instem);
  if(isempty(f))
    fprintf('ERROR: cannot load %s\n',instem);
    return;
  end
else
  [f M mr_params Mdc] = load_mgh(instem);
  if(isempty(f))
    fprintf('ERROR: cannot load %s\n',instem);
    return;
  end
  f = permute(f,[2 1 3 4]);
  [nr nc ns nf] = size(f);
  mristruct.voldim = [nr nc ns];
  mristruct.nframes = nf;
  mristruct.volres = sqrt(sum(M(1:3,1:3).^2));
  mristruct.T = M;
end


[nr nc ns nf] = size(f);
nv = nr*nc*ns;
fmn = mean(f,4);
fmnglobal = mean(reshape1d(fmn));
fzmask = (fmn==0);

% Load or create the brain mask
if(~isempty(maskstem))
  fprintf('Loading mask %s\n',maskstem);
  brain = fast_ldbslice(maskstem);
  if(isempty(brain))
    fprintf('ERROR: cannot find %s\n',maskstem);
    return;
  end
else
  brain = fmn > maskthresh*fmnglobal;
end
indbrain = find(brain);

% Compute corresponding voxels in the ghost
indghost = indbrain2ghost(size(brain),indbrain,pedim);

% Remove voxels in ghost that are 0 (equiv: keep voxels 
% that are non-zero).
indgnz = find(fmn(indghost) > eps);
indghost = indghost(indgnz);

% Remap the remaining ghost voxels back to the brain. 
% This may remove some voxels from the inside of the
% brain corresponding to the edge of the volume where
% the ghost may be zero.
indbrain = indbrain2ghost(size(brain),indghost,pedim);

% Now remake the actual masks
brain = zeros(nr, nc, ns);
brain(indbrain) = 1;
ghost = zeros(nr, nc, ns);
ghost(indghost) = 1;

nbrain = length(indbrain);
fprintf('nbrain = %d (%g%%)\n',nbrain,100*nbrain/nv);

% Voxels that ghost from brain to nonbrain
indbraintoair = find(brain & ~ghost);
nbraintoair = length(indbraintoair);

% Voxels that ghost from nonbrain to brain
indairtobrain = find(~brain & ghost);

% Voxels that map from brain to brain
indbraintobrain = find(brain & ghost);

% Voxels that are in neither brain nor ghost
indnothing = find(~brain & ~ghost);

% Reshape to nframes by nvoxels
f = fast_vol2mat(f);

% Compute ghost intensity suppression based on only those 
% voxels that map from brain to air
brainmean = mean(reshape1d(f(:,indbraintoair)));
ghostmean = mean(reshape1d(f(:,indairtobrain)));
nothingmean = mean(reshape1d(f(:,indnothing)));
gsr = brainmean/ghostmean;% Ghost suppression ratio
nsr = brainmean/nothingmean;% Nothing suppression ratio
fprintf('mean: brain = %g, ghost = %g, GSR = %g, NSR = %g\n',...
    brainmean,ghostmean,gsr,nsr);

% Use ghost voxel waveforms to predict the waveform in the brain,
% use quadradic (2) detrending. Bigger betas are worse.
y = f(:,indbrain);
x = f(:,indghost);
if(synth)
  fprintf('Synthsizing raw data\n');
  x = randn(size(x));
  y = randn(size(y));
end

fprintf('Performing estimation\n');
[beta rvar t tsig] = fast_vvglm(y,x,2);

% Put the sig values into a volume. Make the voxels
% that map from brain-to-air pos. Those that map
% from brain-to-brain negative.
tsigvol = zeros(nr,nc,ns);
tsigvol(indbrain) = -log10(tsig);
tsigvol(indbraintobrain) = -tsigvol(indbraintobrain);

if(~isempty(gprfile))
  % Treat like finding false positives, 
  %  the "ghost" positive rate (GPR)
  % Only use voxels that map from brain to air
  tsigtmp = 10.^(-abs(tsigvol(indbraintoair)));
  [pdf alpha nxhist gpr] = ComputePDF(tsigtmp,.001,1,.001);
  fp = fopen(gprfile,'w');
  if(fp == -1)
    fpritnf('ERROR: could not open %s\n',gprfile);
    return;
  end
  fprintf(fp,'%g %g\n',[alpha; gpr]);
  fclose(fp);
end

% Compute the GPR for a single point along the curve
% to save in the summary file
pthresh = .001;
nover = length(find(tsigvol(indbraintoair) > -log10(pthresh)));
pover = nover/nbraintoair;
pctover = 100*pover;
gprthresh = pover/pthresh;
gprsig = 1-binomialcdf(nover,nbraintoair,pthresh);

fprintf('pthresh = %g, nover = %d (%g%%), gpr = %g, sig=%g\n',...
    pthresh,nover,pctover,gprthresh,gprsig);

if(~isempty(betastem))
  betavol = zeros(nr,nc,ns);
  betavol(indbrain) = beta;
  fast_svbslice(betavol,betastem,-1,'',mristruct);
end

if(~isempty(sigstem))
  fast_svbslice(tsigvol,sigstem,-1,'',mristruct);
end

if(~isempty(rvarstem))
  rvarvol = zeros(nr,nc,ns);
  rvarvol(indbrain) = rvar;
  fast_svbslice(rvarvol,rvarstem,-1,'',mristruct);
end

if(~isempty(outmaskstem))
  outmask = zeros(size(brain));
  outmask(indbraintoair) = 1;
  outmask(indairtobrain) = 2;
  indbrainandghost = find(brain & ghost);
  outmask(indbrainandghost) = 3;
  fast_svbslice(outmask,outmaskstem,-1,'',mristruct);
end

if(~isempty(sumfile))
  fp = fopen(sumfile,'w');
  if(fp == -1)
    fprintf('ERROR: could not open %s\n',sumfile);
    return;
  end
  fprintf(fp,'date           %s\n',date);
  fprintf(fp,'pwd            %s\n',pwd);
  fprintf(fp,'instem         %s\n',instem);
  fprintf(fp,'inmgh          %d\n',inmgh);
  fprintf(fp,'maskstem       %s\n',maskstem);
  fprintf(fp,'outmaskstem    %s\n',outmaskstem);
  fprintf(fp,'pedim          %d\n',pedim);
  fprintf(fp,'allowoverlap   %d\n',allowoverlap);
  fprintf(fp,'synth          %d\n',synth);
  fprintf(fp,'betastem       %s\n',betastem);
  fprintf(fp,'sigstem        %s\n',sigstem);
  fprintf(fp,'rvarstem       %s\n',rvarstem);
  fprintf(fp,'gprfile        %s\n',gprfile);
  fprintf(fp,'maskthresh     %g\n',maskthresh);
  fprintf(fp,'nbrain         %d\n',nbrain);
  fprintf(fp,'pctbrain       %g\n',100*nbrain/nv);
  fprintf(fp,'nbraintoair    %d\n',nbraintoair);
  fprintf(fp,'brainmean      %g\n',brainmean);
  fprintf(fp,'ghostmean      %g\n',ghostmean);
  fprintf(fp,'pthresh        %g\n',pthresh);
  fprintf(fp,'pover          %g\n',pover);
  fprintf(fp,'pctover        %g\n',pctover);
  fprintf(fp,'nover          %d\n',nover);
  fprintf(fp,'gpr            %g\n',gprthresh);
  fprintf(fp,'gsr            %g\n',gsr);
  fprintf(fp,'nsr            %g\n',nsr);
  fprintf(fp,'gprsig         %g\n',-log10(gprsig));
  %fprintf(fp,'\n',);
  fclose(fp);

end

fprintf('ghostdet matlab done\n');

return;

EOF
  #---------------------------------------------#

if(! $monly) then
  cat $MLF >> $LF
  cat $MLF | matlab -display iconic -nojvm -nosplash | & tee -a $LF
  echo "" | & tee -a $LF
endif

echo "Started at $StartTime" |& tee -a $LF
echo "Ended   at `date`"     |& tee -a $LF

echo "ghostdet done"


exit 0

##############################################################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--i":
      if ( $#argv == 0) goto arg1err;
      set instem = $argv[1]; shift;
      breaksw

    case "--imgh":
      set inmgh = 1;
      breaksw

    case "--m":
      if ( $#argv == 0) goto arg1err;
      set maskstem = $argv[1]; shift;
      breaksw

    case "--om":
      if ( $#argv == 0) goto arg1err;
      set outmaskstem = $argv[1]; shift;
      breaksw

    case "--mthresh":
      if ( $#argv == 0) goto arg1err;
      set maskthresh = $argv[1]; shift;
      breaksw

    case "--p":
      if ( $#argv == 0) goto arg1err;
      set sigstem = $argv[1]; shift;
      breaksw

    case "--b":
      if ( $#argv == 0) goto arg1err;
      set betastem = $argv[1]; shift;
      breaksw

    case "--v":
      if ( $#argv == 0) goto arg1err;
      set rvarstem = $argv[1]; shift;
      breaksw

    case "--s":
      if ( $#argv == 0) goto arg1err;
      set sumfile = $argv[1]; shift;
      breaksw

    case "--o":
      if ( $#argv == 0) goto arg1err;
      set outdir = $argv[1]; shift;
      set outmaskstem  = $outdir/mask
      set sigstem  = $outdir/sig
      set betastem = $outdir/beta
      set rvarstem = $outdir/rvar
      set sumfile  = $outdir/ghost.sum
      set gprfile  = $outdir/gpr.dat
      breaksw

    case "--monly":
      if ( $#argv == 0) goto arg1err;
      set monly = 1;
      set MLF = $argv[1]; shift;
      breaksw

    case "--pedim":
      if ( $#argv == 0) goto arg1err;
      set pedim = $argv[1]; shift;
      breaksw

    case "--overlap":
      set allowoverlap = 1;
      breaksw

    case "--synth":
      set synth = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1; # turns on terminal echoing
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#instem == 0) then
    echo "ERROR: no input specified"
    exit 1;
  endif

  set tmp = $instem.bhdr
  if(! -e $tmp) then
    echo "ERROR: cannot find $tmp"
    exit 1;
  endif

  if($#sigstem == 0 && $#sigstem == 0 && \
     $#sigstem == 0 && $#sumfile) then
    echo "ERROR: no output specified"
    exit 1;
  endif

  if($#sigstem != 0) then
    set outdir = `dirname $sigstem`;
    mkdir -p $outdir
  endif

  if($#betastem != 0) then
    set outdir = `dirname $betastem`;
    mkdir -p $outdir
  endif

  if($#rvarstem != 0) then
    set outdir = `dirname $rvarstem`;
    mkdir -p $outdir
  endif

  if($#sumfile != 0) then
    set outdir = `dirname $sumfile`;
    mkdir -p $outdir
  endif

  if($#gprfile != 0) then
    set outdir = `dirname $gprfile`;
    mkdir -p $outdir
  endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "USAGE: ghostdet"
  echo ""
  echo "  --i instem "
  echo "  --imgh : load input as mgh file"
  echo "  --m maskstem"
  echo "  --om outmaskstem"
  echo "  --mthresh maskthresh"
  echo "  --p sigstem "
  echo "  --b betastem "
  echo "  --v rvarstem "
  echo "  --s sumfile "
  echo "  --gpr gprfile "
  echo "  --overlap : allow overlap "
  echo "  --pedim dim : 2=col (default) 1=row "
  echo "  --synth "
  echo ""

  if(! $PrintHelp) exit 1;

  echo $VERSION

  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'

exit 1;


#---- Everything below here is printed out as part of help -----#
BEGINHELP

Help!

