#!/bin/csh -f 

set VERSION = '$Id: ghostdet,v 1.2 2004/04/28 03:49:50 greve Exp $';
set inputargs = ($argv);

set instem   = ();
set maskstem = ();
set outdir   = ();
set sigstem  = ();
set betastem = ();
set rvarstem = ();
set sumfile  = ();
set gprfile  = (); # ghost-positive rate 
set maskthresh = 0.1;
set allowoverlap = 0;
set pedim = 2; # coldim, ie, row-to-row
set synth = 0;
set monly = 0;

set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

##### Create a log file ######
set logdir = $outdir/log;
mkdir -p $logdir
if(! -e $logdir) then
  echo "WARNING: could not create $logdir"
  set LF = /dev/null
else
  set LF = $logdir/ghostdet.log
  if(-e $LF) mv $LF $LF.old
endif
echo "--------------------------------------------------------------"
echo "ghostdet logfile is $LF"
echo "--------------------------------------------------------------"

echo "ghostdet log file" >> $LF
echo $VERSION | tee -a $LF
pwd           | tee -a $LF
echo $0       | tee -a $LF
echo $inputargs | tee -a $LF
uname -a      >> $LF
date          >> $LF

set StartTime = `date`;

if(! $monly) set MLF = $outdir/ghostdet.m
rm -f $MLF
  #---------------------------------------------#
tee -a > /dev/null $MLF  <<EOF
instem   = '$instem';
maskstem = '$maskstem';
sigstem  = '$sigstem';
betastem = '$betastem';
rvarstem = '$rvarstem';
sumfile  = '$sumfile';
gprfile  = '$gprfile';
maskthresh = $maskthresh;
allowoverlap = $allowoverlap;
pedim        = $pedim;
synth        = $synth;

fprintf('Loading %s\n',instem);
[f mristruct] = fast_ldbslice(instem);
if(isempty(f))
  fprintf('ERROR: cannot find %s\n',instem);
  return;
end
[nr nc ns nf] = size(f);
nv = nr*nc*ns;
fmn = mean(f,4);
fmnglobal = mean(reshape1d(fmn));
fzmask = (fmn==0);

% Load or create the brain mask
if(~isempty(maskstem))
  fprintf('Loading mask %s\n',maskstem);
  brain = fast_ldbslice(maskstem);
  if(isempty(brain))
    fprintf('ERROR: cannot find %s\n',maskstem);
    return;
  end
else
  brain = fmn > maskthresh*fmnglobal;
end
indbrain = find(brain);
nbrain = length(indbrain);

fprintf('nbrain = %d (%g%%)\n',nbrain,100*nbrain/nv);

ghost = fast_ghostmask(brain);
%indghost = find(ghost);

% Find voxels in the brain that are not in the ghost
if(allowoverlap) indbrainnotghost = find(brain);
else             indbrainnotghost = find(brain & ~ghost);
end
[rbrain cbrain sbrain] = ind2sub(size(brain),indbrainnotghost);

% For book keeping, only count the ghost voxels that are
% not zero. This should be done better.
indbrainnotghost2 = find(brain & ~ghost & ~fzmask);
nbrainnotghost = length(indbrainnotghost2);
fprintf('nbrainnotghost = %d\n',nbrainnotghost);

% Compute the corresponding locations in the ghost
if(pedim==2)
  % Phase encode is in column direction, ie, from row-to-row
  rghost = rbrain+round(nr/2);
  indtmp = find(rghost>nr);
  rghost(indtmp) = rghost(indtmp) - nr;
  cghost = cbrain;
else
  % Phase encode is in row direction, ie, from col-to-col
  cghost = cbrain+round(nc/2);
  indtmp = find(cghost>nc);
  cghost(indtmp) = cghost(indtmp) - nc;
  rghost = rbrain;
end
indghostnotbrain = sub2ind(size(brain),rghost,cghost,sbrain);

% Use ghost voxel waveforms to predict the waveform in the brain,
% use quadradic (2) detrending. Bigger betas are worse.
f = reshape(f,[nv nf])'; %'
y = f(:,indbrainnotghost);
x = f(:,indghostnotbrain);
if(synth)
  fprintf('Synthsizing raw data\n');
  x = randn(size(x));
  y = randn(size(y));
end
[beta rvar t tsig] = fast_vvglm(y,x,2);

if(~isempty(gprfile))
  % Treat like finding false positives, 
  %   the "ghost" positive rate (GPR)
  ind = find(abs(tsig) ~= 1);
  [pdf alpha nxhist gpr] = ComputePDF(tsig(ind),.001,1,.001);
  fp = fopen(gprfile,'w');
  if(fp == -1)
    fpritnf('ERROR: could not open %s\n',gprfile);
    return;
  end
  fprintf(fp,'%g %g\n',[alpha; gpr]);
  fclose(fp);
end

pthresh = .001;
nover = length(find(abs(tsig) < pthresh));
pover = nover/nbrainnotghost;
pctover = 100*pover;
fprintf('pthresh = %g, nover = %d (%g%%)\n',...
    pthresh,nover,pctover);

% Compute average ghost intensity suppression
brainmean = mean(reshape1d(y));
ghostmean = mean(reshape1d(x));
fprintf('mean: brain = %g, ghost = %g, brain/ghost = %g\n',...
    brainmean,ghostmean,brainmean/ghostmean);

if(~isempty(betastem))
  betavol = zeros(nr,nc,ns);
  betavol(indbrainnotghost) = beta;
  fast_svbslice(betavol,betastem,-1,'',mristruct);
end

if(~isempty(sigstem))
  tsigvol = zeros(nr,nc,ns);
  tsigvol(indbrainnotghost) = -log10(tsig); % pos for brain
  %tsigvol(indghostnotbrain) = +log10(tsig); % neg for ghost
  fast_svbslice(tsigvol,sigstem,-1,'',mristruct);
end

if(~isempty(rvarstem))
  rvarvol = zeros(nr,nc,ns);
  rvarvol(indbrainnotghost) = rvar;
  fast_svbslice(rvarvol,rvarstem,-1,'',mristruct);
end

if(~isempty(sumfile))
  fp = fopen(sumfile,'w');
  if(fp == -1)
    fprintf('ERROR: could not open %s\n',sumfile);
    return;
  end
  fprintf(fp,'date           %s\n',date);
  fprintf(fp,'pwd            %s\n',pwd);
  fprintf(fp,'instem         %s\n',instem);
  fprintf(fp,'maskstem       %s\n',maskstem);
  fprintf(fp,'pedim          %d\n',pedim);
  fprintf(fp,'allowoverlap   %d\n',allowoverlap);
  fprintf(fp,'synth          %d\n',synth);
  fprintf(fp,'betastem       %s\n',betastem);
  fprintf(fp,'sigstem        %s\n',sigstem);
  fprintf(fp,'rvarstem       %s\n',rvarstem);
  fprintf(fp,'gprfile        %s\n',gprfile);
  fprintf(fp,'maskthresh     %g\n',maskthresh);
  fprintf(fp,'nbrain         %d\n',nbrain);
  fprintf(fp,'pctbrain       %g\n',100*nbrain/nv);
  fprintf(fp,'nbrainnotghost %d\n',nbrainnotghost);
  fprintf(fp,'brainmean      %g\n',brainmean);
  fprintf(fp,'ghostmean      %g\n',ghostmean);
  fprintf(fp,'rbrainghost    %g\n',brainmean/ghostmean);
  fprintf(fp,'pthresh        %g\n',pthresh);
  fprintf(fp,'pover          %g\n',pover);
  fprintf(fp,'gpr            %g\n',pover/pthresh);
  fprintf(fp,'pctover        %g\n',pctover);
  fprintf(fp,'nover          %d\n',nover);
  %fprintf(fp,'\n',);
  fclose(fp);

end

fprintf('ghostdet matlab done\n');

return;

EOF
  #---------------------------------------------#

if(! $monly) then
  cat $MLF >> $LF
  cat $MLF | matlab -display iconic -nojvm -nosplash | & tee -a $LF
  echo "" | & tee -a $LF
endif

echo "Started at $StartTime" |& tee -a $LF
echo "Ended   at `date`"     |& tee -a $LF

echo "ghostdet done"


exit 0

##############################################################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--i":
      if ( $#argv == 0) goto arg1err;
      set instem = $argv[1]; shift;

      breaksw

    case "--m":
      if ( $#argv == 0) goto arg1err;
      set maskstem = $argv[1]; shift;
      breaksw

    case "--mthresh":
      if ( $#argv == 0) goto arg1err;
      set maskthresh = $argv[1]; shift;
      breaksw

    case "--p":
      if ( $#argv == 0) goto arg1err;
      set sigstem = $argv[1]; shift;
      breaksw

    case "--b":
      if ( $#argv == 0) goto arg1err;
      set betastem = $argv[1]; shift;
      breaksw

    case "--v":
      if ( $#argv == 0) goto arg1err;
      set rvarstem = $argv[1]; shift;
      breaksw

    case "--s":
      if ( $#argv == 0) goto arg1err;
      set sumfile = $argv[1]; shift;
      breaksw

    case "--o":
      if ( $#argv == 0) goto arg1err;
      set outdir = $argv[1]; shift;
      set sigstem  = $outdir/sig
      set betastem = $outdir/beta
      set rvarstem = $outdir/rvar
      set sumfile  = $outdir/ghost.sum
      set gprfile  = $outdir/gpr.dat
      breaksw

    case "--monly":
      if ( $#argv == 0) goto arg1err;
      set monly = 1;
      set MLF = $argv[1]; shift;
      breaksw

    case "--pedim":
      if ( $#argv == 0) goto arg1err;
      set pedim = $argv[1]; shift;
      breaksw

    case "--overlap":
      set allowoverlap = 1;
      breaksw

    case "--synth":
      set synth = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1; # turns on terminal echoing
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#instem == 0) then
    echo "ERROR: no input specified"
    exit 1;
  endif

  set tmp = $instem.bhdr
  if(! -e $tmp) then
    echo "ERROR: cannot find $tmp"
    exit 1;
  endif

  if($#sigstem == 0 && $#sigstem == 0 && \
     $#sigstem == 0 && $#sumfile) then
    echo "ERROR: no output specified"
    exit 1;
  endif

  if($#sigstem != 0) then
    set outdir = `dirname $sigstem`;
    mkdir -p $outdir
  endif

  if($#betastem != 0) then
    set outdir = `dirname $betastem`;
    mkdir -p $outdir
  endif

  if($#rvarstem != 0) then
    set outdir = `dirname $rvarstem`;
    mkdir -p $outdir
  endif

  if($#sumfile != 0) then
    set outdir = `dirname $sumfile`;
    mkdir -p $outdir
  endif

  if($#gprfile != 0) then
    set outdir = `dirname $gprfile`;
    mkdir -p $outdir
  endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "USAGE: ghostdet"
  echo ""
  echo "  --i instem "
  echo "  --m maskstem"
  echo "  --mthresh maskthresh"
  echo "  --p sigstem "
  echo "  --b betastem "
  echo "  --v rvarstem "
  echo "  --s sumfile "
  echo "  --gpr gprfile "
  echo "  --overlap : allow overlap "
  echo "  --pedim dim : 2=col (default) 1=row "
  echo "  --synth "
  echo ""

  if(! $PrintHelp) exit 1;

  echo $VERSION

  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'

exit 1;


#---- Everything below here is printed out as part of help -----#
BEGINHELP

Help!

