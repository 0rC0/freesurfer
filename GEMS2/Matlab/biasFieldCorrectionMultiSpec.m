lhs = zeros(nrOfChannels*nrOfUsedBasisFuncs);
rhs = zeros(nrOfChannels*nrOfUsedBasisFuncs, 1);
      
for row=1:nrOfChannels
    tmp = squeeze(invCovariances(row,:,1:end));
    if nrOfChannels==1
        tmp = tmp';
    end
    rhs((row-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs]) = ...
            orthoSampleBasisFuncs(:,1:nrOfUsedBasisFuncs)' * ...
            sum((squeeze(weights(:,row,:)) .* sampleData - ...
            sampleClassification(:,1:end-1) * ...
            (tmp .* means(:,1:end-1))'), 2);
    for col=1:nrOfChannels
        if (col>=row)
            lhs((row-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs], ...
                (col-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs]) = ...
                orthoSampleBasisFuncs(:,1:nrOfUsedBasisFuncs)' * ...
                ((weights(:,row,col) * ones(1, nrOfUsedBasisFuncs)) .* ...
                sampleBasisFuncs(:,1:nrOfUsedBasisFuncs));
        else
            lhs((row-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs], ...
                (col-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs]) = ...
                lhs((col-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs], ...
                (row-1)*nrOfUsedBasisFuncs+[1:nrOfUsedBasisFuncs]);
        end
    end
end
solution = lhs\rhs;
solution = reshape(solution, [nrOfUsedBasisFuncs nrOfChannels]);
for channel=1:nrOfChannels
    biasCoeff(1:nrOfUsedBasisFuncs,channel) = solution(:,channel);
    biasCoeff(nrOfUsedBasisFuncs+1:nrOfBasisFuncs,channel) = 0;
end
