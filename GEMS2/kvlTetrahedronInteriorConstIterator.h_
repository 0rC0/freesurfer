#ifndef kvlTetrahedronInteriorConstIterator_h
#define kvlTetrahedronInteriorConstIterator_h

#include "itkImageConstIterator.h"
#include "kvlAtlasMesh.h"


namespace kvl
{
  
template< typename TPixel >
class TetrahedronInteriorConstIterator : private itk::ImageConstIterator< typename itk::Image< TPixel, 3 > >
{
public:
  /** Standard class typedefs. */
  typedef TetrahedronInteriorConstIterator Self;
  typedef itk::ImageConstIterator< itk::Image< TPixel, 3 > > Superclass;

  /**
   * Index typedef support. While these were already typdef'ed in the superclass,
   * they need to be redone here for this subclass to compile properly with gcc.
   */
  /** Types inherited from the Superclass */
  typedef typename Superclass::IndexType             IndexType;
  typedef typename Superclass::SizeType              SizeType;
  typedef typename Superclass::OffsetType            OffsetType;
  typedef typename Superclass::RegionType            RegionType;
  typedef typename Superclass::ImageType             ImageType;
  typedef typename Superclass::PixelContainer        PixelContainer;
  typedef typename Superclass::PixelContainerPointer PixelContainerPointer;
  typedef typename Superclass::InternalPixelType     InternalPixelType;
  typedef typename Superclass::PixelType             PixelType;
  
  /** */
  typedef AtlasMesh::PointType   PointType;

  /** */
  typedef typename ImageType::OffsetValueType       OffsetValueType;

  /** Run-time type information (and related methods). */
  itkTypeMacroNoParent(TetrahedronInteriorConstIterator);

  /** Constructor */
  TetrahedronInteriorConstIterator( const ImageType *ptr,
                                    const PointType& p0, 
                                    const PointType& p1, 
                                    const PointType& p2, 
                                    const PointType& p3 );
  
  /** */
  void GetBaricentricCoordinates( double& pi0, double& pi1, double& pi2, double& pi3 ) const;
  
  /** */
  const double& GetPi0() const
    {
    return m_Pi0;
    } 
  
  /** */
  const double& GetPi1() const
    {
    return m_Pi1;
    } 

  /** */
  const double& GetPi2() const
    {
    return m_Pi2;
    } 
    
  /** */
  const double& GetPi3() const
    {
    return m_Pi3;
    }
  
  /** Expose some of the basic iterator functionality we're going to use */
  using Superclass::IsAtEnd;
  using Superclass::GetIndex;
  using Superclass::Value;
  using Superclass::operator!=;
  
  /** Go to the next voxel that's inside the tetrahedron */                              
  Self&  operator++(); 
  
protected: //made protected so other iterators can access
  
  // 
  OffsetValueType m_SpanEndOffset;   // one pixel beyond the last pixel of the span
  
  //
  using Superclass::m_Offset; // Expose this so that non-const version can access it
  using Superclass::m_Buffer; // Expose this so that non-const version can access it
  
  // Baricentric coordinates
  double m_Pi0;
  double m_Pi1;
  double m_Pi2;
  double m_Pi3;
  
  // Elements of a 3x3 matrix "M" and a 3x1 vector "T" that allow us to compute
  // baricentric coordinates from Eucledian coordinates
  double m_T1;
  double m_T2;
  double m_T3;
  
  double m_M11;
  double m_M21;
  double m_M31;
  double m_M12;
  double m_M22;
  double m_M32;
  double m_M13;
  double m_M23;
  double m_M33;
  
private:

  //
  TetrahedronInteriorConstIterator(const Self &); // Not implemented
  void operator=(const Self &); // Not implemented
  
  // Go the next voxel inside the bounding box around the tetrahedron
  void MoveOnePixel(); 
  
  // Check if the current pixel is outside of the tetrahedron
  bool IsOutsideTetrahdron() const;
  
  //
  static bool CheckBorderCase( double a, double b, double c );
    
};

  
} // end namespace kvl

#include "kvlTetrahedronInteriorConstIterator.hxx"

#endif

