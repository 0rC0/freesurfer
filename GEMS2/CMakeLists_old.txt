cmake_minimum_required(VERSION 2.4)
# cmake_policy(VERSION 2.4)
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

PROJECT(GEMS)

# Output directories.
SET (LIBRARY_OUTPUT_PATH ${GEMS_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all libraries.")
SET (EXECUTABLE_OUTPUT_PATH ${GEMS_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all executables.")
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)
SET(GEMS_LIBRARY_PATH "${LIBRARY_OUTPUT_PATH}")
SET(GEMS_EXECUTABLE_PATH "${EXECUTABLE_OUTPUT_PATH}")

# FLTK's fluid generates C++ files in the build directory
INCLUDE_DIRECTORIES(${GEMS_SOURCE_DIR})
INCLUDE_DIRECTORIES(${GEMS_BINARY_DIR})

# Find ITK
FIND_PACKAGE(ITK)
IF(ITK_FOUND)
   INCLUDE(${ITK_USE_FILE})
ELSE(ITK_FOUND)
   MESSAGE(FATAL_ERROR
           "Cannot build without ITK.  Please set ITK_DIR.")
ENDIF(ITK_FOUND)

INCLUDE_DIRECTORIES( ${ITK_DIR}/Utilities/zlib )
IF ( NOT ITK_SOURCE_DIR )
  FIND_PATH( ITK_SOURCE_DIR InsightLogo.gif
             DOC "Source directory of ITK (needed for including some vxl header files" )
ENDIF( NOT ITK_SOURCE_DIR )

IF ( ITK_SOURCE_DIR )
  INCLUDE_DIRECTORIES( ${ITK_SOURCE_DIR}/Utilities/vxl/v3p/netlib )
ELSE ( ITK_SOURCE_DIR )
  MESSAGE( FATAL_ERROR "Cannot build without ITK_SOURCE_DIR." )
ENDIF ( ITK_SOURCE_DIR )

OPTION( BUILD_SHARED_LIBS "Build GEMS with shared libraries." ON )

OPTION( BUILD_GUI "Build GUI components (requires FLTK and VTK)" OFF )


# Find TetGen
FIND_PATH( TETGEN_INCLUDE_DIR tetgen.h ../tetgen1.4.3
           DOC "Include directory of TetGen (i.e. containing tetgen.h)" )
FIND_LIBRARY( TETGEN_LIB tet ../tetgen1.4.3 )

SET( TETGEN_FOUND "NO" )
IF ( TETGEN_INCLUDE_DIR AND TETGEN_LIB )
  SET( TETGEN_FOUND "YES" )
ENDIF ( TETGEN_INCLUDE_DIR AND TETGEN_LIB )

IF ( TETGEN_FOUND )
  INCLUDE_DIRECTORIES( ${TETGEN_INCLUDE_DIR} )
ELSE ( TETGEN_FOUND )
  MESSAGE( FATAL_ERROR "Cannot build without TETGEN." )
ENDIF ( TETGEN_FOUND )


# Find Gmm++
FIND_PATH( GMM_INCLUDE_DIR config.h ../gmm-5.0
           DOC "Include directory of Gmm++ (i.e. containing config.h)" )

SET( GMM_FOUND "NO" )
IF ( GMM_INCLUDE_DIR )
  SET( GMM_FOUND "YES" )
ENDIF ( GMM_INCLUDE_DIR )

IF ( GMM_FOUND )
  INCLUDE_DIRECTORIES( ${GMM_INCLUDE_DIR}
                       ${GMM_INCLUDE_DIR}/include )
ELSE ( GMM_FOUND )
  MESSAGE( FATAL_ERROR "Cannot build without Gmm++." )
ENDIF ( GMM_FOUND )


# Add libary
ADD_LIBRARY( kvlGEMSCommon
             kvlAtlasMeshCollection.cxx
             gzstream.C
             kvlAtlasMeshCollectionValidator.cxx
             kvlAtlasParameterEstimator.cxx
             kvlAtlasMeshSmoother.cxx
             kvlCompressionLookupTable.cxx
             kvlAtlasMeshBuilder.cxx
             kvlAtlasMeshCollectionReferencePositionCost.cxx
             kvlAtlasMeshCollectionFastReferencePositionCost.cxx
             itkPowellOptimizer.cxx
             itkPowellOptimizerOrig.cxx
             kvlAtlasMeshCollectionModelLikelihoodCalculator.cxx
             kvlAtlasMeshSegmenter.cxx
             kvlAtlasMeshSegmentationDriver.cxx
             kvlEMSegmenter.cxx
             kvlRegisterer.cxx
             kvlAtlasMeshToIntensityImagePartialVolumeGradientCalculator.cxx
             kvlMultiResolutionAtlasMesher.cxx
             kvlCroppedImageReader.cxx
             kvlAtlasMeshVertexProcessor2.cxx
             kvlAtlasMeshCollectionPositionCostCalculator2.cxx
             kvlImageSmoother.cxx
             kvlAtlasMeshDeformationLevenbergMarquardt.cxx
             kvlAtlasMeshToIntensityImageGradientCalculator.cxx
	     kvlAtlasMeshToIntensityImageGradientCalculatorMultiAtlas.cxx
             kvlAtlasMeshHamiltonianPositionSampler.cxx
             kvlAtlasMeshDeformationOptimizer.cxx
	     kvlAtlasMeshDeformationOptimizerMultiAtlas.cxx
             kvlAtlasMeshDeformationLevenbergMarquardtOptimizer.cxx
             kvlAtlasMeshDeformationConjugateGradientOptimizer.cxx
             kvlAtlasMeshAveragingConjugateGradientOptimizer.cxx
	     kvlAtlasMeshToIntensityImageGradientCalculatorMultiAtlas.cxx
	     kvlAtlasMeshDeformationConjugateGradientOptimizerMultiAtlas.cxx
             itkMGHImageIO.cxx
             itkMGHImageIOFactory.cxx )
TARGET_LINK_LIBRARIES( kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO
                       ${TETGEN_LIB} )



# Add an executable
ADD_EXECUTABLE( kvlAverageMeshes
                kvlAverageMeshes.cxx )
TARGET_LINK_LIBRARIES( kvlAverageMeshes
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlSmoothMesh
                kvlSmoothMesh.cxx )
TARGET_LINK_LIBRARIES( kvlSmoothMesh
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCrop
                kvlCrop.cxx )
TARGET_LINK_LIBRARIES( kvlCrop
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlChangeKOfMeshCollection
                kvlChangeKOfMeshCollection.cxx )
TARGET_LINK_LIBRARIES( kvlChangeKOfMeshCollection
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlChangePointParametersOfMeshCollection
                kvlChangePointParametersOfMeshCollection.cxx )
TARGET_LINK_LIBRARIES( kvlChangePointParametersOfMeshCollection
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlMapDeformationField
                kvlMapDeformationField.cxx )
TARGET_LINK_LIBRARIES( kvlMapDeformationField
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlUpsampleMesh
                kvlUpsampleMesh.cxx )
TARGET_LINK_LIBRARIES( kvlUpsampleMesh
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlSetReferencePosition
                kvlSetReferencePosition.cxx )
TARGET_LINK_LIBRARIES( kvlSetReferencePosition
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCompressImage
                kvlCompressImage.cxx )
TARGET_LINK_LIBRARIES( kvlCompressImage
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlBuildAtlasMeshWithoutGUI
                kvlBuildAtlasMeshWithoutGUI.cxx )
TARGET_LINK_LIBRARIES( kvlBuildAtlasMeshWithoutGUI
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKNumerics
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCropImage
                kvlCropImage.cxx )
TARGET_LINK_LIBRARIES( kvlCropImage
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCombineManualSegmentationProtocols
                kvlCombineManualSegmentationProtocols.cxx )
TARGET_LINK_LIBRARIES( kvlCombineManualSegmentationProtocols
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlReduceNumberOfIntensityLevels
                kvlReduceNumberOfIntensityLevels.cxx )
TARGET_LINK_LIBRARIES( kvlReduceNumberOfIntensityLevels
                       ITKCommon
                       ITKIO
                       ITKStatistics )

# Add an executable
ADD_EXECUTABLE( kvlAugmentManualSegmentationWithAutomatedSegmentation
                kvlAugmentManualSegmentationWithAutomatedSegmentation.cxx )
TARGET_LINK_LIBRARIES( kvlAugmentManualSegmentationWithAutomatedSegmentation
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlScaleMeshCollection
                kvlScaleMeshCollection.cxx )
TARGET_LINK_LIBRARIES( kvlScaleMeshCollection
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlMapLabelsOfAtlasMesh
                kvlMapLabelsOfAtlasMesh.cxx )
TARGET_LINK_LIBRARIES( kvlMapLabelsOfAtlasMesh
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlSegmentWithoutGUI
                kvlSegmentWithoutGUI.cxx )
TARGET_LINK_LIBRARIES( kvlSegmentWithoutGUI
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )


# Add an executable
ADD_EXECUTABLE( kvlEvaluateQuantitatively
                kvlEvaluateQuantitatively.cxx )
TARGET_LINK_LIBRARIES( kvlEvaluateQuantitatively
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlEvaluateQuantitativelyWithHausdorffDistance
                kvlEvaluateQuantitativelyWithHausdorffDistance.cxx )
TARGET_LINK_LIBRARIES( kvlEvaluateQuantitativelyWithHausdorffDistance
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCorrectLeftSideLabelsToRightSideLabels
                kvlCorrectLeftSideLabelsToRightSideLabels.cxx )
TARGET_LINK_LIBRARIES( kvlCorrectLeftSideLabelsToRightSideLabels
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlOverwriteEmptySlices
                kvlOverwriteEmptySlices.cxx )
TARGET_LINK_LIBRARIES( kvlOverwriteEmptySlices
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )


# Add an executable
ADD_EXECUTABLE( kvlOptimizePositionsWithICM
                kvlOptimizePositionsWithICM.cxx )
TARGET_LINK_LIBRARIES( kvlOptimizePositionsWithICM
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCalculatePositionCost
                kvlCalculatePositionCost.cxx )
TARGET_LINK_LIBRARIES( kvlCalculatePositionCost
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlCalculateAtlasMeshCollectionTotalCost
                kvlCalculateAtlasMeshCollectionTotalCost.cxx )
TARGET_LINK_LIBRARIES( kvlCalculateAtlasMeshCollectionTotalCost
                       kvlGEMSCommon
                       ITKCommon
                       ITKAlgorithms
                       ITKIO )


# Add an executable
ADD_EXECUTABLE( kvlGenerateWeightedColorChannels
                kvlGenerateWeightedColorChannels.cxx )
TARGET_LINK_LIBRARIES( kvlGenerateWeightedColorChannels
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlColorCodeProbabilityImages
                kvlColorCodeProbabilityImages.cxx )
TARGET_LINK_LIBRARIES( kvlColorCodeProbabilityImages
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlSamplePositionsFromMeshCollection
                kvlSamplePositionsFromMeshCollection.cxx )
TARGET_LINK_LIBRARIES( kvlSamplePositionsFromMeshCollection
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlAddMeshToMeshCollection
                kvlAddMeshToMeshCollection.cxx )
TARGET_LINK_LIBRARIES( kvlAddMeshToMeshCollection
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlMergeMeshCollections
                kvlMergeMeshCollections.cxx )
TARGET_LINK_LIBRARIES( kvlMergeMeshCollections
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlAddCSFToBucknerData
                kvlAddCSFToBucknerData.cxx )
TARGET_LINK_LIBRARIES( kvlAddCSFToBucknerData
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlAddBorder
                kvlAddBorder.cxx )
TARGET_LINK_LIBRARIES( kvlAddBorder
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlQuantifyPosteriorProbabilityImages
                kvlQuantifyPosteriorProbabilityImages.cxx )
TARGET_LINK_LIBRARIES( kvlQuantifyPosteriorProbabilityImages
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlEMSegment
                kvlEMSegment.cxx )
TARGET_LINK_LIBRARIES( kvlEMSegment
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlAddProbabilityImages
                kvlAddProbabilityImages.cxx )
TARGET_LINK_LIBRARIES( kvlAddProbabilityImages
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlMathematicalMorphology
                kvlMathematicalMorphology.cxx )
TARGET_LINK_LIBRARIES( kvlMathematicalMorphology
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlConvert
                kvlConvert.cxx )
TARGET_LINK_LIBRARIES( kvlConvert
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlRegister
                kvlRegister.cxx )
TARGET_LINK_LIBRARIES( kvlRegister
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlResample
                kvlResample.cxx )
TARGET_LINK_LIBRARIES( kvlResample
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlBinaryThresholdImage
                kvlBinaryThresholdImage.cxx )
TARGET_LINK_LIBRARIES( kvlBinaryThresholdImage
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlUpsample
                kvlUpsample.cxx )
TARGET_LINK_LIBRARIES( kvlUpsample
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlRasterizeAtlasMesh
                kvlRasterizeAtlasMesh.cxx )
TARGET_LINK_LIBRARIES( kvlRasterizeAtlasMesh
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlAutoCrop
                kvlAutoCrop.cxx )
TARGET_LINK_LIBRARIES( kvlAutoCrop
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlMaskImage
                kvlMaskImage.cxx )
TARGET_LINK_LIBRARIES( kvlMaskImage
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )

# Add an executable
ADD_EXECUTABLE( kvlApplyTransform
                kvlApplyTransform.cxx )
TARGET_LINK_LIBRARIES( kvlApplyTransform
                       kvlGEMSCommon
                       ITKCommon
                       ITKIO )


IF(BUILD_GUI)

  #   # Look for OpenGL.
  #   FIND_PACKAGE(OpenGL)
  #   IF(OPENGL_INCLUDE_PATH)
  #     INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_PATH})
  #   ENDIF(OPENGL_INCLUDE_PATH)

  # Find FLTK
  FIND_PACKAGE(FLTK)
  IF(FLTK_FOUND)
    INCLUDE_DIRECTORIES(${FLTK_INCLUDE_DIR})
  ELSE(FLTK_FOUND)
    MESSAGE(FATAL_ERROR
            "Cannot build GUI components without FLTK.  Please set FLTK_DIR.")
  ENDIF(FLTK_FOUND)


  # Find VTK
  FIND_PACKAGE(VTK)
  IF(VTK_FOUND)
    INCLUDE(${VTK_USE_FILE})
  ELSE(VTK_FOUND)
    MESSAGE(FATAL_ERROR
           "Cannot build GUI components without VTK.  Please set VTK_DIR.")
  ENDIF(VTK_FOUND)


  # Add libary
  ADD_LIBRARY( kvlGEMSGUI
               vtkFlRenderWindowInteractor.cxx
               kvlImageViewer.cxx
            )
  TARGET_LINK_LIBRARIES( kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )


  # Add an executable
  FLTK_WRAP_UI( kvlEstimateAtlasParameters
                kvlAtlasParameterEstimationConsoleGUI.fl )

  ADD_EXECUTABLE( kvlEstimateAtlasParameters
                  ${kvlEstimateAtlasParameters_FLTK_UI_SRCS}
                  kvlEstimateAtlasParameters.cxx
                  kvlAtlasParameterEstimationConsole.cxx )
  TARGET_LINK_LIBRARIES( kvlEstimateAtlasParameters
                         kvlGEMSCommon
                         kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )



  # Add an executable
  FLTK_WRAP_UI( kvlViewMeshCollectionWithGUI
                kvlAtlasMeshViewingConsoleGUI.fl )

  ADD_EXECUTABLE( kvlViewMeshCollectionWithGUI
                  ${kvlViewMeshCollectionWithGUI_FLTK_UI_SRCS}
                  kvlViewMeshCollectionWithGUI.cxx
                  kvlAtlasMeshViewingConsole.cxx )
  TARGET_LINK_LIBRARIES( kvlViewMeshCollectionWithGUI
                         kvlGEMSCommon
                         kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )

  # Add an executable
  FLTK_WRAP_UI( kvlSegment
                kvlAtlasMeshSegmenterConsoleGUI.fl )

  ADD_EXECUTABLE( kvlSegment
                  ${kvlSegment_FLTK_UI_SRCS}
                  kvlSegment.cxx
                  kvlAtlasMeshSegmenterConsole.cxx )
  TARGET_LINK_LIBRARIES( kvlSegment
                         kvlGEMSCommon
                         kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )


  # Add an executable
  FLTK_WRAP_UI( kvlViewImage
                kvlImageViewingConsoleGUI.fl )

  ADD_EXECUTABLE( kvlViewImage
                  ${kvlViewImage_FLTK_UI_SRCS}
                  kvlViewImage.cxx
                  kvlImageViewingConsole.cxx )
  TARGET_LINK_LIBRARIES( kvlViewImage
                         kvlGEMSCommon
                         kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )


  # Add an executable
  FLTK_WRAP_UI( kvlEvaluateSegmentation
                kvlSegmentationEvaluationConsoleGUI.fl )

  ADD_EXECUTABLE( kvlEvaluateSegmentation
                  ${kvlEvaluateSegmentation_FLTK_UI_SRCS}
                  kvlEvaluateSegmentation.cxx
                  kvlSegmentationEvaluationConsole.cxx )
  TARGET_LINK_LIBRARIES( kvlEvaluateSegmentation
                         kvlGEMSCommon
                         kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )

  # Add an executable
  ADD_EXECUTABLE( kvlColorTest
                  kvlColorTest )
  TARGET_LINK_LIBRARIES( kvlColorTest
                        kvlGEMSCommon
                        ITKCommon
                        ITKIO
                        ITKBasicFilters
                        vtkCommon
                        vtkImaging
                        vtkIO
                        vtkRendering )

  # Add an executable
  FLTK_WRAP_UI( kvlThresholdImage
                kvlImageThresholdingConsoleGUI.fl )

  ADD_EXECUTABLE( kvlThresholdImage
                  ${kvlThresholdImage_FLTK_UI_SRCS}
                  kvlThresholdImage.cxx
                  kvlImageThresholdingConsole.cxx )
  TARGET_LINK_LIBRARIES( kvlThresholdImage
                         kvlGEMSCommon
                         kvlGEMSGUI
                         ITKCommon
                         ITKBasicFilters
                         ITKAlgorithms
                         ITKIO
                         vtkCommon
                         vtkImaging
                         vtkIO
                         vtkRendering
                         ${FLTK_LIBRARIES} )


ENDIF(BUILD_GUI)
