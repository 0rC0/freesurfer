December 18th 2013

* For the atlas building, I used the original ITK version of the Powell optimizer, which I renamed to itkPowellOptimizerOrig; it seems to be a bit faster.

* The code now supports building atlases from images labeled to different levels of detail. To do this, the first argument is now a text file that details how labels were "collapsed" in the generative process (if all volumes have the same labels, set this argument to "null", or a non-existing file). The rest of arguments remain the same as before. 
Here below is an example of what a collapsed label file would look like. Let's say that we are using Buckner40, but we had an RA subdivide the left hippocampus (label 17) into head (label 170), body (label 1700) and tail (label 17000) for a couple of cases. The file would have a single line, which would be:
17 170 1700 17000
which essentially means "voxels with label 17 could be 170, 1700 or 17000, but I don't know which. Note that 17 won't be a label in our atlas!
Also, there's for now a limit on the total number of labels (collapsed or not) that we can use: 256. We might want to get rid of the constraint (due to the use of char) in the future.

* Also, to make it easier to play with the different optimizers, I created a header file named kvlOptimizerChoice.h where you can set which optimizer you want to use at each part of the code.

* There was a bug that sometimes caused threads to never return in the atlas building. I added some checks for NaN and now it almost never happens, only once in a while when you *really* have a lot of edges.

* When the atlas building gets stuck because some threads do not return, a counter is now incremented each time a thread realizes there's nothing left for it to do. If the counter reaches a given number (I set it to 20,000), the current mesh is written to disk as "threadsNeverReturning.gz" and the program exits. You can then rename this file to explicitStartCollection.gz and start building from there; this is important when iterations 0 and 1 of your atlas building take 3 days, like in my case :-S

* kvlRegister now has a SSD mode - in addition to MI.

* Modified the code so it can handle partial informatio in the multispectral case, i.e., when a voxel has info for some channels but not from others. 
IMPORTANT: at this point, this feature can only be used from Matlab: the optimizers can handle it, but kvlEMSegmenter (the parameter estimator) cannot.

* The mesh smoother was configured to smooth a specified list of classes, which was never set from the matlab code - which caused the smoother to do nothing. I added the following default behavior: if a list hasn't been specified, you smooth all classes.



