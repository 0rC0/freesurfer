#!/bin/csh -f
# grad_unwarp - convert, unwarp, and resample dicom files
#
# $Id: grad_unwarp,v 1.3 2003/08/07 17:48:51 ebeth Exp $
set VERSION = '$Id: grad_unwarp,v 1.3 2003/08/07 17:48:51 ebeth Exp $';

set inputargs = ($argv);

set infile = ();
set seriesno = 0;
set corfovflag = 0;
set unwarpflag = 0;
set jacflag = 1;
set outfile = ();
set unwarptype = ();
set outcor = 0;
set interp_method = "cubic";
set ebethdev = 0;
set mydev = 0;

set PrintHelp = 0;
set MLF = ();
set monly = 0;

if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
set n = `echo $argv | grep help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

##### Create a log file ######
set logdir = $outdir;
mkdir -p $logdir
if(! -e $logdir) then
  echo "WARNING: could not create $logdir"
  set LF = /dev/null
else
  set LF = $logdir/grad_unwarp.log
  if(-e $LF) mv $LF $LF.old
endif
echo "--------------------------------------------------------------"
echo "grad_unwarp logfile is $LF"
echo "--------------------------------------------------------------"

echo "grad_unwarp log file" >> $LF
echo $VERSION >> $LF
id            >> $LF
pwd           >> $LF
echo $0         >> $LF
echo $inputargs >> $LF
uname -a        >> $LF
date            >> $LF

set StartTime = `date`;

if($#MLF == 0) set MLF = /tmp/grad_unwarp_$$.m
rm -f $MLF
echo "INFO: matlab file is $MLF"

if($outcor) then
  set outfileuse = $outdir/grad_unwarp_$$.mgh
else
  set outfileuse = $outfile
endif

if($ebethdev) then
  setenv DEV /space/lyon/1/fsdev/work/ebeth/dev
  echo "INFO: using DEV = $DEV"
else if($mydev) then
  echo "INFO: using DEV = $DEV"
else
  setenv DEV $FREESURFER_HOME
  echo "INFO: using DEV = $DEV"
endif

#-----------------------------------------------------------#
tee $MLF <<EOF

addpath $DEV/matlab

infile     = '$infile';
seriesno   = [$seriesno];
outfile    = '$outfileuse';

unwarpflag = [$unwarpflag];
jacflag    = [$jacflag];
corfovflag = [$corfovflag];

interp_method = '$interp_method';
unwarptype = '$unwarptype';

convert_unwarp_resample(infile,seriesno,outfile,corfovflag,unwarpflag,jacflag,interp_method,unwarptype,1); % 1 = run from script, for qoe

EOF
#-----------------------------------------------------------#

if(! $monly ) then
  if( -e $outfileuse) then
    echo "INFO: $outfileuse exists ... deleting"
    rm -f $outfileuse
  endif
  cat $MLF | matlab -display iconic | tee -a $LF
  rm $MLF
  if(! -e $outfileuse) then
    echo "ERROR: output file not created"
    exit 1;
  endif
  if($outcor) then
    set cmd = (mri_convert $outfileuse $outdir)
    $cmd
    if($status) then
      echo "ERROR: $cmd " | tee -a $LF
      exit 1;
    endif
    rm -f $outfileuse
  endif
endif

echo " " | tee -a $LF
echo "Started at $StartTime " | tee -a $LF
echo "Ended   at `date`" | tee -a $LF
echo " " | tee -a $LF


echo "grad_unwarp Done" 
echo " " 

exit 0;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-i":
      if ( $#argv == 0) goto arg1err;
      set infile = $argv[1]; shift;
      breaksw

    case "-s":
      if ( $#argv == 0) goto arg1err;
      set seriesno = $argv[1]; shift;
      breaksw

    case "-interp":
      if ( $#argv == 0) goto arg1err;
      set interp_method = $argv[1]; shift;
      if($interp_method != "cubic"   && $interp_method != "linear" &&\
         $interp_method != "nearest" && $interp_method != "spline") then
         echo "ERROR: interp = $interp_method, must be "
         echo "   cubic, nearest, linear, or spline"
         exit 1;
      endif
      breaksw

    case "-unwarp":
      set unwarpflag = 1;
      # did user supply an unwarp type? check for '-' on next arg:
      if ( $#argv == 0) breaksw;
      set isarg = `perl -e "print ('$argv[1]' =~ /^[^-]/)"`;
      if ( $isarg ) then
        set unwarptype = $argv[1]; shift;
      endif
      breaksw

    case "-jac":
      set jacflag = 1;
      breaksw

    case "-nojac":
      set jacflag = 0;
      breaksw

    case "-corfov":
      set corfovflag = 1;
      breaksw

    case "-cor":
      set outcor = 1;
      breaksw

    case "-ebethdev":
      set ebethdev = 1;
      breaksw

    case "-mydev":
      set mydev = 1;
      breaksw

    case "-o":
      if ( $#argv == 0) goto arg1err;
      set outfile = $argv[1]; shift;
      breaksw

    case "-monly":
      if ( $#argv == 0) goto arg1err;
      set MLF = $argv[1]; shift;
      set monly = 1;
      breaksw

    case "-verbose":
      set verbose = 1;
      breaksw

    case "-echo":
      set echo = 1;
      breaksw

    case "-debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    case "-umask":
      if ( $#argv == 0) goto arg1err;
      umask $1; shift;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#infile == 0) then
    echo "ERROR: must specify infile (dcmdir, dcmfile, mghfile)"
    exit 1;
  endif

#   if($#seriesno == 0) then
#     echo "ERROR: must specify a series number"
#     exit 1;
#   endif
 
  if($#outfile == 0) then
    echo "ERROR: must specify an output "
    exit 1;
  endif

  if($outcor) then 
    set outdir = $outfile
  else
    set outdir = `dirname $outfile`;
  endif

  mkdir -p $outdir
  if(! -e $outdir) then
    echo "ERROR: could not create $outdir"
    exit 1;
  endif

# matlab code checks for:
# -i dcmdir and no -s seriesno, 
# -i foo.mgh -unwarp and no unwarptype

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "USAGE: grad_unwarp"
  echo ""  
  echo "   -i infile   : dcmdir or dcmfile or mghfile"
  echo "   -s seriesno : needed only if invoking -i dcmdir"
  echo "   -unwarp <type>   : gradient unwarping"
  echo "                    : Optional type is the gradient unwarping displacements"
  echo "                    : map to use - supply either scanner model (sonata, allegra,"
  echo "                    : brm, crm) or map filename.  (BRM is GE like UCSD's 1.5T;"
  echo "                    : CRM is GE like MGH Bay 1, BWH-GE, Duke-GE, and others.)"
  echo "                    : If unwarping an mgh volume, user _must_ supply a type."
  echo "   -nojac  : don't do jacobian correction when unwarping"
  echo "   -corfov : resample to cor FOV"
  echo "   -cor    : save as COR format instead of mgh"
  echo "   -interp : method (<cubic>,linear,nearest,spline)"
  echo "   -o outfile  : MGH formatted"
  echo ""

  if($PrintHelp) \
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'

exit 1;


#---- Everything below here is printed out as part of help -----#
BEGINHELP

grad_unwarp - convert, unwarp, and resample dicom files to mgh files.

