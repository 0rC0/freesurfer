#!/bin/csh -f

set SPMMAT2REGISTER_VER = '$Id: spmmat2register,v 1.1 1999/10/22 17:11:35 greve Exp $';

set funcvol   = ();
set structvol = ();
set regfile = "register.dat"
set subject = ();

if($#argv == 0) goto usage_exit;

goto parse_args;
parse_args_return:

goto check_args;
check_args_return:

set structmatfile = $structvol.mat
if(! -e $structmatfile ) then
  echo "ERROR: cannot find $structmatfile"
  exit 1;
endif

set funcmatfile = $funcvol.mat
if(! -e $funcmatfile ) then
  echo "ERROR: cannot find $funcmatfile"
  exit 1;
endif

set outdir = `dirname $regfile`;
mkdir -p $outdir
set okfile = "$outdir/tmp_spm2reg.ok"
rm -f $okfile

matlab -display iconic > /dev/null <<EOF
  load ('$structmatfile');
  Mc = M;
  load ('$funcmatfile');
  Mf = M;

  dvf = sqrt(sum(Mf(1:3,1:3).^2));
  Qc = zeros(4);
  Qc(1,1) = 1;
  Qc(2,2) = 1;
  Qc(3,3) = 1;
  av = -ones(4,1)*(256+1)/2;
  av(4) = 1;
  Qc(:,4) = av;

  Mreg = Mc*inv(Qc);
  SubjName = '$subject';
  fid = fopen('$regfile','w');
  if(fid == -1)
    fprintf(1,'ERROR: could not open $regfile\n');
    error('');
    quit;
  end
  fprintf(fid,'%s\n',SubjName);
  fprintf(fid,'%8.4f\n',dvf(1));
  fprintf(fid,'%8.4f\n',dvf(3));
  fprintf(fid,'%8.4f\n',0.5);
  fprintf(fid,'%8.4f %8.4f %8.4f %8.4f\n',Mreg');
  fclose(fid);

  fid = fopen('$okfile','w');
  fclose(fid);

  return;
EOF

if( -e $okfile ) then
  #echo "spmmat2register finished SUCCESSFULLY"
  rm -f $okfile
  exit 0;
else
  echo "spmmat2register FAILED"
  exit 1;
endif"


exit 0;
#######-------------------------------------##########

parse_args:

set cmdline = "$argv";
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-fvol":
      if ( $#argv == 0) goto arg1err;
      set funcvol = $argv[1]; shift;
      breaksw

    case "-svol":
      if ( $#argv == 0) goto arg1err;
      set structvol = $argv[1]; shift;
      breaksw

    case "-o":
      if ( $#argv == 0) goto arg1err;
      set regfile = $argv[1]; shift;
      breaksw

    case "-subject":
    case "-s":
      if ( $#argv == 0) goto arg1err;
      set subject = $argv[1]; shift;
      breaksw

    case "-umask":
      if ( $#argv == 0) goto arg1err;
      #echo "INFO: Setting umask to $argv[1]"
      set newumask = $argv[1]; shift;
      umask $newumask
      breaksw


    default:
      echo ERROR: Flag $flag unrecognized.
      echo $cmdline
      goto usage_exit;
      breaksw
  endsw

end
goto parse_args_return;

#----------------------------------------------------------------#
check_args:

  if($#funcvol == 0) then
    echo "ERROR: must specify a functional volume";
    exit 1;
  endif  

  if($#structvol == 0) then
    echo "ERROR: must specify a structural volume";
    exit 1;
  endif  

  if($#subject == 0) then
    echo "ERROR: must specify a subject name";
    exit 1;
  endif  

goto check_args_return;

#----------------------------------------------------------------#
usage_exit:
  echo "\nUSAGE: \n spmmat2register "
  echo "   -svol    structural volume     required"
  echo "   -fvol    functional volume     required"
  echo "   -subject subject name          required"
  echo "   -o       output register file  register.dat"
  echo "   -umask   newumask"
  echo "\n $SPMMAT2REGISTER_VER \n"
exit 1;
