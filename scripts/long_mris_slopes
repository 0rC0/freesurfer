#!/usr/bin/env python
# -*- coding: latin-1 -*-

#
# long_mris_slopes
#
# script to fit within-subject slopes into longitudinal data
#
# Original Author: Martin Reuter
# CVS Revision Info:
#    $Author: mreuter $
#    $Date: 2011/03/16 16:04:43 $
#    $Revision: 1.15 $
#
# Copyright Â© 2011 The General Hospital Corporation (Boston, MA) "MGH"
#
# Terms and conditions for use, reproduction, distribution and contribution
# are found in the 'FreeSurfer Software License Agreement' contained
# in the file 'LICENSE' found in the FreeSurfer distribution, and here:
#
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense
#
# Reporting: freesurfer@nmr.mgh.harvard.edu
#
#

import warnings
warnings.filterwarnings('ignore', '.*negative int.*')
import os
import sys
import shlex
import optparse
import logging
import subprocess
import tempfile
import shutil
from Numeric import *
from subject_info import *
#from fsgd_parser import *
from qdectable_parser import *

# logging 
ch = logging.StreamHandler()
#create logger
slopelogger = logging.getLogger("long_mris_slopes")
slopelogger.setLevel(logging.INFO)
slopelogger.addHandler(ch)


HELPTEXT = """

SUMMARY

Computes slope maps (e.g. of thickness) in a longitudinal study.
The slope is computed within subject from the longitudinally processed
results (taken from the <tpNid>.long.<template> directories) and the
output is written into the subjects <template>/surf directory for further
processing (e.g. group analysis). Will also output the intersections of
all within-subject cortex labels in <template>/label/?h.long.cortex.label
if an input label is not specified with --inlabel <name> or if no different
output name is specified with --outlabel <name> .

REQUIRED ARGUMENTS

--qdec <name>     qdec.table.dat file with first columns: fsid  fsid-base

--meas <name>     Input curv file, e.g. thickness

--hemi ?h         Hemisphere (lh or rh)

One or more of the following to specify the output in
<template>/surf/<hemi>.<name> :

--out-avg <name>  Output filename (without hemi ?h) for temporal average

--out-rate <name> Output filename for the rate (diff per time)

--out-pc1 <name>  Output filename for percent change (w.r.t. time 1)

--out-spc <name>  Output filename for sym. pct. change (w.r.t. average)


OPTIONAL ARGUMENTS

--fwhm <int>      Smooth the data (recommended for percent change maps)

--nosmooth        Do not smooth (to overwrite smoothing requirement for pc1 or spc)

--time <name>     Variable name of time variable (e.g. age)

--inlabel <name>  Use pre-existing label for smoothing (default: intersect cortex labels)

--outlabel <name> Store intersected cortex in <template>/label/<hemi>.<name>.label (default: long.cortex)

DETAILS

QDEC.TABLE
Pass a qdec table file, where the first 2 columns need to be 'fsid  fsid-base'.
fsid is the id of the individual time points an 'fsid-base' the template/base
id (grouping the timepoints that belong to the same subject). By default the
third column is taken as the time variable, but this can be overwritten with
--time <name>. 

QDEC.TABLE-EXAMPLE:
fsid    fsid-base  age   weight   IQ
Elmo_1   Elmo       3      10    1000        
#Elmo_2  Elmo       3.5    15    1100
Elmo_3   Elmo       4      20    1300 
Snuffy_1 Snuffy    20      40    1100
Snuffy_2 Snuffy    21      45    1200
Bert_1   Bert       8      25    2000
Bert_2   Bert       9      30    2500
Bert_3   Bert       9.9    34    2400


OUTPUT:

The output will be written into the template surf directory:
<template>/surf/<hemi>.<name>

For the output choose one or more of the following options:
*  'out-rate' for rate, this will compute the slope of a linear fit.
   Depending on the time variable will yield the thinning in mm/time
   (if the time variable is measured in years, such as age: mm/year).
*  'out-pc1' is the percent change, this is the rate normalized by the
   measure at the first time point times 100, e.g. percent thinning per year.
*  'out-spc' for symmetrized percent change. Here we normalize by the temporal
   average instead of taking it from the first time point. The average is
   computed from the linear fit at the middle of the time interval.
   This is a symmetric 'percent thinning per year' and more robust, as TP1
   can be an outlier.
*  'out-avg' for output of the temporal average (linear fit at mid time).

NOTE that for percent change (pc1 and spc) prior smoothing (--fwhm) is
highly recommended as the division can produce very large values!
"""

# not encouraged, therefore removed from helptext above:
HELPTEXTFSGD = """
FSGD:
The fsgd input file is a text file described below.
(see also surfer.nmr.mgh.harvard.edu/docs/fsgdf.txt for more info). 
Create a 'Class StemplateId' for each subject containing the subject's
template/base id. Then create a 'Input' line for each time point containing:
'Input tpId STemplateId Time'
Here Time can be the age or the time of the scan. Time will be used to fit the
slopes. If you have several variables, specify e.g. 'DefaultVariable Age',
else the first column variable is chosen by default. You can have differently
many time points per subject, but at least two! You can remove individual time
points by commenting them out with '#'.

FSGD-EXAMPLE:
GroupDescriptorFile 1
Title MyLongStudy
Class Elmo
Class Snuffy
Class Bert
Variables             Age   Weight   IQ
Input Elmo_1 Elmo       3      10    1000               
#Input Elmo_2 Elmo      3.5    15    1100
Input Elmo_3 Elmo       4      20    1300 
Input Snuffy_1 Snuffy  20      40    1100
Input Snuffy_2 Snuffy  21      45    1200
Input Bert_1 Bert       8      25    2000
Input Bert_2 Bert       9      30    2500
DefaultVariable Age
"""

def options_parse():
    """
    Command Line Options Parser for long_mris_slopes
    initiate the option parser and return the parsed object
    """
    parser = optparse.OptionParser(version='$Id: long_mris_slopes,v 1.15 2011/03/16 16:04:43 mreuter Exp $', usage=HELPTEXT)
    
    # help text
#    h_fsgd = '(REQUIRED) fsdg file specifying the subjects and time points'
    h_qdec      = '(REQUIRED) qdec table file specifying the subjects and time points'
    h_meas      = '(REQUIRED) the surface measure of type curv (e.g. thickness)'
    h_hemi      = '(REQUIRED) Run one hemisphere: lh or rh'
    h_out_rate  = 'filename (without hemi ?h) to store rate in <template>/surf/<hemi>.<OUT_RATE>'
    h_out_pc1   = 'filename (without hemi ?h) to store pct. change (to TP1) in <template>/surf/<hemi>.<OUT_PC1>'
    h_out_spc   = 'filename (without hemi ?h) to store sym. pct. change in <template>/surf/<hemi>.<OUT_SPC>'
    h_out_avg   = 'filename (without hemi ?h) to store temporal average in <template>/surf/<hemi>.<AVG>'
    h_fwhm = 'smoothing the data, usefull if percent change maps are created'
    h_nosmooth = 'do not smooth the data (overwrite requirement to not smooth pct change computations)'
    h_time = 'variable name for time column variable (e.g. age) in qdec table'    
    h_inlabel= 'use pre-existing label for smoothing and to mask the output'
    h_outlabel= 'store within-subject intersected cortex labels in <template>/label/<hemi>.<name>.label (default: long.cortex)'
#    h_outformat = 'Output format can be either mgh (default) or curv'
 
    # Add options 
#    parser.add_option('--fsgd', dest='fsgd', help=h_fsgd)
    parser.add_option('--qdec', dest='qdec', help=h_qdec)

    parser.add_option('--meas', dest='meas', help=h_meas)
    parser.add_option('--hemi', dest='hemi', choices=('lh','rh'), help=h_hemi)
    parser.add_option('--out-avg' , dest='out_avg' , help=h_out_avg)
    parser.add_option('--out-rate' , dest='out_rate' , help=h_out_rate)
    parser.add_option('--out-pc1' , dest='out_pc1' , help=h_out_pc1)
    parser.add_option('--out-spc' , dest='out_spc' , help=h_out_spc)

    parser.add_option('--fwhm', dest='fwhm', help=h_fwhm)
    parser.add_option('--nosmooth', action='store_true', dest='nosmooth', help=h_nosmooth, default=False)
    parser.add_option('--time', dest='time', help=h_time)
    parser.add_option('--inlabel', dest='inlabel', help=h_inlabel)
    parser.add_option('--outlabel', dest='outlabel',help=h_outlabel,default="long.cortex")
#    parser.add_option('--outformat', dest='outformat', choices=('curv','mgh'), default='mgh', help=h_outformat);
                      
    (options, args) = parser.parse_args()
    
    # extensive error checks
#    if options.fsgd is None and 
    if options.qdec is None:
#        print 'ERROR: Specify --fsgd or --qedc'
        print 'ERROR: Specify --qedc'
        print '       or run with --help for help.'
        sys.exit(1)

#    if options.fsgd is not None and options.qdec is not None:
#        print 'ERROR: Specify either --fsgd or --qedc, not both'
#        sys.exit(1)
        
    if options.meas is None:
        print 'ERROR: Specify --meas (e.g. \'thickness\')'
        sys.exit(1)

    if options.hemi is None:
        print 'ERROR: Specify --hemi (e.g. \'lh\')'
        sys.exit(1)
    
    if options.out_avg is None and options.out_rate is None and options.out_pc1 is None and options.out_spc is None:
        print 'ERROR: output file name should be specified, use one or more of --out-avg, --out-rate, --out-pc1 or --out-spc'
        sys.exit(1)
    
    if options.fwhm is not None and options.nosmooth:
        print 'ERROR: either specify --fwhm <int> or --nosmooth'
        sys.exit(1)
        
    if (options.out_pc1 is not None or options.out_spc is not None) and options.fwhm is None and not options.nosmooth:
        print 'ERROR: when computing SPC or PC1 (pct. change) you should specify smoothing --fwhm <int>. If you really do not want to smooth pass --nosmooth'
        sys.exit(1)
    
    return options


def write_fsgd(filename,subjects_tp_map,subject,timeidx):
    """
    Write the fsgd to disk. Initialize the writer class.
    """
    fp = open(filename, 'w')
    fp.write('GroupDescriptorFile 1\n')
    fp.write('Title MyLongStudy\n')
    fp.write('Class '+subject)
    fp.write('Variables            Time')
    
    for tp in subjects_tp_map[subject]:
        fp.write('Input '+tp[0]+' '+subject+' '+tp[timeidx]+'\n')
        
    fp.write('\n')
    fp.close()    


def run_cmd(cmd,err_msg):
    """
    execute the comand
    """
    print cmd+'\n'
    args = shlex.split(cmd)
    retcode = subprocess.call(args)
    if retcode != 0 :
        print 'ERROR: '+err_msg
        sys.exit(1)
    print '\n'
    

if __name__=="__main__":
    # Command Line options and error checking done here
    options = options_parse()
    slopelogger.debug('-- The options you entered --')
    slopelogger.debug(options) 

    defaultvar  = ''
    subjectsdir = ''
    # Parse the stats files 
#    if options.fsgd is not None:
#        print 'Parsing the fsgd file: '+options.fsgd
#        try:
#            slopelogger.debug('Processing file ' + options.fsgd)
#            fsgdparse = FsgdParser(options.fsgd)
#            subjects_tp_map, variables, defaultvar = fsgdparse.parse()
#        except BadFileError, e:
#            print 'ERROR: fsgd file '+str(e)+' not found!'
#            sys.exit(1)
#    else:
    print 'Parsing the qdec table: '+options.qdec
    try:
        slopelogger.debug('Processing file ' + options.qdec)
        qdecparse = QdecTableParser(options.qdec)
        subjects_tp_map, variables, subjectdir = qdecparse.parse()
    except BadFileError, e:
        print 'ERROR: qdec table '+str(e)+' not found!'
        sys.exit(1)
    

    # use the first column by default for time variable
    varidx = 1
    # if time variable is passed on command line, overwrite
    if not options.time is None:
        defaultvar = options.time
    # if defaultvar, make sure it is part of variables
    # compute correct index (starting with 1, 0 is the tpID)
    if not defaultvar == '':
        for index in (i for i in xrange(len(variables)) if variables[i].upper()==defaultvar.upper()):
            varidx = index
            #print 'found: '+str(varidx)+' '+variables[varidx]
            break
        if not variables[varidx].upper()==defaultvar.upper():
            print 'ERROR: DefaultVariable \''+str(defaultvar)+'\' not found in Variables: '+str(variables)
            sys.exit(1)
        varidx = varidx +1;

    # if env is set, overwrite info from file (if it was passed in qdec)
    sdir = os.getenv('SUBJECTS_DIR')
    if sdir is not None:
        subjectsdir = sdir
    print '\nWorking in SUBJECTS_DIR: '+subjectsdir+'\n'
    
    # process
    retcode = 0
    for subjectid, tplist in subjects_tp_map.items():
        print '\nSubject-Template: '+subjectid
        i = 0
        
        basedir = os.path.join(subjectsdir,subjectid)
        if not os.path.exists(basedir):
            print 'ERROR: Template dir '+str(basedir)+' does not exist!'
            sys.exit(1)
        
        if len(tplist) < 2 :
            print 'ERROR: '+str(basedir)+' must have at least 2 time points!'
            sys.exit(1)
        
        # tmpdir:
        prefix = './'+subjectid+'_'+options.hemi+'_'
        dirname = tempfile.mkdtemp('',prefix,'')
        if not os.path.exists(dirname):
            print 'ERROR: tmp dir '+str(dirname)+' cannot be created (write permissions?)!'
            sys.exit(1)
        
        
        # ouput written to base: /label/<hemi>.long.cortex.label
        label = options.hemi+'.'+options.outlabel+'.label'
        ctx_target  = os.path.join(basedir,'label',label)

        times = zeros([len(tplist)], Float)
        all = ''
        meant = 0.0
        tp1meas = ''
        tp1id = ''
        tp2meas = ''
        tp2id = ''
        
        # collect inputs and intersect cortex labels:
        for tpdata in tplist:
            i = i+1
            
            #make sure subjectsdir exists
            sdir = os.path.join(subjectsdir,tpdata[0]+'.long.'+subjectid)
            if not os.path.exists(sdir):
                print 'ERROR: TP dir '+str(sdir)+' does not exist!'
                sys.exit(1)
            
            # echo:
            print '\nTP '+str(i)+' : '+tpdata[0]+' time: '+tpdata[varidx]
            
            #init target file names
            measure = os.path.join(sdir,'surf',options.hemi+'.'+options.meas)
            cortex  = os.path.join(sdir,'label',options.hemi+'.cortex.label')
            
            # concat all measure file names
            all = all+' '+measure
            
            # meant
            meant = meant + float(tpdata[varidx])
            times[i-1] = float(tpdata[varidx])
            
            # intersect cortex labels:
            if i == 1 :
                cmd = 'cp '+cortex+' '+ctx_target
                # also store tp1 measure for TYPE PC1:
                tp1meas = measure
                tp1id   = tpdata[0]+'.long.'+subjectid
            else:
                cmd = 'mris_label_calc intersect '+cortex+' '+ctx_target+' '+ctx_target

            if i == 2 : #remember for the 2 tp case below
                tp2meas = measure
                tp2id   =  tpdata[0]+'.long.'+subjectid
               
            if options.inlabel is None: 
                # create base/label/<hemi>.long.cortex.label if not passed
                run_cmd(cmd,'mris_label_calc intersect did not work?')
                if not os.path.exists(ctx_target):
                    print 'ERROR: Cannot write '+str(dirname)+' (write permissions?)!'
                    sys.exit(1)


        # set label from options instead of intersected cortex, if passed
        label = ctx_target
        if options.inlabel is not None:
            label = options.label
            if not os.path.exists(label):
                label = options.hemi+'.'+options.inlabel
                label = os.path.join(basedir,'label',label)
                if not os.path.exists(label):
                    label = options.hemi+'.'+options.inlabel+'.label'
                    label = os.path.join(basedir,'label',label)
                    if not os.path.exists(label):
                        print '\nERROR: cannot find '+options.inlabel+' or '+label
                        sys.exit(1)
               

        # avearge age:
        meant = meant / i
        
        print '\n\nINFO: '+str(i)+' TPs in '+subjectid+' mean age: '+str(meant)+'\n'
        
        # 2 tps, direct computation
        if i == 2 :  
        
            # sort
            if times[0] > times[1] :
                temp = times[1]
                times[1] = times[0]
                times[0] = temp
                temp = tp1meas
                tp1meas = tp2meas
                tp2meas = temp
                temp = tp1id
                tp1id = tp2id
                tp2id = temp
        
            # create difference:
            beta1 = os.path.join(dirname,options.hemi+'.rate.'+options.meas)
            cmd = 'mris_calc -o '+beta1+' '+tp2meas+' sub '+tp1meas
            run_cmd(cmd,'mri_calc difference did not work?')
            cmd = 'mris_calc -o '+beta1+' '+beta1+' div '+str(times[1]-times[0])
            run_cmd(cmd,'mri_calc div did not work?')
            
            ftype = 'curv'
        
            # create average for SPC or avg
            beta0 = os.path.join(dirname,options.hemi+'.avg.'+options.meas)
            cmd = 'mris_calc -o '+beta0+' '+tp1meas+' add '+tp2meas
            run_cmd(cmd,'mri_calc sum did not work?')
            cmd = 'mris_calc -o '+beta0+' '+beta0+' mul 0.5'
            run_cmd(cmd,'mri_calc mul 0.5 did not work?')
        
        
        else: # more than 2 time points, run GLM
        
        
            #write X-matrix (times):
            x_target    = os.path.join(dirname,'X-long.mat')
            print 'Writing '+x_target+' ...\n'
            if os.path.exists(x_target):
                os.remove(x_target)
            xfp = open(x_target, 'w')
            for time in times:
                xfp.write('1 '+str(time-meant)+'\n')
            xfp.close()    
        
            # stack measure maps:
            meas_target = os.path.join(dirname,options.hemi+'.longstack.'+options.meas+'.mgh')
            cmd = 'mri_concat '+all+' --o '+meas_target
            run_cmd(cmd,'mri_concat stacking did not work?')

        
            # run glm in tmp dir:
            cmd = 'mri_glmfit --y '+meas_target+' --X '+x_target+' --no-contrasts-ok --surf '+subjectid+' '+options.hemi+' --label '+label+' --glmdir '+dirname
            run_cmd(cmd,'mri_glmfit did not work?')

            ftype = 'mgh'
        
            # harvest results (in beta.mgh)
            betafn = os.path.join(dirname,'beta.mgh' )  
            beta0  = os.path.join(dirname,'beta0.mgh')  
            beta1  = os.path.join(dirname,'beta1.mgh') 
            if not os.path.exists(betafn):
                print 'ERROR: GLM results '+str(betafn)+' does not exist!'
                sys.exit(1)
            
            # split beta
            cmd = 'mri_convert --frame 0 '+betafn+' '+beta0 
            run_cmd(cmd,'mri_convert split frames 0 did not work?')
        
            cmd = 'mri_convert --frame 1 '+betafn+' '+beta1 
            run_cmd(cmd,'mri_convert split frames 1 did not work?')
        
        
        # either of the cases:        
        
        # possibly smooth them and convert to mgh (in case of the tp1 data):
        smooth = ''
        fwhmstr = ''
        if options.fwhm is not None:
            smooth = ' --fwhm-trg '+options.fwhm+' --label-src '+label
            fwhmstr = '-fwhm'+str(options.fwhm)
        
#        outending = ''
#        outtype = 'curv'
#        if options.out[-4:] == '.mgh':
        outending = '.mgh'
        outtype = 'mgh'
#        elif options.out[-4:] == '.mgz':
#           outending = '.mgz'
#           outtype = 'mgz'
                   
        beta0old = beta0
        beta0 = os.path.join(dirname,'beta0'+fwhmstr+outending) 
        beta1old = beta1  
        beta1 = os.path.join(dirname,'beta1'+fwhmstr+outending)   
        tp1old = tp1meas
        tp1meas = os.path.join(dirname,'tp1'+fwhmstr+outending)  

        cmd = 'mri_surf2surf --hemi '+options.hemi+' --s '+subjectid+' --sval '+beta0old+' --src_type '+ftype+' --tval '+beta0+' --trg_type '+outtype+' '+smooth
        run_cmd(cmd,'mri_surf2surf smoothing/converting did not work?')
        
        cmd = 'mri_surf2surf --hemi '+options.hemi+' --s '+subjectid+' --sval '+beta1old+' --src_type '+ftype+' --tval '+beta1+' --trg_type '+outtype+' '+smooth
        run_cmd(cmd,'mri_surf2surf smoothing/converting did not work?')

        # create ouput (depending on type)
        if options.out_spc is not None:
            outname = os.path.join(basedir,'surf',options.hemi+'.'+options.out_spc)
            if outname[-4:] != '.mgh':
                outname=outname+'.mgh'
            # compute symmetrized pct change:
            cmd = 'mris_calc -o '+outname+' '+beta1+' div '+beta0
            run_cmd(cmd,'mris_calc compute sym. pct. change (spc) problem?')    
            cmd = 'mris_calc -o '+outname+' --label '+label+' '+outname+' mul 100'
            run_cmd(cmd,'mris_calc compute sym. pct. change (spc) problem?')    
                    
        if options.out_pc1 is not None:
            outname = os.path.join(basedir,'surf',options.hemi+'.'+options.out_pc1)
            if outname[-4:] != '.mgh':
                outname=outname+'.mgh'
            # convert/smooth tp1:
            cmd = 'mri_surf2surf --hemi '+options.hemi+' --s '+tp1id+' --sval '+tp1old+' --src_type curv --tval '+tp1meas+' --trg_type '+outtype+' '+smooth
            run_cmd(cmd,'mri_surf2surf smoothing/converting did not work?')
            # compute pct change:
            cmd = 'mris_calc -o '+outname+' '+beta1+' div '+tp1meas
            run_cmd(cmd,'mris_calc compute percent change (pc1) problem?')
            cmd = 'mris_calc -o '+outname+' --label '+label+' '+outname+' mul 100'
            run_cmd(cmd,'mris_calc compute percent change (pc1) problem?')
            
        if options.out_rate is not None: 
            outname = os.path.join(basedir,'surf',options.hemi+'.'+options.out_rate)
            if outname[-4:] != '.mgh':
                outname=outname+'.mgh'
            # mul 1 to remove everything outside the label:
            cmd = 'mris_calc -o '+outname+' --label '+label+' '+beta1+' mul 1'
            run_cmd(cmd,'mris_calc masking with label') 
            
        if  options.out_avg is not None:
            outname = os.path.join(basedir,'surf',options.hemi+'.'+options.out_avg)
            if outname[-4:] != '.mgh':
                outname=outname+'.mgh'
            # mul 1 to remove everything outside the label:
            cmd = 'mris_calc -o '+outname+' --label '+label+' '+beta0+' mul 1'
            run_cmd(cmd,'mris_calc masking with label') 
        
           
        # cleanup tmp dir:    
        shutil.rmtree(dirname)
                
        print 'You can look at the result with, e.g.:'
        print '  tksurfer '+subjectid+' '+options.hemi+' pial -overlay '+outname
        print
          
            
    # always exit with 0 exit code
    sys.exit(0)
