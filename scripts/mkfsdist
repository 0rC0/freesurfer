#!/bin/csh -f
#
# WARNING: this file is under revision control. Please
# use the appropriate checkin/checkout procedures when
# editing.
#
# mkfsdist
# $Id: mkfsdist,v 1.9 2002/05/11 17:55:26 greve Exp $
#
# Usage: mkfsdist targetdir
#
# Purpose: creates a FreeSurfer distribution in the directory 
# specified on the command-line. The distribution can be installed 
# by following the instructions in freesurfer_alpha/INSTALL.
#
# These files are created in the target directory:
#  INSTALL -- installation instructions (copied from freesurfer_alpha);
#  license.freesurfer -- license agreement (copied from freesurfer_alpha);
#  fsa.tar.gz -- the freesurfer_alpha tree
#  minc.tar.gz -- ~inverse/minc (for running functional autoreg)
#  talairach.tar.gz -- $SUBJECTS_DIR/talairach (MNI 305)
#  bert.001.tar.gz -- anatomical tutorial data, run 1
#  bert.002.tar.gz -- anatomical tutorial data, run 2
#  bert.003.tar.gz -- anatomical tutorial data, run 3
#  average7.tar.gz -- contains average labels for checking spherical morph
#
# Symbolic Links in freesurfer_alpha:
# 
#  It does not follow symbolic links, so any symbolic link
#  in freesurfer_alpha must have a pointer relative to someplace in the
#  freesurfer_alpha tree.  
#
# Dynamic and Statically Linked Programs
#
#  The only programs that are dynamically linked are tksurfer, tkmedit,
#  and tkregister. These programs are replaced by their statically
#  linked counterparts. The dynamically linked programs are included
#  with a .dynamic extension. The process that does this is fairly
#  involved. See comments in the code for more detail.
#
# Excluding files and directories from freesurfer_alpha:
# 
#  Files and directories within the freesurfer_alpha tree can be targeted
#  for exclusion by entering them into freesurfer_alpha/tar-exclude. This
#  is useful for excluding the license file (.license) as well as other
#  files that just take up space. When adding items to the exclude file,
#  put only one name on each line and make sure there are no trailing
#  white spaces. This name will be exluded where ever it is found in the 
#  tree, either as a file or as a directory.  It will also exclude the
#  files found in tar-exclude-more and tar-exclude-gca.
#
# 
set VERSION = '$Id: mkfsdist,v 1.9 2002/05/11 17:55:26 greve Exp $';

# To include the autoseg in the distribution set environment varible
# KEEPAUTOSEG to 1 before running mkfsdist (ie, setenv KEEPAUTOSEG 1)
if(! $?KEEPAUTOSEG ) setenv KEEPAUTOSEG 0
if($KEEPAUTOSEG) then
   echo "INFO: keeping autoseg"
else
   echo "INFO: NOT keeping autoseg"
endif

# This is where freesurfer_alpha lives #
set FSA_DIR = ~inverse/freesurfer_alpha;

# This is where the 3 runs of the test subject live #
set BERT_ANAT_DIR = $SUBJECTS_DIR/bert
set BERT_ORIG_DIR = $BERT_ANAT_DIR/mri/orig

set AVERAGE7_DIR = $SUBJECTS_DIR/average7

# Bert's functional data
set BERT_FUNC_DIR = /space/sake/5/tutorial/JUL01/bert-functional

#------------------------------------------------------#
if($#argv != 1) then
  echo "USAGE: mkfsdist targetdir"
  exit 1;
endif
set TARGET_DIR = $argv[1];

# Check that freesurfer_alpha is there #
if(! -e $FSA_DIR) then
  echo "ERROR: cannot find $FSA_DIR"
  exit 1;
endif

# Check that test subject runs are there #
if(! -e $BERT_ANAT_DIR) then
  echo "ERROR: cannot find $BERT_ANAT_DIR"
  exit 1;
endif
foreach run (1 2 3)
  set rundir = `printf %s/%03d $BERT_ORIG_DIR $run`;
  if( ! -e $rundir ) then
    echo "ERROR: cannot find $rundir"
    exit 1
  endif
end

if(! -e $BERT_FUNC_DIR) then
  echo "ERROR: cannot find $BERT_FUNC_DIR"
  exit 1;
endif

# Check that the average7 is there #
if(! -e $AVERAGE7_DIR) then
  echo "ERROR: cannot find $AVERAGE7_DIR"
  exit 1;
endif

# Check that the talairach subject is there #
if(! -e $SUBJECTS_DIR/talairach) then
  echo "ERROR: cannot find $$SUBJECTS_DIR/talairach"
  exit 1;
endif

echo " "
echo "Creating FreeSurfer Distribution in $TARGET_DIR"
echo " "

# This is where the MNI stuff lives #
if(! -e /space/lyon/9/pubsw) then
  echo "ERROR: cannot find /space/lyon/9/pubsw"
  exit 1;
endif

# Create the target directory #
mkdir -p $TARGET_DIR
if($status) then
  echo "ERROR: could not create $TARGET_DIR"
  exit 1;
endif

# Get the full path of the target directory #
pushd $TARGET_DIR  > /dev/null
set TARGET_DIR = `pawd`;
popd > /dev/null

# Make sure the target dir is not inadvertently set to 
# freesurfer_alpha
if("$TARGET_DIR" == "$FSA_DIR") then
  echo "ERROR: target dir == freesurfer_alpha source tree"
  exit 1;
endif

# Put a file with the date as name in the target dir 
set DateStr = "`date '+%Y%m%d'`"
touch $TARGET_DIR/$DateStr

# Create a log file #
set LF = $TARGET_DIR/mkfsdist.log
if(-e $LF) mv $LF $LF.old
echo "Log file is $LF"

echo "Log file for FreeSurfer (alpha) distribution creation" >> $LF
echo $VERSION  >> $LF
echo "$0"    >> $LF
echo "$argv" >> $LF
date >> $LF

#----- Tar up average7 --------#
echo "--------------------------------------------" | tee -a $LF
date | tee -a $LF  
pushd $AVERAGE7_DIR > /dev/null
cd ..
echo "Tarring average7 data" | tee -a $LF
set TF = $TARGET_DIR/average7.tar.gz
rm -f $TF
tar cvz -f $TF \
  ./average7/mri \
  ./average7/label/??-avg_*.label \
  ./average7/surf/?h.avg_curv \
  ./average7/surf/?h.avg_sulc \
  ./average7/surf/?h.curv \
  ./average7/surf/?h.inflated \
  ./average7/surf/?h.orig \
  ./average7/surf/?h.pial \
  ./average7/surf/?h.smoothwm \
  ./average7/surf/?h.sphere \
  ./average7/surf/?h.sphere.reg \
  ./average7/surf/lh.rh.sphere.reg \
  ./average7/surf/?h.sulc >> $LF
date | tee -a $LF  

# ---- Tar up freesurfer_alpha ------- #
cd $FSA_DIR
cd ..
echo "--------------------------------------------" | tee -a $LF
echo "Tarring $FSA_DIR" | tee -a $LF
date | tee -a $LF
set TF = $TARGET_DIR/fsa.tar
rm -f $TF
set tarcmd = ( tar cv -f $TF --exclude-from $FSA_DIR/tar-exclude \
    --exclude-from $FSA_DIR/tar-exclude-more ./freesurfer_alpha)
if(! $KEEPAUTOSEG) set tarcmd = ($tarcmd --exclude-from $FSA_DIR/tar-exclude-gca)
echo $tarcmd | tee -a $LF
$tarcmd  >> $LF

date | tee -a $LF

#------ Special for tksurfer, tkmedit, and tkregister -----------#
# Note: static vs dynamic only applies to Linux.
# This part assures that the statically linked versions of tksurfer,
# tkmedit, and tkregister are the default in the Linux distribution. 
# In the NMR version (ie, ~inverse/freesurfer_alpha), these programs are
# dynamically linked, and the static version have a .static extension.
# Also, tksurfer is replaced by tksurfer.new in all OSs; note that there
# will still be tksurfer.new.
#
# NMR Center          Linux                Sun/IRIX
# ------------------  -----------------    --------------
# tkmedit             tkmedit.dynamic      tkmedit
# tkmedit.static      tkmedit              N/A
# tkregister          tkregister.dynamic   tkregister
# tkregister.static   tkregister           N/A
# tksurfer            Excluded             Excluded
# tksurfer.new        tksurfer.new         tksurfer.new
# tksurfer.new        tksurfer.dynamic     tksurfer
# tksurfer.new.static tksurfer             N/A
# tksurfer.new.static tksurfer.new         N/A
#
# A temporary freesurfer_alpha is created in the target 
# directory, and, under that, bin/Linux is created.
# The relevant files are copied according to
# the translation described above. This freesurfer_alpha is appended
# to the tar of the original freesurfer_alpha. The temporary 
# freesurfer_alpha is then deledted, and the tar file is compressed.
# When the distribution is extracted, the static versions will 
# overwrite the dynamic version (though there will be .dynamic and
# .static files there).
echo "------------------------------------------" | tee -a $LF
echo "Handling tkmedit, tksurfer, and tkregister" | tee -a $LF
date | tee -a $LF
pushd $TARGET_DIR > /dev/null
set FSA_TMP_DIR = freesurfer_alpha;
mkdir -p $FSA_TMP_DIR

# Go through each OS - actually only applies to Linux #
foreach OS (Linux)

  # tkmedit and tkregister #
  mkdir -p $FSA_TMP_DIR/bin/$OS
  foreach binary (tkmedit tkregister)
    # Copy dynamic #
    set fdynamic = $FSA_DIR/bin/$OS/$binary
    if(! -e $fdynamic) then
      echo "ERROR: cannot find $fdynamic"| tee -a $LF
      exit 1;
    endif
    cp $fdynamic $FSA_TMP_DIR/bin/$OS/$binary.dynamic
    # Copy static #
    set fstatic = $FSA_DIR/bin/$OS/$binary.static
    if(! -e $fstatic) then
      echo "ERROR: cannot find $fstatic"| tee -a $LF
      exit 1;
    endif
    cp $fstatic  $FSA_TMP_DIR/bin/$OS/$binary
  end # foreach binary (tkmedit tkregister)

end#foreach OS

# ----------- Handle tksurfer ----------------------#
foreach OS (Linux Solaris IRIX)
  mkdir -p $FSA_TMP_DIR/bin/$OS

  # Get path to tksurfer.new
  set tksurfernew = $FSA_DIR/bin/$OS/tksurfer.new
  if(! -e $tksurfernew) then
    echo "ERROR: cannot find $tksurfernew"| tee -a $LF
    exit 1;
  endif

  # Copy tksurfer.new to tksurfer (except Linux) #
  if("$OS" != "Linux") then
    # Solaris and IRIX
    cp $tksurfernew $FSA_TMP_DIR/bin/$OS/tksurfer
    cp $tksurfernew $FSA_TMP_DIR/bin/$OS/tksurfer.new
  else
    # Linux - must handle stat/dyn linked version #
    cp $tksurfernew $FSA_TMP_DIR/bin/$OS/tksurfer.dynamic
    cp $tksurfernew $FSA_TMP_DIR/bin/$OS/tksurfer.new.dynamic
    # Copy tksurfer.new.static to tksurfer (Linux only)#
    set tksurfernew_static = $FSA_DIR/bin/$OS/tksurfer.new.static
    if(! -e $tksurfernew_static) then
      echo "ERROR: cannot find $tksurfernew_static"| tee -a $LF
      exit 1;
    endif
    cp $tksurfernew_static  $FSA_TMP_DIR/bin/$OS/tksurfer
    cp $tksurfernew_static  $FSA_TMP_DIR/bin/$OS/tksurfer.new
  endif

end#foreach OS

echo "Appending temporary freesurfer_alpha to tar `date`"| tee -a $LF
tar rv -f $TF ./$FSA_TMP_DIR >> $LF

echo "Compressing tar file `date`"| tee -a $LF
gzip $TF

echo "Removing temporary directory `date`"| tee -a $LF
rm -rf $FSA_TMP_DIR

#-- Tar up the minc bin and libs -------#
echo "--------------------------------------------" | tee -a $LF
echo "Tarring minc" | tee -a $LF
date | tee -a $LF
cd /space/lyon/9/pubsw
set TF = $TARGET_DIR/minc.tar
rm -f $TF
foreach os (IRIX SolSparc SunOS5 Linux2 Solaris)
  echo $os | tee -a $LF
  set mnidir = ./$os/packages/mni
  if(! -e $mnidir) then
    echo "WARNING: cannot find $mnidir" | tee -a $LF
    continue;
  endif
  tar rv -f $TF ./$os/packages/mni >> $LF
end
gzip $TF
date | tee -a $LF

#----- Tar up the talairach (MNI305) subject --------#
echo "--------------------------------------------" | tee -a $LF
echo "Tarring talairach subject" | tee -a $LF
cd $SUBJECTS_DIR/talairach
cd ..
date | tee -a $LF
set TF = $TARGET_DIR/talairach.tar.gz
rm -f $TF
tar cvz -f $TF ./talairach >> $LF
date | tee -a $LF

#----- Tar up berts raw anatomicals --------#
echo "--------------------------------------------" | tee -a $LF
date | tee -a $LF  
pushd $BERT_ORIG_DIR > /dev/null
pawd
set TF = $TARGET_DIR/bert.raw.tar.gz
rm -f $TF
tar cvz -f $TF ./001 ./002 ./003 >> $LF

#----- Tar up berts reconstructed anatomicals --------#
echo "--------------------------------------------" | tee -a $LF
date | tee -a $LF  
pushd $BERT_ANAT_DIR > /dev/null
cd ..
pawd
set TF = $TARGET_DIR/bert.recon.tar.gz
rm -f $TF 
tar cvz -f $TF ./bert >> $LF

#----- Tar up Bert's functional data --------#
echo "--------------------------------------------" | tee -a $LF
date | tee -a $LF  
pushd $BERT_FUNC_DIR > /dev/null
cd ..
echo "Tarring bert functional data" | tee -a $LF
set TF = $TARGET_DIR/bert.func.tar.gz
rm -f $TF
tar cvz -f $TF ./bert-functional >> $LF
date | tee -a $LF  

echo "------------------------------------------" | tee -a $LF

# Copy the INSTALL File
cp $FSA_DIR/INSTALL $TARGET_DIR

# Copy the License Agreement File
cp $FSA_DIR/docs/license.freesurfer $TARGET_DIR

echo "$0 done"


exit 0
